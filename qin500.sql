-- phpMyAdmin SQL Dump
-- version 4.8.5
-- https://www.phpmyadmin.net/
--
-- 主机： sql.s1253.vhostgo.com
-- 生成日期： 2022-09-12 11:23:32
-- 服务器版本： 5.7.37
-- PHP 版本： 7.2.7

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- 数据库： `qin500`
--

-- --------------------------------------------------------

--
-- 表的结构 `qin500_articles`
--

CREATE TABLE `qin500_articles` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `uid` int(11) DEFAULT NULL COMMENT '用户id',
  `title` varchar(120) COLLATE utf8_unicode_ci DEFAULT NULL COMMENT '标题',
  `text` longtext COLLATE utf8_unicode_ci COMMENT '文章内容',
  `masterpic` varchar(250) COLLATE utf8_unicode_ci NOT NULL COMMENT '主图',
  `pure` longtext COLLATE utf8_unicode_ci COMMENT '文章内容被剥离HTML标签',
  `cid` int(11) DEFAULT NULL COMMENT '分类id',
  `views` int(11) DEFAULT '0' COMMENT '浏览次数',
  `isshow` int(255) NOT NULL COMMENT '1显示0隐藏',
  `zan` int(11) NOT NULL DEFAULT '0' COMMENT '文章赞',
  `bdts` int(11) NOT NULL DEFAULT '0' COMMENT '百度推送',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ROW_FORMAT=DYNAMIC;

--
-- 转存表中的数据 `qin500_articles`
--

INSERT INTO `qin500_articles` (`id`, `uid`, `title`, `text`, `masterpic`, `pure`, `cid`, `views`, `isshow`, `zan`, `bdts`, `created_at`, `updated_at`) VALUES
(1006, 1000, 'JavaScript 变量提升', '<div class=\"markdown-toc editormd-markdown-toc\">\n<p>实例 1</p>\n<p>javaScript 中，函数及变量的声明都将被提升到函数的最顶部。</p>\n<p>JavaScript 中，变量可以在使用后声明，也就是变量可以先使用再声明。</p>\n<p>以下两个实例将获得相同的结果：</p>\n<p>x = 5; // 变量 x 设置为 5<br />elem = document.getElementById(\"demo\"); // 查找元素<br />elem.innerHTML = x; // 在元素中显示 x<br />var x; // 声明 x<br />实例 2<br />var x; // 声明 x<br />x = 5; // 变量 x 设置为 5<br />elem = document.getElementById(\"demo\"); // 查找元素<br />elem.innerHTML = x; // 在元素中显示 x</p>\n<p>&nbsp;</p>\n</div>', 'https://wpcdn.qin500.com/QIN500/SUCAI/080.jpg', '\n实例 1\njavaScript 中，函数及变量的声明都将被提升到函数的最顶部。\nJavaScript 中，变量可以在使用后声明，也就是变量可以先使用再声明。\n以下两个实例将获得相同的结果：\nx = 5; // 变量 x 设置为 5elem = document.getElementById(\"demo\"); // 查找元素elem.innerHTML = x; // 在元素中显示 xvar x; // 声明 x实例 2var x; // 声明 xx = 5; // 变量 x 设置为 5elem = document.getElementById(\"demo\"); // 查找元素elem.innerHTML = x; // 在元素中显示 x\n&nbsp;\n', 11, 494, 1, 0, 1, '2020-10-07 05:45:33', '2022-09-11 07:31:02'),
(1007, 1000, 'editormd编辑器替换原生上传接口(原创)', '<p>经过几个小时的整理,终于把原生上传接口替换完成<br />下面是操作流程</p>\n<ol class=\"linenums\">\n<li class=\"L0\"><code><span class=\"pln\">imageUpload</span><span class=\"pun\">:</span> <span class=\"kwd\">true</span><span class=\"pun\">,</span></code></li>\n</ol>\n<p>将 imageUpload设置为true, 开启上传模块</p>\n<pre class=\"language-html\"><code class=\"line-numbers language-html\">var dialogContent = ((settings.imageUpload) ? \"&lt;form action=\" + action +  target=\" + iframeName + \" method=\"post\" enctype=\"multipart/form-data\" class=\"\" + classPrefix + \"form\"&gt;\" : \"&lt;div class=\" + classPrefix + \"form&gt;\") +\n    ((settings.imageUpload) ? \"&lt;iframe name=\" + iframeName + \" id=\" + iframeName + \" guid=\"\" + guid + \"&gt;&lt;/iframe&gt;\" : \") +\n    \"&lt;label&gt;\" + imageLang.url + \"&lt;/label&gt;\" +\n    \"&lt;input type=\"text\" data-url /&gt;\" + (function () {\n        return (settings.imageUpload) ? \"&lt;div class=\" + classPrefix + \"file-input\"&gt;\" +\n            \"&lt;input id=\'ossimgfile\' type=\"file\" name=\" + classPrefix + \"image-file\" accept=\"image/*\" /&gt;\" +\n            \"&lt;input class=\'editormd-btn editormd-cancel-btn\' type=\"button\" value=\"\" + imageLang.uploadButton + \" /&gt;\" +\n            \"&lt;/div&gt;\" : \"\";\n    })() +\n    \"&lt;br/&gt;\" +\n    \"&lt;label&gt;\" + imageLang.alt + \"&lt;/label&gt;\" +\n    \"&lt;input type=\"text\" value=\"\" + selection + \"\" data-alt /&gt;\" +\n    \"&lt;br/&gt;\" +\n    \"&lt;label&gt;\" + imageLang.link + \"&lt;/label&gt;\" +\n    \"&lt;input type=\"text\" value=\"http://\" data-link /&gt;\" +\n    \"&lt;br/&gt;\" +\n    ((settings.imageUpload) ? \"&lt;/form&gt;\" : \"&lt;/div&gt;\");</code></pre>\n<p>上图代码对应这个对话框</p>\n<p>大概在165行我们添加自己的上传方法</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">var upingHandle=function (){\n// console.log(document.getElementsByTagName(\"[name=\'\" + classPrefix + \"image-file\']\"));\nossUpload({\n\'url\': ossgu,\n\'input\': document.getElementById(\"ossimgfile\"),\n\'type\': \'article\',//指定上传类型\n\'progress\': function (e) {\n},\n\'finsh\': function (e) {\nif (e.status == \"ok\") {\ndialog.find(\"[data-url]\").val(e.url);\n}\n}\n});\n//关闭上传动画\nloading(false);\n}</code></pre>\n<p>大概在186行,编辑器原生的方法</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">var submitHandler = function() {</code></pre>\n<p>在这个方法下面,绑定我们自己的控件,原生的注释即可</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">// dialog.find(\"[type=\\\"submit\\\"]\").bind(\"click\", submitHandler).trigger(\"click\");\ndialog.find(\"[type=\\\"button\\\"]\").bind(\"click\", upingHandle).trigger(\"click\");</code></pre>\n<hr />\n<p><img src=\"https://wpcdn.qin500.com/1000/2021821212942AjN1MZdQWr2833X93SwxRHcn8c.png\" /></p>\n<p>&nbsp;</p>\n<p>上面两张图片是我修改接口后,所上传的图片,成功上传图片,哈哈!!!</p>', 'https://wpcdn.qin500.com/1000/2021821212942AjN1MZdQWr2833X93SwxRHcn8c.png', '经过几个小时的整理,终于把原生上传接口替换完成下面是操作流程\n\nimageUpload: true,\n\n将 imageUpload设置为true, 开启上传模块\nvar dialogContent = ((settings.imageUpload) ? \"&lt;form action=\" + action +  target=\" + iframeName + \" method=\"post\" enctype=\"multipart/form-data\" class=\"\" + classPrefix + \"form\"&gt;\" : \"&lt;div class=\" + classPrefix + \"form&gt;\") +\n    ((settings.imageUpload) ? \"&lt;iframe name=\" + iframeName + \" id=\" + iframeName + \" guid=\"\" + guid + \"&gt;&lt;/iframe&gt;\" : \") +\n    \"&lt;label&gt;\" + imageLang.url + \"&lt;/label&gt;\" +\n    \"&lt;input type=\"text\" data-url /&gt;\" + (function () {\n        return (settings.imageUpload) ? \"&lt;div class=\" + classPrefix + \"file-input\"&gt;\" +\n            \"&lt;input id=\'ossimgfile\' type=\"file\" name=\" + classPrefix + \"image-file\" accept=\"image/*\" /&gt;\" +\n            \"&lt;input class=\'editormd-btn editormd-cancel-btn\' type=\"button\" value=\"\" + imageLang.uploadButton + \" /&gt;\" +\n            \"&lt;/div&gt;\" : \"\";\n    })() +\n    \"&lt;br/&gt;\" +\n    \"&lt;label&gt;\" + imageLang.alt + \"&lt;/label&gt;\" +\n    \"&lt;input type=\"text\" value=\"\" + selection + \"\" data-alt /&gt;\" +\n    \"&lt;br/&gt;\" +\n    \"&lt;label&gt;\" + imageLang.link + \"&lt;/label&gt;\" +\n    \"&lt;input type=\"text\" value=\"http://\" data-link /&gt;\" +\n    \"&lt;br/&gt;\" +\n    ((settings.imageUpload) ? \"&lt;/form&gt;\" : \"&lt;/div&gt;\");\n上图代码对应这个对话框\n大概在165行我们添加自己的上传方法\nvar upingHandle=function (){\n// console.log(document.getElementsByTagName(\"[name=\'\" + classPrefix + \"image-file\']\"));\nossUpload({\n\'url\': ossgu,\n\'input\': document.getElementById(\"ossimgfile\"),\n\'type\': \'article\',//指定上传类型\n\'progress\': function (e) {\n},\n\'finsh\': function (e) {\nif (e.status == \"ok\") {\ndialog.find(\"[data-url]\").val(e.url);\n}\n}\n});\n//关闭上传动画\nloading(false);\n}\n大概在186行,编辑器原生的方法\nvar submitHandler = function() {\n在这个方法下面,绑定我们自己的控件,原生的注释即可\n// dialog.find(\"[type=\\\"submit\\\"]\").bind(\"click\", submitHandler).trigger(\"click\");\ndialog.find(\"[type=\\\"button\\\"]\").bind(\"click\", upingHandle).trigger(\"click\");\n\n\n&nbsp;\n上面两张图片是我修改接口后,所上传的图片,成功上传图片,哈哈!!!', 11, 445, 1, 0, 1, '2020-10-09 03:54:38', '2022-09-11 08:49:32'),
(1008, 1000, 'linux用户操作', '<p>添加 useradd admin<br />密码修改 passwd admin<br />删除 userdel admin</p>\n<p>1、首先进入系统创建一个用户</p>\n<ol class=\"linenums\">\n<li class=\"L0\"><code><span class=\"pun\">[</span><span class=\"pln\">root@localhost </span><span class=\"pun\">/]#</span><span class=\"pln\"> useradd haha   </span><span class=\"com\">#创建用户  haha是用户名</span></code></li>\n<li class=\"L1\"><code></code></li>\n<li class=\"L2\"><code><span class=\"pun\">[</span><span class=\"pln\">root@localhost </span><span class=\"pun\">/]#</span><span class=\"pln\"> passwd haha   </span><span class=\"com\">#为该用户设置密码</span></code></li>\n<li class=\"L3\"><code></code></li>\n<li class=\"L4\"><code><span class=\"pun\">更改用户</span><span class=\"pln\"> haha </span><span class=\"pun\">的密码</span> <span class=\"pun\">。</span></code></li>\n<li class=\"L5\"><code><span class=\"pun\">新的</span> <span class=\"pun\">密码：******</span>    </code></li>\n<li class=\"L6\"><code></code></li>\n<li class=\"L7\"><code><span class=\"pun\">密码设置完成后，提示&ldquo;</span><span class=\"pln\">passwd</span><span class=\"pun\">：所有的身份验证令牌已经成功更新。&rdquo;，表示密码已经设置成功。</span></code></li>\n</ol>\n<p>2、对该用户一些信息目录查看</p>\n<p>3、删除用户</p>\n<p>若使用userdel haha 命令删除该用户时，并不能删除该用户的所有信息，只是删除了/etc/passwd、/etc/shadow、/etc/group/、/etc/gshadow四个文件里的该账户和组的信息。默认情况下创建一个用户账号，会创建一个家目录和一个用户邮箱（在/var/spool/mail目录以用户名命名）</p>\n<ol class=\"linenums\">\n<li class=\"L0\"><code>  <span class=\"pun\">[</span><span class=\"pln\">root@localhost </span><span class=\"pun\">/]#</span><span class=\"pln\"> userdel haha</span></code></li>\n<li class=\"L1\"><code>  <span class=\"pun\">[</span><span class=\"pln\">root@localhost </span><span class=\"pun\">/]#</span><span class=\"pln\"> cat </span><span class=\"pun\">/</span><span class=\"pln\">etc</span><span class=\"pun\">/</span><span class=\"pln\">passwd </span><span class=\"pun\">|</span><span class=\"pln\"> grep haha</span></code></li>\n<li class=\"L2\"><code>  <span class=\"pun\">[</span><span class=\"pln\">root@localhost </span><span class=\"pun\">/]#</span><span class=\"pln\"> cat </span><span class=\"pun\">/</span><span class=\"pln\">etc</span><span class=\"pun\">/</span><span class=\"pln\">shadow </span><span class=\"pun\">|</span><span class=\"pln\"> grep haha</span></code></li>\n<li class=\"L3\"><code>  <span class=\"pun\">[</span><span class=\"pln\">root@localhost </span><span class=\"pun\">/]#</span><span class=\"pln\"> cat </span><span class=\"pun\">/</span><span class=\"pln\">etc</span><span class=\"pun\">/</span><span class=\"kwd\">group</span> <span class=\"pun\">|</span><span class=\"pln\"> grep haha</span></code></li>\n<li class=\"L4\"><code>  <span class=\"pun\">[</span><span class=\"pln\">root@localhost </span><span class=\"pun\">/]#</span><span class=\"pln\"> cat </span><span class=\"pun\">/</span><span class=\"pln\">etc</span><span class=\"pun\">/</span><span class=\"pln\">gshadow </span><span class=\"pun\">|</span><span class=\"pln\"> grep haha</span></code></li>\n<li class=\"L5\"><code>  <span class=\"pun\">[</span><span class=\"pln\">root@localhost </span><span class=\"pun\">/]#</span><span class=\"pln\"> find </span><span class=\"pun\">/</span> <span class=\"pun\">-</span><span class=\"pln\">name </span><span class=\"str\">\"*haha*\"</span></code></li>\n</ol>\n<p>下次再创建用户时，就会出现：</p>\n<p>上图报错，所以当你再次创建该用户账号的时候会报错，这就说明与该用户相关的文件或目录之前并没有删除完全。</p>\n<p>4、正确删除用户</p>\n<ol class=\"linenums\">\n<li class=\"L0\"><code> <span class=\"pun\">[</span><span class=\"pln\">root@localhost </span><span class=\"pun\">/]#</span><span class=\"pln\"> userdel </span><span class=\"pun\">-</span><span class=\"pln\">r haha</span></code></li>\n</ol>\n<p>再使用find命令查看，用户相关文件已经删除。</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/054.jpg', '添加 useradd admin密码修改 passwd admin删除 userdel admin\n1、首先进入系统创建一个用户\n\n[root@localhost /]# useradd haha   #创建用户  haha是用户名\n\n[root@localhost /]# passwd haha   #为该用户设置密码\n\n更改用户 haha 的密码 。\n新的 密码：******    \n\n密码设置完成后，提示&ldquo;passwd：所有的身份验证令牌已经成功更新。&rdquo;，表示密码已经设置成功。\n\n2、对该用户一些信息目录查看\n3、删除用户\n若使用userdel haha 命令删除该用户时，并不能删除该用户的所有信息，只是删除了/etc/passwd、/etc/shadow、/etc/group/、/etc/gshadow四个文件里的该账户和组的信息。默认情况下创建一个用户账号，会创建一个家目录和一个用户邮箱（在/var/spool/mail目录以用户名命名）\n\n  [root@localhost /]# userdel haha\n  [root@localhost /]# cat /etc/passwd | grep haha\n  [root@localhost /]# cat /etc/shadow | grep haha\n  [root@localhost /]# cat /etc/group | grep haha\n  [root@localhost /]# cat /etc/gshadow | grep haha\n  [root@localhost /]# find / -name \"*haha*\"\n\n下次再创建用户时，就会出现：\n上图报错，所以当你再次创建该用户账号的时候会报错，这就说明与该用户相关的文件或目录之前并没有删除完全。\n4、正确删除用户\n\n [root@localhost /]# userdel -r haha\n\n再使用find命令查看，用户相关文件已经删除。', 12, 406, 1, 0, 1, '2020-10-09 19:41:18', '2022-09-11 07:31:02'),
(1009, 1000, '快速刷新注册表', '<p>首先，要让修改后的注册表生效通常有三种方法：</p>\n<p>1、刷新。也就是说修改注册表后可以立即生效（一些修改是可以的）。</p>\n<p>2、重起explorer进程。这也是通常替代重启的最简单的方法（适用绝大多数）。</p>\n<p>3、重启。有一些修改是必须要重启计算机的，没有什么其他捷径可言（适用全部）。</p>\n<p>所以可以看出来，第二种方法&ldquo;重起explorer进程&rdquo;变成了首选的方案了！</p>\n<p>一般，我修改注册表后会用下面的方法让其生效的：</p>\n<p>在记事本里，输入以下内容，并保存为Reflash.BAT文件即可！</p>\n<ol class=\"linenums\">\n<li class=\"L0\"><code><span class=\"lit\">@echo</span><span class=\"pln\"> off</span></code></li>\n<li class=\"L1\"><code><span class=\"pln\">taskkill </span><span class=\"pun\">/</span><span class=\"pln\">im explorer</span><span class=\"pun\">.</span><span class=\"pln\">exe </span><span class=\"pun\">/</span><span class=\"pln\">f</span></code></li>\n<li class=\"L2\"><code><span class=\"pln\">ping </span><span class=\"pun\">-</span><span class=\"pln\">n </span><span class=\"lit\">2</span> <span class=\"lit\">127.0</span><span class=\"pun\">.</span><span class=\"lit\">0.1</span> <span class=\"pun\">&gt;</span><span class=\"pln\"> nul</span></code></li>\n<li class=\"L3\"><code><span class=\"pln\">start c</span><span class=\"pun\">:</span><span class=\"pln\">\\windows\\explorer</span><span class=\"pun\">.</span><span class=\"pln\">exe</span></code></li>\n</ol>\n<p>这个BAT文件，会在双击后，自动结束&ldquo;explorer进程&rdquo;，然后又会新建</p>\n<p>&ldquo;explorer进程&rdquo;来使得修改后的注册表生效。用这个简单的方法基本上可以</p>\n<p>解决日常注册表的修改！不过有一些还是要重启的。</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/006.jpg', '首先，要让修改后的注册表生效通常有三种方法：\n1、刷新。也就是说修改注册表后可以立即生效（一些修改是可以的）。\n2、重起explorer进程。这也是通常替代重启的最简单的方法（适用绝大多数）。\n3、重启。有一些修改是必须要重启计算机的，没有什么其他捷径可言（适用全部）。\n所以可以看出来，第二种方法&ldquo;重起explorer进程&rdquo;变成了首选的方案了！\n一般，我修改注册表后会用下面的方法让其生效的：\n在记事本里，输入以下内容，并保存为Reflash.BAT文件即可！\n\n@echo off\ntaskkill /im explorer.exe /f\nping -n 2 127.0.0.1 &gt; nul\nstart c:\\windows\\explorer.exe\n\n这个BAT文件，会在双击后，自动结束&ldquo;explorer进程&rdquo;，然后又会新建\n&ldquo;explorer进程&rdquo;来使得修改后的注册表生效。用这个简单的方法基本上可以\n解决日常注册表的修改！不过有一些还是要重启的。', 13, 421, 1, 0, 1, '2020-10-09 20:11:52', '2022-09-11 14:18:10'),
(1010, 1000, '禁用任务管理器', '<ol class=\"linenums\">\n<li class=\"L0\"><code><span class=\"pun\">计算机</span><span class=\"pln\">\\HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\system</span></code></li>\n</ol>\n<p><img src=\"https://oss.qin500.com/user/1000/article/20201009161523_004.png\" alt=\"\" /><br />新建system项,<br />右键单击&ldquo;system&rdquo;，新建一个Dword32值，重命名为&rdquo;DisableTaskMgr&ldquo;并设置为1。</p>', 'https://oss.qin500.com/user/1000/article/20201009161523_004.png', '\n计算机\\HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\system\n\n新建system项,右键单击&ldquo;system&rdquo;，新建一个Dword32值，重命名为&rdquo;DisableTaskMgr&ldquo;并设置为1。', 13, 393, 1, 0, 1, '2020-10-09 20:15:28', '2022-09-11 08:04:30'),
(1013, 1000, '控制面板-环境变量', '<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"typ\">Computer</span><span class=\"pln\">\\HKEY_CURRENT_USER\\Environment</span></code></li></ol></pre><p><img src=\"https://oss.qin500.com/user/1000/article/20201009162022_007.png\" alt=\"\">\n</p>', 'https://oss.qin500.com/user/1000/article/20201009162022_007.png', 'Computer\\HKEY_CURRENT_USER\\Environment\n', 4, 376, 1, 0, 1, '2020-10-09 20:20:36', '2022-09-11 07:31:02'),
(1014, 1000, 'Excel快捷键大全', '<p>Excel作为办公软件中常用软件，其快捷键也颇多，下面我将其快捷键介绍给大家。</p>\n<p>快捷键</p>\n<h3 id=\"h3-ctrl-\"><a name=\"Ctrl组合快捷键\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Ctrl组合快捷键</h3><p>【Ctrl】+【(】        取消隐藏选定范围内所有隐藏的行。<br>【Ctrl】+【)】        取消隐藏选定范围内所有隐藏的列。<br>【Ctrl】+【&amp;】        将外框应用于选定单元格。<br>【Ctrl】+【_】        从选定单元格删除外框。<br>【Ctrl】+【~】        应用“常规”数字格式。<br>【Ctrl】+【$】        应用带有两位小数的“货币”格式（负数放在括号中）。<br>【Ctrl】+【%】        应用不带小数位的“百分比”格式。<br>【Ctrl】+【^】        应用带有两位小数的“指数”格式。<br>【Ctrl】+【#】        应用带有日、月和年的“日期”格式。<br>【Ctrl】+【@】        应用带有小时和分钟以及AM或PM的“时间”格式。<br>【Ctrl】+【!】        应用带有两位小数、千位分隔符和减号(-)（用于负值）的“数值”格式。<br>【Ctrl】+【-】        显示用于删除选定单元格的【删除】对话框。<br>【Ctrl】+【*】        选择环绕活动单元格的当前区域（由空白行和空白列围起的数据区域）。 在数据透视表中，它将选择整个数据透视表。<br>【Ctrl】+【:】        输入当前时间。<br>【Ctrl】+【;】        输入当前日期。<br>【Ctrl】+【`】        在工作表中切换显示单元格值和公式。<br>【Ctrl】+【’】        将公式从活动单元格上方的单元格复制到单元格或编辑栏中。<br>【Ctrl】+【”】        将值从活动单元格上方的单元格复制到单元格或编辑栏中。<br>【Ctrl】+【+】        显示用于插入空白单元格的【插入】对话框。<br>【Ctrl】+【1】        显示【单元格格式】对话框。<br>【Ctrl】+【2】        应用或取消加粗格式设置。<br>【Ctrl】+【3】        应用或取消倾斜格式设置。<br>【Ctrl】+【4】        应用或取消下划线。<br>【Ctrl】+【5】        应用或取消删除线。<br>【Ctrl】+【6】        在隐藏对象、显示对象和显示对象占位符之间切换。<br>【Ctrl】+【7】        显示或隐藏【常用】工具栏。<br>【Ctrl】+【8】        显示或隐藏大纲符号。<br>【Ctrl】+【9】        隐藏选定的行。<br>【Ctrl】+【0】        隐藏选定的列。<br>【Ctrl】+【A】        选择整个工作表。<br>如果工作表包含数据，则按【Ctrl】+【A】将选择当前区域。<br>再次按【Ctrl】+【A】将选择整个工作表。  当插入点位于公式中某个函数名称的右边时，则会显示“函数参数”对话框。<br>当插入点位于公式中某个函数名称的右边时，按【Ctrl】+【Shift】+【A】将会插入参数名称和括号。<br>【Ctrl】+【B】        应用或取消加粗格式设置。<br>【Ctrl】+【C】        复制选定的单元格。<br>如果连续按两次【Ctrl】+【C】，则会显示【Microsoft Office剪贴板】。<br>【Ctrl】+【D】        使用【向下填充】命令将选定范围内最顶层单元格的内容和格式复制到下面的单元格中。<br>【Ctrl】+【F】        显示【查找】对话框。<br>按【Shift】+【F5】也会显示此对话框，而按【Shift】+【F4】则会重复上一次查找操作。<br>【Ctrl】+【G】        显示【定位】对话框。 按【F5】也会显示此对话框。<br>【Ctrl】+【H】        显示【查找和替换】对话框。<br>【Ctrl】+【I】        应用或取消倾斜格式设置。<br>【Ctrl】+【K】        为新的超链接显示【插入超链接】对话框，或为选定的现有超链接显示【编辑超链接】对话框。<br>【Ctrl】+【L】        显示【创建列表】对话框。<br>【Ctrl】+【N】        创建一个新的空白文件。<br>【Ctrl】+【O】        显示【打开】对话框以打开或查找文件。<br>按【Ctrl】+【Shift】+【O】可选择所有包含批注的单元格。<br>【Ctrl】+【P】        显示【打印】对话框。<br>【Ctrl】+【R】        使用“向右填充”命令将选定范围最左边单元格的内容和格式复制到右边的单元格中。<br>【Ctrl】+【S】        使用其当前文件名、位置和文件格式保存活动文件。<br>【Ctrl】+【U】        应用或取消下划线。<br>【Ctrl】+【V】        在插入点处插入剪贴板的内容，并替换任何选定内容。只有在剪切或复制了对象、文本或单元格内容后，才能使用此快捷键。<br>【Ctrl】+【W】        关闭选定的工作簿窗口。<br>【Ctrl】+【X】        剪切选定的单元格。<br>【Ctrl】+【Y】        重复上一个命令或操作（如有可能）。<br>【Ctrl】+【Z】        使用【撤消】命令来撤消上一个命令或删除最后键入的条目。<br>显示了自动更正智能标记时，按【Ctrl】+【Shift】+【Z】可使用【撤消】或【重复】命令撤消或恢复上一次自动更正操作。<br>    • 功 能 键<br>【F1】        显示“帮助”任务窗格。<br>按【Ctrl】+【F1】可关闭并重新打开当前任务窗格。<br>按【Alt】+【F1】可创建当前范围中数据的图表。<br>按【Alt】+【Shift】+【F1】可插入新的工作表。<br>【F2】        编辑活动单元格并将插入点放在单元格内容的结尾。如果禁止在单元格中进行编辑，它也会将插入点移到编辑栏中。<br>按【Shift】+【F2】可编辑单元格批注。<br>【F3】        将定义的名称粘贴到公式中。<br>按【Shift】+【F3】将显示【插入函数】对话框。<br>【F4】        重复上一个命令或操作（如有可能）。<br>按【Ctrl】+【F4】可关闭选定的工作簿窗口。<br>【F5】        显示【定位】对话框。<br>按【Ctrl】+【F5】可恢复选定工作簿窗口的窗口大小。<br>【F6】        切换到已拆分（【窗口】菜单，【拆分】命令）的工作表中的下一个窗格。<br>按【Shift】+【F6】可切换到已拆分的工作表中的上一个窗格。<br>如果打开了多个工作簿窗口，则按【Ctrl】+【F6】可切换到下一个工作簿窗口。<br>【F7】        显示“拼写检查”对话框，以检查活动工作表或选定范围中的拼写。<br> 如果工作簿窗口未最大化，则按【Ctrl】+【F7】可对该窗口执行【移动】命令。<br>使用箭头键移 动窗口，并在完成时按【Esc】。<br>【F8】        打开或关闭扩展模式。在扩展模式中，【EXT】将出现在状态行中，并且按箭头键可扩展选定范围。<br>通过按Shift+F8，您可以使用箭头键将非邻近单元格或范围添加到单元格的选定范围。<br>当工作簿未最大化时，按【Ctrl】+【F8】可执行大小命令（在工作簿窗口的【控制】菜单上。 按【Alt】+【F8】可显示用于运行、编辑或删除宏的【宏】对话框。<br>【F9】        计算所有打开的工作簿中的所有工作表。<br>如果先按【F9】，再按【Enter】（对于数组公式则按【Ctrl】+【Shift】+【Enter】），则会计算选定的公式部分，并将选定部分替换为计算出的值。<br>按【Shift】+【F9】可计算活动工作表。<br>按【Ctrl】+【Alt】+【F9】可计算所有打开的工作簿中的所有工作表，不管它们自上次计算以来是否已更改。<br>如果按【Ctrl】+【Alt】+【Shift】+【F9】，则会重新检查相关公式，然后计算所有打开的工作簿中的所有单元格，其中包括未标记为需要计算的单元格。<br>按【Ctrl】+【F9】可将工作簿窗口最小化为图标。<br>【F10】        选择菜单栏或同时关闭打开的菜单和子菜单。<br>按【Shift】+【F10】可显示选定项目的快捷菜单。<br>按【Alt】+【Shift】+【F10】可显示智能标记的菜单或消息。如果存在多个智能标记，按该组合键可切换到下一个智能标记并显示其菜单或消息。<br>按【Ctrl】+【F10】可最大化或还原选定的工作簿窗口。<br>【F11】        创建当前范围内数据的图表。<br>按【Shift】+【F11】可插入一个新工作表。<br>按【Alt】+【F11】将打开【Visual Basic编辑器】，您可以在其中通过使用Visual Basic for Applications(VBA)来创建宏。<br>按【Alt】+【Shift】+【F11】将打开【Microsoft脚本编辑器】，您可以在其中添加文本、编辑HTML标记以及修改任何脚本代码。<br>【F12】        显示【另存为】对话框。<br>    • 其他快捷键 ：<br>【箭头键】        在工作表中上移、下移、左移或右移一个单元格。<br>按【Ctrl】+【箭头键】可移动到工作表中当前数据区域 （数据区域：包含数据的单元格区域，该区域周围为空白单元格或数据表边框。）的边缘。<br>按【Shift】+【箭头键】可将单元格的选定范围扩大一个单元格。<br>按【Ctrl】+【Shift】+【箭头键】可将单元格的选定范围扩展到与活动单元格同一列或同一行中的最后一个非空白单元格。<br>当菜单处于可见状态时，按【向左键】或【向右键】可选择左边或右边的菜单。当子菜单处于打开状态时，按这些箭头键可在主菜单和子菜单之间切换。<br>当菜单或子菜单处于打开状态时，按【向下键】或【向上键】可选择下一个或上一个命令。 在对话框中，按【箭头键】可在打开的下拉列表中的各个选项之间移动，或在一组选项的各个选项之间移动。  按【Alt】+【向下键】可打开选定的下拉列表。<br>【Backspace】        在编辑栏中删除左边的一个字符。 也可清除活动单元格的内容。  【Delete】        从选定单元格中删除单元格内容（数据和公式），而不会影响单元格格式或批 注。  在单元格编辑模式下，按该键将会删除插入点右边的字符。<br>【End】        当【Scroll Lock】处于开启状态时，移动到窗口右下角的单元格。<br>当菜单或子菜单处于可见状态时，也可选择菜单上的最后一个命令。<br>按【Ctrl】+【End】可移动到工作表上的最后一个单元格，即所使用的最下方一行与所使用的最右边一列的交汇单元格。<br>按【Ctrl】+【Shift】+【End】可将单元格的选定范围扩展到工作表上所使用的最后一个单元格（右下角）。<br>【Enter】        从单元格或编辑栏中完成单元格输入，并（默认）选择下面的单元格。 在数据表单中，按该键可移动到下一条记录中的第一个字段。<br>打开选定的菜单（按【F10】激活菜单栏），或执行选定命令的操作。<br>在对话框中，按该键可执行对话框中默认命令按钮（带有突出轮廓的按钮，通常为【确定】按钮）的操作。<br>按【Alt】+【Enter】可在同一单元格中另起一个新行。<br>按【Ctrl】+【Enter】可使用当前条目填充选定的单元格区域。<br>按【Shift】+【Enter】可完成单元格输入并选择上面的单元格。<br>【Esc】        取消单元格或编辑栏中的输入。  按该键也可关闭打开的菜单或子菜单、对话框或消息窗口。<br>【Home】        移到工作表中某一行的开头。<br>当【Scroll Lock】处于开启状态时，移到窗口左上角的单元格。 当菜单或子菜单处于可见状态时，选择菜单上的第一个命令。 按【Ctrl】+【Home】可移到工作表的开头。  按【Ctrl】+【Shift+Home】可将单元格的选定范围扩展到工作表的开头。 Page Down        在工作表中下移一个屏幕。<br> 按【Alt】+【Page Down】可在工作表中向右移动一个屏幕。 按【Ctrl】+【Page Down】可移到工作簿中的下一个工作表。<br>按【Ctrl】+【Shift+Page Down】可选择工作簿中的当前和下一个工作表。<br>【Page Up】<br>在工作表中上移一个屏幕。<br>按【Alt】+【Page Up】可在工作表中向左移动一个屏幕。<br>按【Ctrl】+【Page Up】可移到工作簿中的上一个工作表。<br>按【Ctrl】+【Shift+Page Up】可选择工作簿中的当前和上一个工作表。<br>【空格键】        在对话框中，执行选定按钮的操作，或者选中或清除复选框。<br>按【Ctrl】+【空格键】可选择工作表中的整列。<br>按【Shift】+【空格键】可选择工作表中的整行。<br>按【Ctrl】+【Shift】+【空格键】可选择整个工作表。<br>如果工作表包含数据，则按【Ctrl】+【Shift】+【空格键】将选择当前区域。<br>再按一次【Ctrl】+【Shift】+【空格键】将选择整个工作表。<br>当某个对象处于选定状态时，按【Ctrl】+【Shift】+【空格键】可选择工作表上的所有对象。<br>按【Alt】+【空格键】可显示Excel窗口的【控制】菜单。<br>【Tab】        在工作表中向右移动一个单元格。<br>在受保护的工作表中，可在未锁定的单元格之间移动。 在对话框中，移到下一个选项或选项组。<br>按【Shift】+【Tab】可移到前一个单元格（在工作表中）或前一个选项（在对话框中）。<br>在对话框中，按【Ctrl】+【Tab】可切换到下一个选项卡。<br>在对话框中，按【Ctrl】+【Shift】+【Tab】可切换到前一个选项卡。<br>电子表格的处理技巧<br>    • 打印时每页均显示表头：<br>文件——页面设置——工作表——打印标题，顶端标题行，确定所要设置的标题行（可用鼠标去拖选标题行）；同样的方法还可设置左端标题列。<br>注：以上方法只是在打印时你才能看到每页自动增加表头。<br>    • 编辑浏览时表头总显示在顶端：<br>首先选中你要固定的表头的下面一行或一个单元格——窗口—— 冻结窗格。同理你也可以把左边的列固定。若行与列都要固定的话，那就不要选择一行，而是选择那行与列后交叉的单元格即可，去试试吧。这样能方便浏览内容。<br>    • 在excel中输入对号与错号的简便方法：<br>对号：按住 alt 然后输入数字小键盘的 41420，松开 alt 即可。<br>错号：按住 alt 然后输入数字小键盘的 41409，松开 alt 即可。<br>平方：按住 alt 然后输入数字小键盘的 178，松开 alt 即可。<br>立方：按住 alt 然后输入数字小键盘的 179，松开 alt 即可。\n</p><p><img src=\"https://oss.qin500.com/user/1000/article/20201009162453_0010.jpg\" alt=\"\">\n</p>', 'https://oss.qin500.com/user/1000/article/20201009162453_0010.jpg', 'Excel作为办公软件中常用软件，其快捷键也颇多，下面我将其快捷键介绍给大家。\n快捷键\nCtrl组合快捷键【Ctrl】+【(】        取消隐藏选定范围内所有隐藏的行。【Ctrl】+【)】        取消隐藏选定范围内所有隐藏的列。【Ctrl】+【&amp;】        将外框应用于选定单元格。【Ctrl】+【_】        从选定单元格删除外框。【Ctrl】+【~】        应用“常规”数字格式。【Ctrl】+【$】        应用带有两位小数的“货币”格式（负数放在括号中）。【Ctrl】+【%】        应用不带小数位的“百分比”格式。【Ctrl】+【^】        应用带有两位小数的“指数”格式。【Ctrl】+【#】        应用带有日、月和年的“日期”格式。【Ctrl】+【@】        应用带有小时和分钟以及AM或PM的“时间”格式。【Ctrl】+【!】        应用带有两位小数、千位分隔符和减号(-)（用于负值）的“数值”格式。【Ctrl】+【-】        显示用于删除选定单元格的【删除】对话框。【Ctrl】+【*】        选择环绕活动单元格的当前区域（由空白行和空白列围起的数据区域）。 在数据透视表中，它将选择整个数据透视表。【Ctrl】+【:】        输入当前时间。【Ctrl】+【;】        输入当前日期。【Ctrl】+【`】        在工作表中切换显示单元格值和公式。【Ctrl】+【’】        将公式从活动单元格上方的单元格复制到单元格或编辑栏中。【Ctrl】+【”】        将值从活动单元格上方的单元格复制到单元格或编辑栏中。【Ctrl】+【+】        显示用于插入空白单元格的【插入】对话框。【Ctrl】+【1】        显示【单元格格式】对话框。【Ctrl】+【2】        应用或取消加粗格式设置。【Ctrl】+【3】        应用或取消倾斜格式设置。【Ctrl】+【4】        应用或取消下划线。【Ctrl】+【5】        应用或取消删除线。【Ctrl】+【6】        在隐藏对象、显示对象和显示对象占位符之间切换。【Ctrl】+【7】        显示或隐藏【常用】工具栏。【Ctrl】+【8】        显示或隐藏大纲符号。【Ctrl】+【9】        隐藏选定的行。【Ctrl】+【0】        隐藏选定的列。【Ctrl】+【A】        选择整个工作表。如果工作表包含数据，则按【Ctrl】+【A】将选择当前区域。再次按【Ctrl】+【A】将选择整个工作表。  当插入点位于公式中某个函数名称的右边时，则会显示“函数参数”对话框。当插入点位于公式中某个函数名称的右边时，按【Ctrl】+【Shift】+【A】将会插入参数名称和括号。【Ctrl】+【B】        应用或取消加粗格式设置。【Ctrl】+【C】        复制选定的单元格。如果连续按两次【Ctrl】+【C】，则会显示【Microsoft Office剪贴板】。【Ctrl】+【D】        使用【向下填充】命令将选定范围内最顶层单元格的内容和格式复制到下面的单元格中。【Ctrl】+【F】        显示【查找】对话框。按【Shift】+【F5】也会显示此对话框，而按【Shift】+【F4】则会重复上一次查找操作。【Ctrl】+【G】        显示【定位】对话框。 按【F5】也会显示此对话框。【Ctrl】+【H】        显示【查找和替换】对话框。【Ctrl】+【I】        应用或取消倾斜格式设置。【Ctrl】+【K】        为新的超链接显示【插入超链接】对话框，或为选定的现有超链接显示【编辑超链接】对话框。【Ctrl】+【L】        显示【创建列表】对话框。【Ctrl】+【N】        创建一个新的空白文件。【Ctrl】+【O】        显示【打开】对话框以打开或查找文件。按【Ctrl】+【Shift】+【O】可选择所有包含批注的单元格。【Ctrl】+【P】        显示【打印】对话框。【Ctrl】+【R】        使用“向右填充”命令将选定范围最左边单元格的内容和格式复制到右边的单元格中。【Ctrl】+【S】        使用其当前文件名、位置和文件格式保存活动文件。【Ctrl】+【U】        应用或取消下划线。【Ctrl】+【V】        在插入点处插入剪贴板的内容，并替换任何选定内容。只有在剪切或复制了对象、文本或单元格内容后，才能使用此快捷键。【Ctrl】+【W】        关闭选定的工作簿窗口。【Ctrl】+【X】        剪切选定的单元格。【Ctrl】+【Y】        重复上一个命令或操作（如有可能）。【Ctrl】+【Z】        使用【撤消】命令来撤消上一个命令或删除最后键入的条目。显示了自动更正智能标记时，按【Ctrl】+【Shift】+【Z】可使用【撤消】或【重复】命令撤消或恢复上一次自动更正操作。    • 功 能 键【F1】        显示“帮助”任务窗格。按【Ctrl】+【F1】可关闭并重新打开当前任务窗格。按【Alt】+【F1】可创建当前范围中数据的图表。按【Alt】+【Shift】+【F1】可插入新的工作表。【F2】        编辑活动单元格并将插入点放在单元格内容的结尾。如果禁止在单元格中进行编辑，它也会将插入点移到编辑栏中。按【Shift】+【F2】可编辑单元格批注。【F3】        将定义的名称粘贴到公式中。按【Shift】+【F3】将显示【插入函数】对话框。【F4】        重复上一个命令或操作（如有可能）。按【Ctrl】+【F4】可关闭选定的工作簿窗口。【F5】        显示【定位】对话框。按【Ctrl】+【F5】可恢复选定工作簿窗口的窗口大小。【F6】        切换到已拆分（【窗口】菜单，【拆分】命令）的工作表中的下一个窗格。按【Shift】+【F6】可切换到已拆分的工作表中的上一个窗格。如果打开了多个工作簿窗口，则按【Ctrl】+【F6】可切换到下一个工作簿窗口。【F7】        显示“拼写检查”对话框，以检查活动工作表或选定范围中的拼写。 如果工作簿窗口未最大化，则按【Ctrl】+【F7】可对该窗口执行【移动】命令。使用箭头键移 动窗口，并在完成时按【Esc】。【F8】        打开或关闭扩展模式。在扩展模式中，【EXT】将出现在状态行中，并且按箭头键可扩展选定范围。通过按Shift+F8，您可以使用箭头键将非邻近单元格或范围添加到单元格的选定范围。当工作簿未最大化时，按【Ctrl】+【F8】可执行大小命令（在工作簿窗口的【控制】菜单上。 按【Alt】+【F8】可显示用于运行、编辑或删除宏的【宏】对话框。【F9】        计算所有打开的工作簿中的所有工作表。如果先按【F9】，再按【Enter】（对于数组公式则按【Ctrl】+【Shift】+【Enter】），则会计算选定的公式部分，并将选定部分替换为计算出的值。按【Shift】+【F9】可计算活动工作表。按【Ctrl】+【Alt】+【F9】可计算所有打开的工作簿中的所有工作表，不管它们自上次计算以来是否已更改。如果按【Ctrl】+【Alt】+【Shift】+【F9】，则会重新检查相关公式，然后计算所有打开的工作簿中的所有单元格，其中包括未标记为需要计算的单元格。按【Ctrl】+【F9】可将工作簿窗口最小化为图标。【F10】        选择菜单栏或同时关闭打开的菜单和子菜单。按【Shift】+【F10】可显示选定项目的快捷菜单。按【Alt】+【Shift】+【F10】可显示智能标记的菜单或消息。如果存在多个智能标记，按该组合键可切换到下一个智能标记并显示其菜单或消息。按【Ctrl】+【F10】可最大化或还原选定的工作簿窗口。【F11】        创建当前范围内数据的图表。按【Shift】+【F11】可插入一个新工作表。按【Alt】+【F11】将打开【Visual Basic编辑器】，您可以在其中通过使用Visual Basic for Applications(VBA)来创建宏。按【Alt】+【Shift】+【F11】将打开【Microsoft脚本编辑器】，您可以在其中添加文本、编辑HTML标记以及修改任何脚本代码。【F12】        显示【另存为】对话框。    • 其他快捷键 ：【箭头键】        在工作表中上移、下移、左移或右移一个单元格。按【Ctrl】+【箭头键】可移动到工作表中当前数据区域 （数据区域：包含数据的单元格区域，该区域周围为空白单元格或数据表边框。）的边缘。按【Shift】+【箭头键】可将单元格的选定范围扩大一个单元格。按【Ctrl】+【Shift】+【箭头键】可将单元格的选定范围扩展到与活动单元格同一列或同一行中的最后一个非空白单元格。当菜单处于可见状态时，按【向左键】或【向右键】可选择左边或右边的菜单。当子菜单处于打开状态时，按这些箭头键可在主菜单和子菜单之间切换。当菜单或子菜单处于打开状态时，按【向下键】或【向上键】可选择下一个或上一个命令。 在对话框中，按【箭头键】可在打开的下拉列表中的各个选项之间移动，或在一组选项的各个选项之间移动。  按【Alt】+【向下键】可打开选定的下拉列表。【Backspace】        在编辑栏中删除左边的一个字符。 也可清除活动单元格的内容。  【Delete】        从选定单元格中删除单元格内容（数据和公式），而不会影响单元格格式或批 注。  在单元格编辑模式下，按该键将会删除插入点右边的字符。【End】        当【Scroll Lock】处于开启状态时，移动到窗口右下角的单元格。当菜单或子菜单处于可见状态时，也可选择菜单上的最后一个命令。按【Ctrl】+【End】可移动到工作表上的最后一个单元格，即所使用的最下方一行与所使用的最右边一列的交汇单元格。按【Ctrl】+【Shift】+【End】可将单元格的选定范围扩展到工作表上所使用的最后一个单元格（右下角）。【Enter】        从单元格或编辑栏中完成单元格输入，并（默认）选择下面的单元格。 在数据表单中，按该键可移动到下一条记录中的第一个字段。打开选定的菜单（按【F10】激活菜单栏），或执行选定命令的操作。在对话框中，按该键可执行对话框中默认命令按钮（带有突出轮廓的按钮，通常为【确定】按钮）的操作。按【Alt】+【Enter】可在同一单元格中另起一个新行。按【Ctrl】+【Enter】可使用当前条目填充选定的单元格区域。按【Shift】+【Enter】可完成单元格输入并选择上面的单元格。【Esc】        取消单元格或编辑栏中的输入。  按该键也可关闭打开的菜单或子菜单、对话框或消息窗口。【Home】        移到工作表中某一行的开头。当【Scroll Lock】处于开启状态时，移到窗口左上角的单元格。 当菜单或子菜单处于可见状态时，选择菜单上的第一个命令。 按【Ctrl】+【Home】可移到工作表的开头。  按【Ctrl】+【Shift+Home】可将单元格的选定范围扩展到工作表的开头。 Page Down        在工作表中下移一个屏幕。 按【Alt】+【Page Down】可在工作表中向右移动一个屏幕。 按【Ctrl】+【Page Down】可移到工作簿中的下一个工作表。按【Ctrl】+【Shift+Page Down】可选择工作簿中的当前和下一个工作表。【Page Up】在工作表中上移一个屏幕。按【Alt】+【Page Up】可在工作表中向左移动一个屏幕。按【Ctrl】+【Page Up】可移到工作簿中的上一个工作表。按【Ctrl】+【Shift+Page Up】可选择工作簿中的当前和上一个工作表。【空格键】        在对话框中，执行选定按钮的操作，或者选中或清除复选框。按【Ctrl】+【空格键】可选择工作表中的整列。按【Shift】+【空格键】可选择工作表中的整行。按【Ctrl】+【Shift】+【空格键】可选择整个工作表。如果工作表包含数据，则按【Ctrl】+【Shift】+【空格键】将选择当前区域。再按一次【Ctrl】+【Shift】+【空格键】将选择整个工作表。当某个对象处于选定状态时，按【Ctrl】+【Shift】+【空格键】可选择工作表上的所有对象。按【Alt】+【空格键】可显示Excel窗口的【控制】菜单。【Tab】        在工作表中向右移动一个单元格。在受保护的工作表中，可在未锁定的单元格之间移动。 在对话框中，移到下一个选项或选项组。按【Shift】+【Tab】可移到前一个单元格（在工作表中）或前一个选项（在对话框中）。在对话框中，按【Ctrl】+【Tab】可切换到下一个选项卡。在对话框中，按【Ctrl】+【Shift】+【Tab】可切换到前一个选项卡。电子表格的处理技巧    • 打印时每页均显示表头：文件——页面设置——工作表——打印标题，顶端标题行，确定所要设置的标题行（可用鼠标去拖选标题行）；同样的方法还可设置左端标题列。注：以上方法只是在打印时你才能看到每页自动增加表头。    • 编辑浏览时表头总显示在顶端：首先选中你要固定的表头的下面一行或一个单元格——窗口—— 冻结窗格。同理你也可以把左边的列固定。若行与列都要固定的话，那就不要选择一行，而是选择那行与列后交叉的单元格即可，去试试吧。这样能方便浏览内容。    • 在excel中输入对号与错号的简便方法：对号：按住 alt 然后输入数字小键盘的 41420，松开 alt 即可。错号：按住 alt 然后输入数字小键盘的 41409，松开 alt 即可。平方：按住 alt 然后输入数字小键盘的 178，松开 alt 即可。立方：按住 alt 然后输入数字小键盘的 179，松开 alt 即可。\n\n', 4, 388, 1, 0, 1, '2020-10-09 20:25:02', '2022-09-11 07:31:06'),
(1015, 1000, 'css自动序列', '<p>父节点添加</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pun\">.</span><span class=\"pln\">status</span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">     counter</span><span class=\"pun\">-</span><span class=\"pln\">reset</span><span class=\"pun\">:</span><span class=\"pln\"> flag</span><span class=\"pun\">;</span></code></li><li class=\"L2\"><code><span class=\"pun\">}</span></code></li></ol></pre><p>子节点添加</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">    content</span><span class=\"pun\">:</span><span class=\"pln\"> counter</span><span class=\"pun\">(</span><span class=\"pln\">flag</span><span class=\"pun\">);</span></code></li><li class=\"L1\"><code><span class=\"pln\">    counter</span><span class=\"pun\">-</span><span class=\"pln\">increment</span><span class=\"pun\">:</span><span class=\"pln\"> flag</span><span class=\"pun\">;</span></code></li></ol></pre><p>还可以添加小节<br><img src=\"https://oss.qin500.com/user/1000/article/20201009162730_008.png\" alt=\"\">\n</p>', 'https://oss.qin500.com/user/1000/article/20201009162730_008.png', '父节点添加\n.status{     counter-reset: flag;}子节点添加\n    content: counter(flag);    counter-increment: flag;还可以添加小节\n', 4, 399, 1, 0, 1, '2020-10-09 20:27:37', '2022-09-11 07:31:03'),
(1016, 1000, 'laravel定义访问器', '<p>在模型文件中添加如下方法,即可将数据库中显示为1和0 的数据显示为字符串 (显示和隐藏)</p>\n<p><img src=\"https://wpcdn.qin500.com/1000/20218212147172Smz7RfTQFthHHFiAfPsdB6RYn.png\" width=\"465\" height=\"356\" /></p>\n<p>bdts为数据表中指定的字段名称</p>\n<p>&nbsp;</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">    在模型中添加下面的方法\n//访问器\n    public function getbdtsAttribute($value){\n        return $value ? \"成功\" : \"失败\";\n    }</code></pre>\n<p>&nbsp;</p>\n<p>当我们在视图</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">$item-&gt;bdts; //显示为成功或失败</code></pre>', 'https://wpcdn.qin500.com/1000/20218212147172Smz7RfTQFthHHFiAfPsdB6RYn.png', '在模型文件中添加如下方法,即可将数据库中显示为1和0 的数据显示为字符串 (显示和隐藏)\n\nbdts为数据表中指定的字段名称\n&nbsp;\n    在模型中添加下面的方法\n//访问器\n    public function getbdtsAttribute($value){\n        return $value ? \"成功\" : \"失败\";\n    }\n&nbsp;\n当我们在视图\n$item-&gt;bdts; //显示为成功或失败', 4, 421, 1, 0, 1, '2020-10-10 15:06:38', '2022-09-11 07:31:03'),
(1017, 1000, 'laravel基础知识点', '<p>js解析JSON字符串</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">JSON</span><span class=\"pun\">.</span><span class=\"pln\">parse</span><span class=\"pun\">(</span><span class=\"str\">\"{\'name\':\'xiangm\"</span><span class=\"pun\">,</span><span class=\"str\">\'age\'</span><span class=\"pun\">:</span><span class=\"lit\">30</span><span class=\"pun\">}</span><span class=\"str\">\");</span></code></li><li class=\"L1\"><code><span class=\"str\">$.parseJSON(\"</span><span class=\"pun\">{</span><span class=\"str\">\'name\'</span><span class=\"pun\">:</span><span class=\"str\">\'xiangm\",\'</span><span class=\"pln\">age</span><span class=\"str\">\':30}\");</span></code></li></ol></pre><p>php转数组,true为数组,false为对象</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">json_decode</span><span class=\"pun\">(</span><span class=\"str\">\"{\'name\':\'xiangm\"</span><span class=\"pun\">,</span><span class=\"str\">\'age\'</span><span class=\"pun\">:</span><span class=\"lit\">30</span><span class=\"pun\">}</span><span class=\"str\">\",true)</span></code></li></ol></pre><p>文件下载<br>a标签下载属性\n</p><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"tag\">&lt;a</span><span class=\"pln\"> </span><span class=\"atn\">href</span><span class=\"pun\">=</span><span class=\"atv\">\"/web.config\"</span><span class=\"pln\"> </span><span class=\"atn\">download</span><span class=\"tag\">&gt;</span><span class=\"pln\">下载</span><span class=\"tag\">&lt;/a&gt;</span></code></li><li class=\"L1\"><code><span class=\"pln\">return response()-&gt;download(\'web.cc\')</span></code></li></ol></pre><p>页面跳转</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">return</span><span class=\"pln\"> redirect</span><span class=\"pun\">(</span><span class=\"pln\">route</span><span class=\"pun\">(</span><span class=\"str\">\'admin.index\'</span><span class=\"pun\">))</span></code></li></ol></pre><p>显示模板</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">return</span><span class=\"pln\"> response</span><span class=\"pun\">()-&gt;</span><span class=\"pln\">view</span><span class=\"pun\">(</span><span class=\"str\">\'good.ad\'</span><span class=\"pun\">)</span></code></li></ol></pre><p>默认值,类似于三元运算</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pun\">{{</span><span class=\"pln\"> $name </span><span class=\"kwd\">or</span><span class=\"pln\"> </span><span class=\"str\">\'不存在\'</span><span class=\"pln\"> </span><span class=\"pun\">}}</span></code></li></ol></pre><p>回退上一个页面</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">return</span><span class=\"pln\"> back</span><span class=\"pun\">();</span></code></li></ol></pre><p>//写入</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">\\Session</span><span class=\"pun\">::</span><span class=\"pln\">flash</span><span class=\"pun\">(</span><span class=\"str\">\'name\'</span><span class=\"pun\">,</span><span class=\"str\">\'value\'</span><span class=\"pun\">)</span></code></li></ol></pre><p>//跳转写入</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">return</span><span class=\"pln\"> redirect</span><span class=\"pun\">(</span><span class=\"str\">\'/home\'</span><span class=\"pun\">)-&gt;</span><span class=\"kwd\">with</span><span class=\"pun\">(</span><span class=\"str\">\'name\'</span><span class=\"pun\">,</span><span class=\"str\">\'value\'</span><span class=\"pun\">);</span></code></li><li class=\"L1\"><code><span class=\"kwd\">return</span><span class=\"pln\"> back</span><span class=\"pun\">()-&gt;</span><span class=\"kwd\">with</span><span class=\"pun\">(</span><span class=\"str\">\'name\'</span><span class=\"pun\">,</span><span class=\"str\">\'value\'</span><span class=\"pun\">);</span></code></li></ol></pre><p>//表单数据写入</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">return</span><span class=\"pln\"> back</span><span class=\"pun\">()-&gt;</span><span class=\"pln\">withInput</span><span class=\"pun\">();</span><span class=\"com\">//自动保存</span></code></li><li class=\"L1\"><code><span class=\"pun\">{{</span><span class=\"pln\"> old</span><span class=\"pun\">(</span><span class=\"str\">\'username\'</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">}}</span></code></li></ol></pre><p>//读取</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">\\Session</span><span class=\"pun\">::</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">\'name\'</span><span class=\"pun\">)</span></code></li></ol></pre><p>//检测是否有</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">\\Session</span><span class=\"pun\">::</span><span class=\"pln\">has</span><span class=\"pun\">(</span><span class=\"str\">\'name\'</span><span class=\"pun\">)</span></code></li></ol></pre><p>关于模型<br>一个类对应一张表<br>一个对象对应一条记录\n</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/070.jpg', 'js解析JSON字符串\nJSON.parse(\"{\'name\':\'xiangm\",\'age\':30}\");$.parseJSON(\"{\'name\':\'xiangm\",\'age\':30}\");php转数组,true为数组,false为对象\njson_decode(\"{\'name\':\'xiangm\",\'age\':30}\",true)文件下载a标签下载属性\n&lt;a href=\"/web.config\" download&gt;下载&lt;/a&gt;return response()-&gt;download(\'web.cc\')页面跳转\nreturn redirect(route(\'admin.index\'))显示模板\nreturn response()-&gt;view(\'good.ad\')默认值,类似于三元运算\n{{ $name or \'不存在\' }}回退上一个页面\nreturn back();//写入\n\\Session::flash(\'name\',\'value\')//跳转写入\nreturn redirect(\'/home\')-&gt;with(\'name\',\'value\');return back()-&gt;with(\'name\',\'value\');//表单数据写入\nreturn back()-&gt;withInput();//自动保存{{ old(\'username\') }}//读取\n\\Session::get(\'name\')//检测是否有\n\\Session::has(\'name\')关于模型一个类对应一张表一个对象对应一条记录\n', 4, 464, 1, 0, 1, '2020-10-10 15:11:07', '2022-09-11 07:31:03'),
(1018, 1000, '浏览器cookie详解', '<hr />\n<h3 id=\"h3--cookie\"><a class=\"reference-link\" name=\"为什么会有cookie\"></a>为什么会有cookie</h3>\n<p>web应用程序是使用HTTP协议传输数据的。HTTP协议是无状态的协议。一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换数据需要建立新的连接。这就意味着服务器无法从连接上跟踪会话。<br />你可能会有这样的经历，登录一个网站的时候会提醒你要不要记住账户和密码，这样下次来你就不用再次输入账号和密码了。这就是cookie的作用，当我们再次访问的时候，方便服务器直接根据我们的cookie来直接取上一次去过的东西（对于，每一个cookie服务器会对这个cookie存储上一次我们拿过的数据，下一次对于同一个cookie的时候，就直接在这里取。）<br />什么是cookie<br />cookie是由服务器端生成的，发送给user-agent（一般是浏览器），（服务器告诉浏览器设置一下cookie） 浏览器自动将cookie以key/value保存到某个目录下的文本文件内，下次请求同一个网站地址时也会自动发送改cookie给服务器，即添加在请求头部（前提是浏览器设置为启用cookie）。<br />cookie就是一个小型文件（浏览器对cookie的内存大小是有限制的&mdash;&mdash;-用来记录一下信息）</p>\n<h3 id=\"h3-cookie-\"><a class=\"reference-link\" name=\"cookie的特点\"></a>cookie的特点</h3>\n<p>cookie具有保质期<br />即有永久的也含有临时的，每个浏览器都含有自己的cookie，每次请求的时候，都会根据domain来发送相应的cookie，可通过设置expires、max-age来设定保存日期，不设置的话默认是临时存储，即关闭浏览器就消失。</p>\n<ol class=\"linenums\">\n<li class=\"L0\"><code class=\"lang-&#96;\"><span class=\"pln\">document</span><span class=\"pun\">.</span><span class=\"pln\">cookie </span><span class=\"pun\">=</span> <span class=\"str\">\'expires=时间/max-age=秒\'</span></code></li>\n</ol>\n<h3 id=\"h3-u6EE1u8DB3u540Cu6E90u7B56u7565\"><a class=\"reference-link\" name=\"满足同源策略\"></a>满足同源策略</h3>\n<p>虽然网站images.gogle.com与网站www/google.com同属于Google，但是域名不一样，二者同样不能互相操作彼此的cookie。而且path也必须一样才能相互访问彼此的cookie，需要注意不同的浏览器对path访问规则不一样。对于Chrome，path必须为当前目录。设置为其他目录无效，只能当前页面只能访问当前目录以及以上的cookie。</p>\n<p>cookie内存大小受限制<br />cookie有个数和大小的限制，大小一般是4k<br />cookie安全性<br />cookie在本地 可以被更改文件敏感的数据不要放在cookie里。</p>\n<h3 id=\"h3-cookie-\"><a class=\"reference-link\" name=\"cookie的使用\"></a>cookie的使用</h3>\n<p>cookie实际上主要web服务器开发人员设置的，前端开发人员较少使用cookie，但是也会使用，比如设置登录页面的账号信息。<br />我们打开浏览器控制台，对于Chrome，切换application，在左边的storage下面可以看到cookie项，点开就能看到当前有哪些cookie，例如下面：</p>\n<p>可以看到每一行就是一个cookie，里面含有他的数值以及他的相关信息，待会将详细介绍每一个属性的含义。先来看一下怎么设置cookie。</p>\n<ol class=\"linenums\">\n<li class=\"L0\"><code><span class=\"pln\">document</span><span class=\"pun\">.</span><span class=\"pln\">cookie</span><span class=\"pun\">=</span><span class=\"str\">\'name=xiaoming;expires=\'</span><span class=\"pun\">+</span><span class=\"pln\">oDate</span></code></li>\n</ol>\n<p>上面就简单的设置了一项cookie，每一个属性使用;隔开，并且一次不能设置cookie，一次只能设置一个，后面的也不会覆盖前面的cookie，只会拼接到当前的cookie的字符后面。具体使用方法如下。</p>\n<p>通过document.cookie 设置cookie</p>\n<p>格式：名字=值(document.cookie = &lsquo;age =18;max-age=1000&rsquo;)<br />不会覆盖(注意设置cookie的时候。不能一次设置多条cookie只能一次设置一条cookie的信息，如果后面设置了前面的一样的字段，如果同域，同path，那么后面会覆盖前面的，否者新增一条cookie。设置到path之后，该cookie只能被该path及其以下的目录获取，比如我设置path=/web,那么当我在/这个，目录下的时候不能访问到我设置到/web的cookie，而我在/web/xxx这个目录下可以访问得到)<br />过期时间：expires=时间/max-age=秒(不设置的话默认是临时存储)<br />读取cookie(注意一般只有当我们含有http请求的时候设置cookie才有效，不同浏览器情况也不一样，比如ie下就可以直接设置)，通过字符串分割。<br />删除cookie：已经过期(即使设置日期，保证日期小于当前日期)</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/063.jpg', '\n为什么会有cookie\nweb应用程序是使用HTTP协议传输数据的。HTTP协议是无状态的协议。一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换数据需要建立新的连接。这就意味着服务器无法从连接上跟踪会话。你可能会有这样的经历，登录一个网站的时候会提醒你要不要记住账户和密码，这样下次来你就不用再次输入账号和密码了。这就是cookie的作用，当我们再次访问的时候，方便服务器直接根据我们的cookie来直接取上一次去过的东西（对于，每一个cookie服务器会对这个cookie存储上一次我们拿过的数据，下一次对于同一个cookie的时候，就直接在这里取。）什么是cookiecookie是由服务器端生成的，发送给user-agent（一般是浏览器），（服务器告诉浏览器设置一下cookie） 浏览器自动将cookie以key/value保存到某个目录下的文本文件内，下次请求同一个网站地址时也会自动发送改cookie给服务器，即添加在请求头部（前提是浏览器设置为启用cookie）。cookie就是一个小型文件（浏览器对cookie的内存大小是有限制的&mdash;&mdash;-用来记录一下信息）\ncookie的特点\ncookie具有保质期即有永久的也含有临时的，每个浏览器都含有自己的cookie，每次请求的时候，都会根据domain来发送相应的cookie，可通过设置expires、max-age来设定保存日期，不设置的话默认是临时存储，即关闭浏览器就消失。\n\ndocument.cookie = \'expires=时间/max-age=秒\'\n\n满足同源策略\n虽然网站images.gogle.com与网站www/google.com同属于Google，但是域名不一样，二者同样不能互相操作彼此的cookie。而且path也必须一样才能相互访问彼此的cookie，需要注意不同的浏览器对path访问规则不一样。对于Chrome，path必须为当前目录。设置为其他目录无效，只能当前页面只能访问当前目录以及以上的cookie。\ncookie内存大小受限制cookie有个数和大小的限制，大小一般是4kcookie安全性cookie在本地 可以被更改文件敏感的数据不要放在cookie里。\ncookie的使用\ncookie实际上主要web服务器开发人员设置的，前端开发人员较少使用cookie，但是也会使用，比如设置登录页面的账号信息。我们打开浏览器控制台，对于Chrome，切换application，在左边的storage下面可以看到cookie项，点开就能看到当前有哪些cookie，例如下面：\n可以看到每一行就是一个cookie，里面含有他的数值以及他的相关信息，待会将详细介绍每一个属性的含义。先来看一下怎么设置cookie。\n\ndocument.cookie=\'name=xiaoming;expires=\'+oDate\n\n上面就简单的设置了一项cookie，每一个属性使用;隔开，并且一次不能设置cookie，一次只能设置一个，后面的也不会覆盖前面的cookie，只会拼接到当前的cookie的字符后面。具体使用方法如下。\n通过document.cookie 设置cookie\n格式：名字=值(document.cookie = &lsquo;age =18;max-age=1000&rsquo;)不会覆盖(注意设置cookie的时候。不能一次设置多条cookie只能一次设置一条cookie的信息，如果后面设置了前面的一样的字段，如果同域，同path，那么后面会覆盖前面的，否者新增一条cookie。设置到path之后，该cookie只能被该path及其以下的目录获取，比如我设置path=/web,那么当我在/这个，目录下的时候不能访问到我设置到/web的cookie，而我在/web/xxx这个目录下可以访问得到)过期时间：expires=时间/max-age=秒(不设置的话默认是临时存储)读取cookie(注意一般只有当我们含有http请求的时候设置cookie才有效，不同浏览器情况也不一样，比如ie下就可以直接设置)，通过字符串分割。删除cookie：已经过期(即使设置日期，保证日期小于当前日期)', 3, 452, 1, 0, 1, '2020-10-10 19:40:52', '2022-09-11 07:31:03'),
(1019, 1000, 'Retry-After', '<hr>\n<p>Retry-After响应的 HTTP 报头指示所述用户代理应该多长时间使一个后续请求之前等待。有两种主要的情况使用这个头文件：</p>\n<p>When sent with a 503 (Service Unavailable) response, it indicates how long the service is expected to be unavailable.</p>\n<p>当使用重定向响应（如301永久移动）发送时，它表示用户代理在发出重定向请求之前要求等待的最短时间。</p>\n<h3 id=\"h3-u53E5u6CD5\"><a name=\"句法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>句法</h3><table>\n<thead>\n<tr>\n<th>Header type</th>\n<th>Response header</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Forbidden header name</td>\n<td>no</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"typ\">Retry</span><span class=\"pun\">-</span><span class=\"typ\">After</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"pun\">&lt;</span><span class=\"pln\">http</span><span class=\"pun\">-</span><span class=\"pln\">date</span><span class=\"pun\">&gt;</span></code></li><li class=\"L1\"><code><span class=\"typ\">Retry</span><span class=\"pun\">-</span><span class=\"typ\">After</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"pun\">&lt;</span><span class=\"pln\">delay</span><span class=\"pun\">-</span><span class=\"pln\">seconds</span><span class=\"pun\">&gt;</span></code></li></ol></pre><h3 id=\"h3-u6307u4EE4\"><a name=\"指令\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>指令</h3><p><http-date> 之后重试的日期。有关DateHTTP 日期格式的更多详细信息，请参阅标头。<delay> 一个非负十进制整数，表示接收到响应后的延迟秒数。</delay></http-date></p><p></p>\n<h3 id=\"h3-u4F8Bu5B50\"><a name=\"例子\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>例子</h3><p>处理预定的停机时间<br>Retry-After对客户端和服务器上的标头的支持仍然不一致。但是，像 Googlebot 这样的一些抓取工具和抓取工具可以很好地尊重Retry-After标题。将它与503（服务不可用）响应一起发送是非常有用的，这样当停机时间结束时，搜索引擎将继续为您的站点编制索引。\n</p><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"typ\">Retry</span><span class=\"pun\">-</span><span class=\"typ\">After</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"typ\">Wed</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">21</span><span class=\"pln\"> </span><span class=\"typ\">Oct</span><span class=\"pln\"> </span><span class=\"lit\">2015</span><span class=\"pln\"> </span><span class=\"lit\">07</span><span class=\"pun\">:</span><span class=\"lit\">28</span><span class=\"pun\">:</span><span class=\"lit\">00</span><span class=\"pln\"> GMT</span></code></li><li class=\"L1\"><code><span class=\"typ\">Retry</span><span class=\"pun\">-</span><span class=\"typ\">After</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"lit\">120</span></code></li></ol></pre><h3 id=\"h3-u4EA7u54C1u89C4u683C\"><a name=\"产品规格\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>产品规格</h3><table>\n<thead>\n<tr>\n<th>Specification</th>\n<th>Title</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>RFC 7231, section 7.1.3: Retry-After</td>\n<td>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"h3-u6D4Fu89C8u5668u517Cu5BB9u6027\"><a name=\"浏览器兼容性\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>浏览器兼容性</h3><table>\n<thead>\n<tr>\n<th>Feature</th>\n<th>Chrome</th>\n<th>Edge</th>\n<th>Firefox</th>\n<th>Internet Explorer</th>\n<th>Opera</th>\n<th>Safari</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Basic Support</td>\n<td>?</td>\n<td>(Yes)</td>\n<td>No1</td>\n<td>?</td>\n<td>?</td>\n<td>?</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Feature</th>\n<th>Android</th>\n<th>Chrome for Android</th>\n<th>Edge mobile</th>\n<th>Firefox for Android</th>\n<th>IE mobile</th>\n<th>Opera Android</th>\n<th>iOS Safari</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Basic Support</td>\n<td>?</td>\n<td>?</td>\n<td>(Yes)</td>\n<td>?</td>\n<td>?</td>\n<td>?</td>\n<td>?</td>\n</tr>\n</tbody>\n</table>\n<p>503 （暂停服务）<br>301 （永久移动）\n</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/063.jpg', '\nRetry-After响应的 HTTP 报头指示所述用户代理应该多长时间使一个后续请求之前等待。有两种主要的情况使用这个头文件：\nWhen sent with a 503 (Service Unavailable) response, it indicates how long the service is expected to be unavailable.\n当使用重定向响应（如301永久移动）发送时，它表示用户代理在发出重定向请求之前要求等待的最短时间。\n句法\n\n\nHeader type\nResponse header\n\n\n\n\nForbidden header name\nno\n\n\n\nRetry-After: &lt;http-date&gt;Retry-After: &lt;delay-seconds&gt;指令 之后重试的日期。有关DateHTTP 日期格式的更多详细信息，请参阅标头。 一个非负十进制整数，表示接收到响应后的延迟秒数。\n例子处理预定的停机时间Retry-After对客户端和服务器上的标头的支持仍然不一致。但是，像 Googlebot 这样的一些抓取工具和抓取工具可以很好地尊重Retry-After标题。将它与503（服务不可用）响应一起发送是非常有用的，这样当停机时间结束时，搜索引擎将继续为您的站点编制索引。\nRetry-After: Wed, 21 Oct 2015 07:28:00 GMTRetry-After: 120产品规格\n\n\nSpecification\nTitle\n\n\n\n\nRFC 7231, section 7.1.3: Retry-After\nHypertext Transfer Protocol (HTTP/1.1): Semantics and Content\n\n\n\n浏览器兼容性\n\n\nFeature\nChrome\nEdge\nFirefox\nInternet Explorer\nOpera\nSafari\n\n\n\n\nBasic Support\n?\n(Yes)\nNo1\n?\n?\n?\n\n\n\n\n\n\nFeature\nAndroid\nChrome for Android\nEdge mobile\nFirefox for Android\nIE mobile\nOpera Android\niOS Safari\n\n\n\n\nBasic Support\n?\n?\n(Yes)\n?\n?\n?\n?\n\n\n\n503 （暂停服务）301 （永久移动）\n', 3, 421, 1, 0, 1, '2020-10-10 23:20:33', '2022-09-11 12:19:53'),
(1020, 1000, '服务器access.log日志分析', '<p>无意中看了一下系统的日志,发现有大量的采集行为,包括,<br>漏洞查找等行为,<br>前台页面根本就没有这些路径的链接,由此可推断出,<br>他们正在对服务器进行漏洞查找\n</p><p><img src=\"https://oss.qin500.com/user/1000/article/20201011130834_11.png\" alt=\"\"><br><img src=\"https://oss.qin500.com/user/1000/article/20201011130843_12.png\" alt=\"\"><br><img src=\"https://oss.qin500.com/user/1000/article/20201011130852_13.png\" alt=\"\"><br><img src=\"https://oss.qin500.com/user/1000/article/20201011130902_14.png\" alt=\"\"><br>还有尝试登录我的服务器数据库管理页面,以下只是其中几个<br>mysql-admin<br>phpmyadmin-old<br>.env文件<br>.config文件<br>.info文件\n</p>', 'https://oss.qin500.com/user/1000/article/20201011130834_11.png', '无意中看了一下系统的日志,发现有大量的采集行为,包括,漏洞查找等行为,前台页面根本就没有这些路径的链接,由此可推断出,他们正在对服务器进行漏洞查找\n还有尝试登录我的服务器数据库管理页面,以下只是其中几个mysql-adminphpmyadmin-old.env文件.config文件.info文件\n', 3, 389, 1, 0, 1, '2020-10-11 17:09:44', '2022-09-11 07:31:03');
INSERT INTO `qin500_articles` (`id`, `uid`, `title`, `text`, `masterpic`, `pure`, `cid`, `views`, `isshow`, `zan`, `bdts`, `created_at`, `updated_at`) VALUES
(1021, 1000, 'laravel开启系统维护模式', '<p>当应用程序处于维护模式时，将显示应用程序中所有请求的自定义视图。这样可以方便地在应用程序更新或执行维护时”禁用”应用程序。维护模式检查包含在应用程序的默认中间件堆栈中。如果应用程序处于维护模式，将引发状态代码为 503 的 。<code>MaintenanceModeException</code><br>要启用维护模式，请执行 Artisan 命令：<code>down</code></p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">php artisan down</span></code></li></ol></pre><p>您还可以为命令提供一个选项，该选项将设置为 HTTP 标头的值：<code>retrydownRetry-After</code></p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">php artisan down </span><span class=\"pun\">--</span><span class=\"kwd\">retry</span><span class=\"pun\">=</span><span class=\"lit\">60</span></code></li></ol></pre><p>绕过维护模式<br>即使在维护模式下，也可以使用 选项指定维护模式旁路令牌：<code>secret</code></p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">php artisan down </span><span class=\"pun\">--</span><span class=\"pln\">secret</span><span class=\"pun\">=</span><span class=\"str\">\"1630542a-246b-4b66-afa1-dd72a4c43515\"</span></code></li><li class=\"L1\"><code></code></li><li class=\"L2\"><code><span class=\"pln\">php artisan down </span><span class=\"pun\">--</span><span class=\"kwd\">retry</span><span class=\"pun\">=</span><span class=\"lit\">60</span><span class=\"pln\"> </span><span class=\"pun\">--</span><span class=\"pln\">secret</span><span class=\"pun\">=</span><span class=\"str\">\"1630542a-246b-4b66-afa1-dd72a4c43515\"</span></code></li></ol></pre><p>将应用程序置于维护模式后，您可以导航到匹配此令牌的应用程序 URL，Laravel 会向浏览器发出维护模式旁路 Cookie：</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">https</span><span class=\"pun\">:</span><span class=\"com\">//example.com/1630542a-246b-4b66-afa1-dd72a4c43515</span></code></li></ol></pre><p>访问此隐藏路由时，您将被重定向到应用程序的路由。一旦 Cookie 已颁发到您的浏览器，您将能够正常浏览应用程序，就像它未处于维护模式一样。<code>/</code><br>预呈现维护模式视图<br>如果在部署过程中使用该命令，则如果用户在 Composer 依赖项或其他基础结构组件更新时访问应用程序时，仍可能会偶尔遇到错误。这是因为Laravel框架的一个重要部分必须启动，以确定应用程序处于维护模式，并使用模板引擎呈现维护模式视图。\n</p><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">php artisan down</span></code></li></ol></pre><p>因此，Laravel 允许您预呈现将在请求周期开始时返回的维护模式视图。此视图在加载任何应用程序的依赖项之前呈现。您可以使用命令的选项预呈现您选择的模板：downrender</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">php artisan down </span><span class=\"pun\">--</span><span class=\"pln\">render</span><span class=\"pun\">=</span><span class=\"str\">\"errors::503\"</span></code></li></ol></pre><p>重定向维护模式请求<br>在维护模式下，Laravel 将显示用户尝试访问的所有应用程序 URL 的维护模式视图。如果您愿意，您可以指示 Laravel 将所有请求重定向到特定的 URL。这可以通过选项完成。例如，您可能希望将所有请求重定向到 <code>URI：redirect/</code></p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">php artisan down </span><span class=\"pun\">--</span><span class=\"pln\">redirect</span><span class=\"pun\">=/</span></code></li></ol></pre><p>禁用维护模式<br>要禁用维护模式，请使用以下命令：<code>up</code></p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">php artisan up</span></code></li></ol></pre><p>您可以在 中定义自己的模板，以自定义默认维护模式模板。</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">resources</span><span class=\"pun\">/</span><span class=\"pln\">views</span><span class=\"pun\">/</span><span class=\"pln\">errors</span><span class=\"pun\">/</span><span class=\"lit\">503.blade</span><span class=\"pun\">.</span><span class=\"pln\">php</span></code></li></ol></pre><p>维护模式和队列<br>当应用程序处于维护模式时，没有排队作业将处理。一旦应用程序退出维护模式，作业将继续正常处理。\n</p><p>维护模式的替代方案<br>由于维护模式要求应用程序停机几秒钟，请考虑其他方法，如特使使用 Laravel 完成零停机时间部署。\n</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/031.jpg', '当应用程序处于维护模式时，将显示应用程序中所有请求的自定义视图。这样可以方便地在应用程序更新或执行维护时”禁用”应用程序。维护模式检查包含在应用程序的默认中间件堆栈中。如果应用程序处于维护模式，将引发状态代码为 503 的 。MaintenanceModeException要启用维护模式，请执行 Artisan 命令：down\nphp artisan down您还可以为命令提供一个选项，该选项将设置为 HTTP 标头的值：retrydownRetry-After\nphp artisan down --retry=60绕过维护模式即使在维护模式下，也可以使用 选项指定维护模式旁路令牌：secret\nphp artisan down --secret=\"1630542a-246b-4b66-afa1-dd72a4c43515\"php artisan down --retry=60 --secret=\"1630542a-246b-4b66-afa1-dd72a4c43515\"将应用程序置于维护模式后，您可以导航到匹配此令牌的应用程序 URL，Laravel 会向浏览器发出维护模式旁路 Cookie：\nhttps://example.com/1630542a-246b-4b66-afa1-dd72a4c43515访问此隐藏路由时，您将被重定向到应用程序的路由。一旦 Cookie 已颁发到您的浏览器，您将能够正常浏览应用程序，就像它未处于维护模式一样。/预呈现维护模式视图如果在部署过程中使用该命令，则如果用户在 Composer 依赖项或其他基础结构组件更新时访问应用程序时，仍可能会偶尔遇到错误。这是因为Laravel框架的一个重要部分必须启动，以确定应用程序处于维护模式，并使用模板引擎呈现维护模式视图。\nphp artisan down因此，Laravel 允许您预呈现将在请求周期开始时返回的维护模式视图。此视图在加载任何应用程序的依赖项之前呈现。您可以使用命令的选项预呈现您选择的模板：downrender\nphp artisan down --render=\"errors::503\"重定向维护模式请求在维护模式下，Laravel 将显示用户尝试访问的所有应用程序 URL 的维护模式视图。如果您愿意，您可以指示 Laravel 将所有请求重定向到特定的 URL。这可以通过选项完成。例如，您可能希望将所有请求重定向到 URI：redirect/\nphp artisan down --redirect=/禁用维护模式要禁用维护模式，请使用以下命令：up\nphp artisan up您可以在 中定义自己的模板，以自定义默认维护模式模板。\nresources/views/errors/503.blade.php维护模式和队列当应用程序处于维护模式时，没有排队作业将处理。一旦应用程序退出维护模式，作业将继续正常处理。\n维护模式的替代方案由于维护模式要求应用程序停机几秒钟，请考虑其他方法，如特使使用 Laravel 完成零停机时间部署。\n', 3, 391, 1, 0, 1, '2020-10-12 01:34:01', '2022-09-11 16:41:37'),
(1022, 1000, 'laravel自定义分页方法', '<h3 id=\"h3-u57FAu672Cu7528u6CD5\"><a class=\"reference-link\" name=\"基本用法\"></a>基本用法</h3>\n<p>分页查询生成器结果<br />有几种方法可以分页项目。最简单的方法是在paginate查询生成器或雄辩查询.该方法会自动根据用户正在查看的当前页面设置适当的限制和偏移。默认情况下，当前页由 HTTP 请求上的查询字符串参数的值检测。Laravel 自动检测到此值，并自动插入分页器生成的链接中。<code>paginatepage</code><br /><img src=\"https://oss.qin500.com/user/1000/article/20201013210353_15.png\" alt=\"\" /><br />在此示例中，传递给方法的唯一参数是希望显示&rdquo;每页&rdquo;的项数。在这种情况下，让我们指定我们要每页显示项目：paginate15</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">&lt;?php\nnamespace App\\Http\\Controllers;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Support\\Facades\\DB;\nclass UserController extends Controller\n{\n/**\n* Show all of the users for the application.\n*\n* @return Response\n*/\npublic function index()\n{\n$users = DB::table(\'users\')-&gt;paginate(15);\nreturn view(\'user.index\', [\'users\' =&gt; $users]);\n}\n}</code></pre>\n<p>目前，Laravel 无法有效地执行使用语句的分页操作。如果需要使用带分页结果集的 ，建议您查询数据库并手动创建分页器。groupBygroupBy</p>\n<p>&ldquo;简单分页&rdquo;<br />如果只需要在分页视图中显示简单的&rdquo;下一步&rdquo;和&rdquo;上一个&rdquo;链接，可以使用 方法执行更高效的查询。当您在呈现视图时不需要显示每个页号的链接时，这对于大型数据集非常有用：simplePaginate</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">$users = DB::table(\'users\')-&gt;simplePaginate(15);</code></pre>\n<p>分页雄辩结果<br />您还可以分页雄辩查询。在此示例中，我们将用每页项对模型进行分页。如您所看到的，语法几乎与分页查询生成器结果相同：User15</p>\n<p><code>$users = App\\Models\\User::paginate(15);</code><br />您可以在对查询设置其他约束（如子句）后进行调用：paginatewhere</p>\n<p><code>$users = User::where(\'votes\', \'&gt;\', 100)-&gt;paginate(15);</code><br />在分页 Eloquent 模型时，也可以使用 该方法：simplePaginate</p>\n<p><code>$users = User::where(\'votes\', \'&gt;\', 100)-&gt;simplePaginate(15);</code></p>\n<p>手动创建分页器<br />有时，您可能希望手动创建分页实例，将其传递一个项数组。您可以根据需要创建 或 实例来做到这一点。<code>Illuminate\\Pagination\\PaginatorIlluminate\\Pagination\\LengthAwarePaginator</code></p>\n<p>类不需要知道结果集中的项总数;但是，因此，该类没有检索最后一页索引的方法。接受与 几乎相同的参数;但是，它确实需要对结果集中的项总数进行计数。<code>PaginatorLengthAwarePaginatorPaginator</code></p>\n<p>换句话说，对应于查询生成器和 Eloquent 上的 方法，而 对应于 方法。<code>PaginatorsimplePaginateLengthAwarePaginatorpaginate</code></p>\n<p>手动创建分页器实例时，应手动&rdquo;切片&rdquo;传递给分页器的结果数组。如果您不确定如何做到这一点，请查看<code>array_slicePHP</code>函数。</p>\n<p>显示分页结果<br />调用 方法时，您将收到 的实例。调用 方法时，您将收到 的实例。这些对象提供了描述结果集的几种方法。除了这些帮助器方法之外，分页器实例是迭代器，可以循环为数组。因此，检索到结果后，可以显示结果并使用<code>paginateIlluminate\\Pagination\\LengthAwarePaginatorsimplePaginateIlluminate\\Pagination\\Paginator</code>叶片:</p>\n<ol class=\"linenums\">\n<li class=\"L0\"><code><span class=\"tag\">&lt;div</span> <span class=\"atn\">class</span><span class=\"pun\">=</span><span class=\"atv\">\"container\"</span><span class=\"tag\">&gt;</span></code></li>\n<li class=\"L1\"><code><span class=\"pln\">    @foreach ($users as $user)</span></code></li>\n<li class=\"L2\"><code><span class=\"pln\">        {{ $user-&gt;name }}</span></code></li>\n<li class=\"L3\"><code><span class=\"pln\">    @endforeach</span></code></li>\n<li class=\"L4\"><code><span class=\"tag\">&lt;/div&gt;</span></code></li>\n<li class=\"L5\"><code></code></li>\n<li class=\"L6\"><code><span class=\"pln\">{{ $users-&gt;links() }}</span></code></li>\n</ol>\n<p>该方法将呈现指向结果集其余页面的链接。每个链接都已包含正确的查询字符串变量。请记住，该方法生成的 HTML 与linkspagelinks尾风 CSS 框架.</p>\n<p>自定义分页器 URI<br />该方法允许您自定义分页器在生成链接时使用的 URI。例如，如果希望分页器生成链接（如 ），应传递给 方法：<code>withPathhttp://example.com/custom/url?page=Ncustom/urlwithPath</code></p>\n<ol class=\"linenums\">\n<li class=\"L0\"><code><span class=\"typ\">Route</span><span class=\"pun\">::</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">\'users\'</span><span class=\"pun\">,</span> <span class=\"kwd\">function</span> <span class=\"pun\">()</span> <span class=\"pun\">{</span></code></li>\n<li class=\"L1\"><code><span class=\"pln\">    $users </span><span class=\"pun\">=</span> <span class=\"typ\">App</span><span class=\"pln\">\\Models\\User</span><span class=\"pun\">::</span><span class=\"pln\">paginate</span><span class=\"pun\">(</span><span class=\"lit\">15</span><span class=\"pun\">);</span></code></li>\n<li class=\"L2\"><code></code></li>\n<li class=\"L3\"><code><span class=\"pln\">    $users</span><span class=\"pun\">-&gt;</span><span class=\"pln\">withPath</span><span class=\"pun\">(</span><span class=\"str\">\'custom/url\'</span><span class=\"pun\">);</span></code></li>\n<li class=\"L4\"><code></code></li>\n<li class=\"L5\"><code>    <span class=\"com\">//</span></code></li>\n<li class=\"L6\"><code><span class=\"pun\">});</span></code></li>\n</ol>\n<p>追加到分页链接<br />您可以使用 方法追加到分页链接的查询字符串。例如，若要追加到每个分页链接，应调用 ：appendssort=votesappends</p>\n<p><code>{{ $users-&gt;appends([\'sort\' =&gt; \'votes\'])-&gt;links() }}</code><br />如果希望将所有当前查询字符串值追加到分页链接，可以使用 以下方法：withQueryString</p>\n<p><code>{{ $users-&gt;withQueryString()-&gt;links() }}</code><br />如果要将&rdquo;哈希片段&rdquo;追加到分页器的 URL 中，可以使用 该方法。例如，要追加到每个分页链接的末尾，请对 方法进行以下调用：fragment#foofragment</p>\n<p><code>{{ $users-&gt;fragment(\'foo\')-&gt;links() }}</code><br />调整分页链接窗口<br />您可以控制分页器 URL&rdquo;窗口&rdquo;的每一侧显示多少其他链接。默认情况下，主分页器链接的每一侧都显示三个链接。但是，您可以使用 以下方法控制此数字：onEachSide</p>\n<p><code>{{ $users-&gt;onEachSide(5)-&gt;links() }}</code></p>\n<p>将结果转换为 JSON<br />Laravel 分页器结果类实现接口协定并公开该方法，因此很容易将分页结果转换为 JSON。您还可以通过将分页器实例从路由或控制器操作返回到 <code>JSON：Illuminate\\Contracts\\Support\\JsonabletoJson</code></p>\n<ol class=\"linenums\">\n<li class=\"L0\"><code><span class=\"typ\">Route</span><span class=\"pun\">::</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">\'users\'</span><span class=\"pun\">,</span> <span class=\"kwd\">function</span> <span class=\"pun\">()</span> <span class=\"pun\">{</span></code></li>\n<li class=\"L1\"><code>    <span class=\"kwd\">return</span> <span class=\"typ\">App</span><span class=\"pln\">\\Models\\User</span><span class=\"pun\">::</span><span class=\"pln\">paginate</span><span class=\"pun\">();</span></code></li>\n<li class=\"L2\"><code><span class=\"pun\">});</span></code></li>\n</ol>\n<p>来自分页器的 JSON 将包括元信息，如 、等。实际结果对象可通过 JSON 数组中的键获得。下面是通过从路由返回分页器实例创建的 JSON 示例：<code>totalcurrent_pagelast_pagedata</code></p>\n<p><code></code></p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">{\n\"total\": 50,\n\"per_page\": 15,\n\"current_page\": 1,\n\"last_page\": 4,\n\"first_page_url\": \"http://laravel.app?page=1\",\n\"last_page_url\": \"http://laravel.app?page=4\",\n\"next_page_url\": \"http://laravel.app?page=2\",\n\"prev_page_url\": null,\n\"path\": \"http://laravel.app\",\n\"from\": 1,\n\"to\": 15,\n\"data\":[\n{\n// Result Object\n},\n{\n// Result Object\n}\n]\n}</code></pre>\n<p><code></code><code></code>自定义分页视图<br />默认情况下，为显示分页链接而呈现的视图与 Tailwind CSS 框架兼容。但是，如果您不使用 Tailwind，您可以自由定义自己的视图来呈现这些链接。在分页器实例上调用 方法时，将视图名称作为第一个参数传递给方法：links</p>\n<p><code></code><code></code></p>\n<p><code>{{ $paginator-&gt;links(\'view.name\') }}</code></p>\n<p>// Passing data to the view&hellip;<br /><code>{{ $paginator-&gt;links(\'view.name\', [\'foo\' =&gt; \'bar\']) }}</code><br />但是，自定义分页视图的最简单方法是使用 以下命令将它们导出到目录：<code>resources/views/vendorvendor:publish</code></p>\n<p><code>php artisan vendor:publish --tag=laravel-pagination</code><br />此命令将视图放在目录中。此目录中的文件对应于默认分页视图。您可以编辑此文件以修改分页 HTML。<code>resources/views/vendor/paginationtailwind.blade.php</code></p>\n<p>如果要将其他文件指定为默认分页视图，可以使用 中的分页器和 方法：<code>defaultViewdefaultSimpleViewAppServiceProvider</code></p>\n<p><code>use Illuminate\\Pagination\\Paginator;</code></p>\n<ol class=\"linenums\">\n<li class=\"L0\"><code><span class=\"kwd\">public</span> <span class=\"kwd\">function</span><span class=\"pln\"> boot</span><span class=\"pun\">()</span></code></li>\n<li class=\"L1\"><code><span class=\"pun\">{</span></code></li>\n<li class=\"L2\"><code>    <span class=\"typ\">Paginator</span><span class=\"pun\">::</span><span class=\"pln\">defaultView</span><span class=\"pun\">(</span><span class=\"str\">\'view-name\'</span><span class=\"pun\">);</span></code></li>\n<li class=\"L3\"><code></code></li>\n<li class=\"L4\"><code>    <span class=\"typ\">Paginator</span><span class=\"pun\">::</span><span class=\"pln\">defaultSimpleView</span><span class=\"pun\">(</span><span class=\"str\">\'view-name\'</span><span class=\"pun\">);</span></code></li>\n<li class=\"L5\"><code><span class=\"pun\">}</span></code></li>\n</ol>\n<p>使用引导<br />Laravel 包括使用引导 CSS.若要使用这些视图而不是默认 Tailwind 视图，可以调用 中的分页器方法：useBootstrapAppServiceProvider</p>\n<p><code>use Illuminate\\Pagination\\Paginator;</code></p>\n<ol class=\"linenums\">\n<li class=\"L0\"><code><span class=\"kwd\">public</span> <span class=\"kwd\">function</span><span class=\"pln\"> boot</span><span class=\"pun\">()</span></code></li>\n<li class=\"L1\"><code><span class=\"pun\">{</span></code></li>\n<li class=\"L2\"><code>    <span class=\"typ\">Paginator</span><span class=\"pun\">::</span><span class=\"pln\">useBootstrap</span><span class=\"pun\">();</span></code></li>\n<li class=\"L3\"><code><span class=\"pun\">}</span></code></li>\n</ol>\n<h3 id=\"h3-u5206u9875u5668u5B9Eu4F8Bu65B9u6CD5\"><a class=\"reference-link\" name=\"分页器实例方法\"></a>分页器实例方法</h3>\n<p>每个分页器实例通过以下方法提供额外的分页信息：</p>\n<p>方法 描述<br />$paginator-&gt;count() 获取当前页面的项目数。<br />$paginator-&gt;currentPage() 获取当前页号。<br />$paginator-&gt;firstItem() 获取结果中第一项的结果编号。<br />$paginator-&gt;getOptions() 获取分页器选项。<br />$paginator-&gt;getUrlRange($start, $end) 创建一系列分页 URL。<br />$paginator-&gt;hasPages() 确定是否有足够的项目可以拆分为多个页面。<br />$paginator-&gt;hasMorePages() 确定数据存储中是否有更多项。<br />$paginator-&gt;items() 获取当前页面的项目。<br />$paginator-&gt;lastItem() 获取结果中最后一个项目的结果编号。<br />$paginator-&gt;lastPage() 获取最后可用页面的页号。（使用 时不可用。simplePaginate<br />$paginator-&gt;nextPageUrl() 获取下一页的 URL。<br />$paginator-&gt;onFirstPage() 确定分页器是否位于第一页上。<br />$paginator-&gt;perPage() 要显示每页的项目数。<br />$paginator-&gt;previousPageUrl() 获取上一页的 URL。<br />$paginator-&gt;total() 确定数据存储中匹配项的总数。（使用 时不可用。simplePaginate<br />$paginator-&gt;url($page) 获取给定页号的 URL。<br />$paginator-&gt;getPageName() 获取用于存储页面的查询字符串变量。<br />$paginator-&gt;setPageName($name) 设置用于存储页面的查询字符串变量。</p>', 'https://oss.qin500.com/user/1000/article/20201013210353_15.png', '基本用法\n分页查询生成器结果有几种方法可以分页项目。最简单的方法是在paginate查询生成器或雄辩查询.该方法会自动根据用户正在查看的当前页面设置适当的限制和偏移。默认情况下，当前页由 HTTP 请求上的查询字符串参数的值检测。Laravel 自动检测到此值，并自动插入分页器生成的链接中。paginatepage在此示例中，传递给方法的唯一参数是希望显示&rdquo;每页&rdquo;的项数。在这种情况下，让我们指定我们要每页显示项目：paginate15\n&lt;?php\nnamespace App\\Http\\Controllers;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Support\\Facades\\DB;\nclass UserController extends Controller\n{\n/**\n* Show all of the users for the application.\n*\n* @return Response\n*/\npublic function index()\n{\n$users = DB::table(\'users\')-&gt;paginate(15);\nreturn view(\'user.index\', [\'users\' =&gt; $users]);\n}\n}\n目前，Laravel 无法有效地执行使用语句的分页操作。如果需要使用带分页结果集的 ，建议您查询数据库并手动创建分页器。groupBygroupBy\n&ldquo;简单分页&rdquo;如果只需要在分页视图中显示简单的&rdquo;下一步&rdquo;和&rdquo;上一个&rdquo;链接，可以使用 方法执行更高效的查询。当您在呈现视图时不需要显示每个页号的链接时，这对于大型数据集非常有用：simplePaginate\n$users = DB::table(\'users\')-&gt;simplePaginate(15);\n分页雄辩结果您还可以分页雄辩查询。在此示例中，我们将用每页项对模型进行分页。如您所看到的，语法几乎与分页查询生成器结果相同：User15\n$users = App\\Models\\User::paginate(15);您可以在对查询设置其他约束（如子句）后进行调用：paginatewhere\n$users = User::where(\'votes\', \'&gt;\', 100)-&gt;paginate(15);在分页 Eloquent 模型时，也可以使用 该方法：simplePaginate\n$users = User::where(\'votes\', \'&gt;\', 100)-&gt;simplePaginate(15);\n手动创建分页器有时，您可能希望手动创建分页实例，将其传递一个项数组。您可以根据需要创建 或 实例来做到这一点。Illuminate\\Pagination\\PaginatorIlluminate\\Pagination\\LengthAwarePaginator\n类不需要知道结果集中的项总数;但是，因此，该类没有检索最后一页索引的方法。接受与 几乎相同的参数;但是，它确实需要对结果集中的项总数进行计数。PaginatorLengthAwarePaginatorPaginator\n换句话说，对应于查询生成器和 Eloquent 上的 方法，而 对应于 方法。PaginatorsimplePaginateLengthAwarePaginatorpaginate\n手动创建分页器实例时，应手动&rdquo;切片&rdquo;传递给分页器的结果数组。如果您不确定如何做到这一点，请查看array_slicePHP函数。\n显示分页结果调用 方法时，您将收到 的实例。调用 方法时，您将收到 的实例。这些对象提供了描述结果集的几种方法。除了这些帮助器方法之外，分页器实例是迭代器，可以循环为数组。因此，检索到结果后，可以显示结果并使用paginateIlluminate\\Pagination\\LengthAwarePaginatorsimplePaginateIlluminate\\Pagination\\Paginator叶片:\n\n&lt;div class=\"container\"&gt;\n    @foreach ($users as $user)\n        {{ $user-&gt;name }}\n    @endforeach\n&lt;/div&gt;\n\n{{ $users-&gt;links() }}\n\n该方法将呈现指向结果集其余页面的链接。每个链接都已包含正确的查询字符串变量。请记住，该方法生成的 HTML 与linkspagelinks尾风 CSS 框架.\n自定义分页器 URI该方法允许您自定义分页器在生成链接时使用的 URI。例如，如果希望分页器生成链接（如 ），应传递给 方法：withPathhttp://example.com/custom/url?page=Ncustom/urlwithPath\n\nRoute::get(\'users\', function () {\n    $users = App\\Models\\User::paginate(15);\n\n    $users-&gt;withPath(\'custom/url\');\n\n    //\n});\n\n追加到分页链接您可以使用 方法追加到分页链接的查询字符串。例如，若要追加到每个分页链接，应调用 ：appendssort=votesappends\n{{ $users-&gt;appends([\'sort\' =&gt; \'votes\'])-&gt;links() }}如果希望将所有当前查询字符串值追加到分页链接，可以使用 以下方法：withQueryString\n{{ $users-&gt;withQueryString()-&gt;links() }}如果要将&rdquo;哈希片段&rdquo;追加到分页器的 URL 中，可以使用 该方法。例如，要追加到每个分页链接的末尾，请对 方法进行以下调用：fragment#foofragment\n{{ $users-&gt;fragment(\'foo\')-&gt;links() }}调整分页链接窗口您可以控制分页器 URL&rdquo;窗口&rdquo;的每一侧显示多少其他链接。默认情况下，主分页器链接的每一侧都显示三个链接。但是，您可以使用 以下方法控制此数字：onEachSide\n{{ $users-&gt;onEachSide(5)-&gt;links() }}\n将结果转换为 JSONLaravel 分页器结果类实现接口协定并公开该方法，因此很容易将分页结果转换为 JSON。您还可以通过将分页器实例从路由或控制器操作返回到 JSON：Illuminate\\Contracts\\Support\\JsonabletoJson\n\nRoute::get(\'users\', function () {\n    return App\\Models\\User::paginate();\n});\n\n来自分页器的 JSON 将包括元信息，如 、等。实际结果对象可通过 JSON 数组中的键获得。下面是通过从路由返回分页器实例创建的 JSON 示例：totalcurrent_pagelast_pagedata\n\n{\n\"total\": 50,\n\"per_page\": 15,\n\"current_page\": 1,\n\"last_page\": 4,\n\"first_page_url\": \"http://laravel.app?page=1\",\n\"last_page_url\": \"http://laravel.app?page=4\",\n\"next_page_url\": \"http://laravel.app?page=2\",\n\"prev_page_url\": null,\n\"path\": \"http://laravel.app\",\n\"from\": 1,\n\"to\": 15,\n\"data\":[\n{\n// Result Object\n},\n{\n// Result Object\n}\n]\n}\n自定义分页视图默认情况下，为显示分页链接而呈现的视图与 Tailwind CSS 框架兼容。但是，如果您不使用 Tailwind，您可以自由定义自己的视图来呈现这些链接。在分页器实例上调用 方法时，将视图名称作为第一个参数传递给方法：links\n\n{{ $paginator-&gt;links(\'view.name\') }}\n// Passing data to the view&hellip;{{ $paginator-&gt;links(\'view.name\', [\'foo\' =&gt; \'bar\']) }}但是，自定义分页视图的最简单方法是使用 以下命令将它们导出到目录：resources/views/vendorvendor:publish\nphp artisan vendor:publish --tag=laravel-pagination此命令将视图放在目录中。此目录中的文件对应于默认分页视图。您可以编辑此文件以修改分页 HTML。resources/views/vendor/paginationtailwind.blade.php\n如果要将其他文件指定为默认分页视图，可以使用 中的分页器和 方法：defaultViewdefaultSimpleViewAppServiceProvider\nuse Illuminate\\Pagination\\Paginator;\n\npublic function boot()\n{\n    Paginator::defaultView(\'view-name\');\n\n    Paginator::defaultSimpleView(\'view-name\');\n}\n\n使用引导Laravel 包括使用引导 CSS.若要使用这些视图而不是默认 Tailwind 视图，可以调用 中的分页器方法：useBootstrapAppServiceProvider\nuse Illuminate\\Pagination\\Paginator;\n\npublic function boot()\n{\n    Paginator::useBootstrap();\n}\n\n分页器实例方法\n每个分页器实例通过以下方法提供额外的分页信息：\n方法 描述$paginator-&gt;count() 获取当前页面的项目数。$paginator-&gt;currentPage() 获取当前页号。$paginator-&gt;firstItem() 获取结果中第一项的结果编号。$paginator-&gt;getOptions() 获取分页器选项。$paginator-&gt;getUrlRange($start, $end) 创建一系列分页 URL。$paginator-&gt;hasPages() 确定是否有足够的项目可以拆分为多个页面。$paginator-&gt;hasMorePages() 确定数据存储中是否有更多项。$paginator-&gt;items() 获取当前页面的项目。$paginator-&gt;lastItem() 获取结果中最后一个项目的结果编号。$paginator-&gt;lastPage() 获取最后可用页面的页号。（使用 时不可用。simplePaginate$paginator-&gt;nextPageUrl() 获取下一页的 URL。$paginator-&gt;onFirstPage() 确定分页器是否位于第一页上。$paginator-&gt;perPage() 要显示每页的项目数。$paginator-&gt;previousPageUrl() 获取上一页的 URL。$paginator-&gt;total() 确定数据存储中匹配项的总数。（使用 时不可用。simplePaginate$paginator-&gt;url($page) 获取给定页号的 URL。$paginator-&gt;getPageName() 获取用于存储页面的查询字符串变量。$paginator-&gt;setPageName($name) 设置用于存储页面的查询字符串变量。', 3, 395, 1, 0, 1, '2020-10-14 00:58:16', '2022-09-11 07:31:04'),
(1101, 1000, 'thinkphp学习笔记', '<p>之前一直用的是laravel框架,感觉laravel框架挺好用的,但是看到国内还是好多人用thinkphp,用thinkphp做的项目,所以决定有必要学一下,</p>\n<p>thinkphp在路由这块,可以不必强制声明路由,而laravel必须声明路由,不声明无法访问</p>\n<p>先看看单应用模式</p>\n<p><img src=\"https://wpcdn.qin500.com/1000/202196201236Rn63TciFFKFpWrhwT63Bx0enHj.png\" width=\"405\" height=\"175\" /></p>\n<p>他的访问路径为&nbsp; &nbsp;/index/index&nbsp; &nbsp; &nbsp;</p>\n<p>也可以写成&nbsp; /index&nbsp; &nbsp;因为默认就是访问index方法</p>\n<p>&nbsp;</p>\n<p><img src=\"https://wpcdn.qin500.com/1000/2021962016590fpbdXQFxxcpF44N8n0msWhehf.png\" width=\"488\" height=\"278\" /></p>\n<p>访问路径&nbsp; /admin/user/index,默认中间的controller不要</p>\n<p>我在app建立两个目录,admin和api,系统自动认为多应用模式</p>\n<p>官方建议,多应用的模式下,删除app目录下的controller文件夹</p>\n<p>&nbsp;</p>', 'https://wpcdn.qin500.com/1000/202196201236Rn63TciFFKFpWrhwT63Bx0enHj.png', '之前一直用的是laravel框架,感觉laravel框架挺好用的,但是看到国内还是好多人用thinkphp,用thinkphp做的项目,所以决定有必要学一下,\nthinkphp在路由这块,可以不必强制声明路由,而laravel必须声明路由,不声明无法访问\n先看看单应用模式\n\n他的访问路径为&nbsp; &nbsp;/index/index&nbsp; &nbsp; &nbsp;\n也可以写成&nbsp; /index&nbsp; &nbsp;因为默认就是访问index方法\n&nbsp;\n\n访问路径&nbsp; /admin/user/index,默认中间的controller不要\n我在app建立两个目录,admin和api,系统自动认为多应用模式\n官方建议,多应用的模式下,删除app目录下的controller文件夹\n&nbsp;', 20, 514, 1, 0, 1, '2021-09-06 12:09:47', '2022-09-11 07:09:35'),
(1102, 1000, 'php字符串处理', '<p>字符串比较</p>\n<p>处理常规的===,&lt;,&gt;外,还有</p>\n<p>按字节进行比较</p>\n<p>strcmp 区分大小写</p>\n<p>strcasecmp 不区分大小写</p>\n<p>str1=str2 返回为0</p>\n<p>str1 &gt;str2 返回为1</p>\n<p>str1&lt;str2 返回为-1,</p>\n<p><img src=\"https://wpcdn.qin500.com/1000/20219995851rYsiSTGhJnGHPEFz2iircRedeQ.png\" width=\"616\" height=\"413\" /></p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">echo \'&lt;h3&gt;-----变量也可以以数组索引方式进行输出----&lt;/h3&gt;\';\n$str=\'this is a book\';\necho $str[0];\necho $str[1];\necho \"&lt;Br&gt;\";\n\necho \'&lt;h3&gt;-----双引号变量的解释-----&lt;/h3&gt;\';\n\n//声明一个关联数组\n$lang=[\'os\'=&gt;\'linux\',\'webserver\'=&gt;\'Apache\',\'db\'=&gt;\'mysql\',\'language\'=&gt;\'php\'];\necho \"A os is $lang[os]\" . \"&lt;br&gt;\";//$lang[os] os不用引号包围\necho \"A webserver {$lang[\'webserver\']}\" . \"&lt;br&gt;\";\necho \"A webserver {\\$lang[\'webserver\']}\" . \"&lt;br&gt;\";//不想解析变量呢\n\necho \'&lt;h3&gt;-----常用字符串输出函数----&lt;/h3&gt;\';\necho \"echo-print-printf-sprintf\". \"&lt;br&gt;\";\nprint \"我正在输出一些内容\". \"&lt;br&gt;\";\n\n$str=\"Qin500 学习网\";\n$num=256.237;\n\nprintf(\"%s book . page number %u &lt;br&gt;\",$str,$num);\nprintf(\"%0.2f &lt;br&gt;\",$num);//23456.00  格式化输出数字 0.2代表保留两位\n$format=\"The %2\\$s book contains %1\\$d pages.\nThat\'s a nice %2\\$s full of %1\\$d pages. &lt;Br&gt;\";//按格式占位符输出多个变量\nprintf($format,$num,$str);\n\nprint sprintf($format,$num,$str);//格式化后返回给变量\n\nprintf(\"%x &lt;br&gt;\",$num);//5ba0   将数字转化为16进制数,x小写,X大写\nprintf(\"%0.2f%% &lt;br&gt;\",$num);\nprintf(\"%d &lt;br&gt;\",\'-124.34\');\nprintf(\"%c &lt;br&gt;\",\"65\");\n</code></pre>', 'https://wpcdn.qin500.com/1000/20219995851rYsiSTGhJnGHPEFz2iircRedeQ.png', '字符串比较\n处理常规的===,&lt;,&gt;外,还有\n按字节进行比较\nstrcmp 区分大小写\nstrcasecmp 不区分大小写\nstr1=str2 返回为0\nstr1 &gt;str2 返回为1\nstr1&lt;str2 返回为-1,\n\necho \'&lt;h3&gt;-----变量也可以以数组索引方式进行输出----&lt;/h3&gt;\';\n$str=\'this is a book\';\necho $str[0];\necho $str[1];\necho \"&lt;Br&gt;\";\n\necho \'&lt;h3&gt;-----双引号变量的解释-----&lt;/h3&gt;\';\n\n//声明一个关联数组\n$lang=[\'os\'=&gt;\'linux\',\'webserver\'=&gt;\'Apache\',\'db\'=&gt;\'mysql\',\'language\'=&gt;\'php\'];\necho \"A os is $lang[os]\" . \"&lt;br&gt;\";//$lang[os] os不用引号包围\necho \"A webserver {$lang[\'webserver\']}\" . \"&lt;br&gt;\";\necho \"A webserver {\\$lang[\'webserver\']}\" . \"&lt;br&gt;\";//不想解析变量呢\n\necho \'&lt;h3&gt;-----常用字符串输出函数----&lt;/h3&gt;\';\necho \"echo-print-printf-sprintf\". \"&lt;br&gt;\";\nprint \"我正在输出一些内容\". \"&lt;br&gt;\";\n\n$str=\"Qin500 学习网\";\n$num=256.237;\n\nprintf(\"%s book . page number %u &lt;br&gt;\",$str,$num);\nprintf(\"%0.2f &lt;br&gt;\",$num);//23456.00  格式化输出数字 0.2代表保留两位\n$format=\"The %2\\$s book contains %1\\$d pages.\nThat\'s a nice %2\\$s full of %1\\$d pages. &lt;Br&gt;\";//按格式占位符输出多个变量\nprintf($format,$num,$str);\n\nprint sprintf($format,$num,$str);//格式化后返回给变量\n\nprintf(\"%x &lt;br&gt;\",$num);//5ba0   将数字转化为16进制数,x小写,X大写\nprintf(\"%0.2f%% &lt;br&gt;\",$num);\nprintf(\"%d &lt;br&gt;\",\'-124.34\');\nprintf(\"%c &lt;br&gt;\",\"65\");\n', 21, 533, 1, 0, 1, '2021-09-09 01:10:25', '2022-09-11 07:09:35'),
(1023, 1000, 'js的onscroll、scrollTop、scrollHeight及window.scroll等方法', '<h3 id=\"h3-onscroll\"><a name=\"onscroll\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>onscroll</h3><p>HTML高度=滚动的顶端坐标+可视区域的高度<br><code>element.scrollTop+element.clientHeight=element.ScrollHeight</code><br>解释：当元素的滚动条滚动时触发的事件。\n</p><p>onscroll事件貌似任何实体元素都可以绑定，这里的实体元素包括DOM元素、window元素、document元素。</p>\n<p>用法即：element.onscroll=function(){};</p>\n<p>需要注意的是，滚动条一定要出现，而且滚动条是属于这元素的，例如：</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"tag\">&lt;div</span><span class=\"pln\"> </span><span class=\"atn\">id</span><span class=\"pun\">=</span><span class=\"atv\">\"wrap\"</span><span class=\"pln\"> </span><span class=\"atn\">style</span><span class=\"pun\">=</span><span class=\"atv\">\"</span><span class=\"pln\">height</span><span class=\"pun\">:</span><span class=\"lit\">100px</span><span class=\"pun\">;</span><span class=\"pln\">overflow</span><span class=\"pun\">:</span><span class=\"kwd\">auto</span><span class=\"pun\">;</span><span class=\"atv\">\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"tag\">&lt;div</span><span class=\"pln\"> </span><span class=\"atn\">id</span><span class=\"pun\">=</span><span class=\"atv\">\"inner\"</span><span class=\"pln\"> </span><span class=\"atn\">style</span><span class=\"pun\">=</span><span class=\"atv\">\"</span><span class=\"pln\">height</span><span class=\"pun\">:</span><span class=\"lit\">200px</span><span class=\"pun\">;</span><span class=\"atv\">\"</span><span class=\"tag\">&gt;</span><span class=\"pln\">content</span><span class=\"tag\">&lt;/div&gt;</span></code></li><li class=\"L2\"><code><span class=\"tag\">&lt;/div&gt;</span></code></li></ol></pre><p>因为外层wrap的高度小于内层inner的高度，所以当设置overflow:auto时会出现滚动条，当拖动滚动条时就会触发wrap的onscroll事件，而不是inner的onscroll事件，即这滚动条属于wrap而不是属于inner，明白这点十分重要，对下面理解的scrollTop、scrollHeight一样道理。</p>\n<h3 id=\"h3-scrolltop\"><a name=\"scrollTop\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>scrollTop</h3><p>解释：元素滚动条内的顶部隐藏部分的高度。</p>\n<p>scrollTop属性只有DOM元素才有，window/document没有。</p>\n<p>用法1：获取值 var top = element.scrollTop;//返回数字，单位像素</p>\n<p>用法2：设置值 element.scrollTop = 200;</p>\n<p>对上面的例子来说，控制滚动条的位置是wrap.scrollTop=xx;而不是inner.scrollTop，道理同上。</p>\n<p>兼容性问题：获得整个文档scrollTop，IE是document.documentElement.scrollTop，FF/CH则是document.body.scrollTop.</p>\n<h3 id=\"h3-scrollheight\"><a name=\"scrollHeight\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>scrollHeight</h3><p>解释：元素滚动条内的内容高度。</p>\n<p>scrollHeight同scrollTop属性一样，只有DOM元素才有，window/document没有。</p>\n<p>不同的是scrollHeight是只读，不可设置。</p>\n<p>兼容性问题：获取整个文档scrollHeight，IE/FF/CH都可以通过document.documentElement.scrollHeight或document.body.scrollHeight获得。</p>\n<p>此外还有scrollLeft，scrollWidth，道理是一样的。</p>\n<p>关于window.scroll()，window.scrollBy()，window.scrollTo()<br>这3个是全局函数，最新的IE/FF/CH都支持。\n</p><p>window.scroll(x,y)是让window滚动条滚动到那个x,y坐标。//x是水平坐标，y是垂直坐标。</p>\n<p>window.scrollBy(-x,-y)是让window滚动条相对滚动到某个坐标，- 10即相对向左/向上滚动10像素。<code>不同的是,这个是相对坐标</code></p>\n<p>window.scrollTo(x,y)和window.scroll(x,y)一样。</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/059.jpg', 'onscrollHTML高度=滚动的顶端坐标+可视区域的高度element.scrollTop+element.clientHeight=element.ScrollHeight解释：当元素的滚动条滚动时触发的事件。\nonscroll事件貌似任何实体元素都可以绑定，这里的实体元素包括DOM元素、window元素、document元素。\n用法即：element.onscroll=function(){};\n需要注意的是，滚动条一定要出现，而且滚动条是属于这元素的，例如：\n&lt;div id=\"wrap\" style=\"height:100px;overflow:auto;\"&gt;    &lt;div id=\"inner\" style=\"height:200px;\"&gt;content&lt;/div&gt;&lt;/div&gt;因为外层wrap的高度小于内层inner的高度，所以当设置overflow:auto时会出现滚动条，当拖动滚动条时就会触发wrap的onscroll事件，而不是inner的onscroll事件，即这滚动条属于wrap而不是属于inner，明白这点十分重要，对下面理解的scrollTop、scrollHeight一样道理。\nscrollTop解释：元素滚动条内的顶部隐藏部分的高度。\nscrollTop属性只有DOM元素才有，window/document没有。\n用法1：获取值 var top = element.scrollTop;//返回数字，单位像素\n用法2：设置值 element.scrollTop = 200;\n对上面的例子来说，控制滚动条的位置是wrap.scrollTop=xx;而不是inner.scrollTop，道理同上。\n兼容性问题：获得整个文档scrollTop，IE是document.documentElement.scrollTop，FF/CH则是document.body.scrollTop.\nscrollHeight解释：元素滚动条内的内容高度。\nscrollHeight同scrollTop属性一样，只有DOM元素才有，window/document没有。\n不同的是scrollHeight是只读，不可设置。\n兼容性问题：获取整个文档scrollHeight，IE/FF/CH都可以通过document.documentElement.scrollHeight或document.body.scrollHeight获得。\n此外还有scrollLeft，scrollWidth，道理是一样的。\n关于window.scroll()，window.scrollBy()，window.scrollTo()这3个是全局函数，最新的IE/FF/CH都支持。\nwindow.scroll(x,y)是让window滚动条滚动到那个x,y坐标。//x是水平坐标，y是垂直坐标。\nwindow.scrollBy(-x,-y)是让window滚动条相对滚动到某个坐标，- 10即相对向左/向上滚动10像素。不同的是,这个是相对坐标\nwindow.scrollTo(x,y)和window.scroll(x,y)一样。', 3, 392, 1, 0, 1, '2020-10-14 18:34:25', '2022-09-11 07:31:04'),
(1024, 1000, 'javascript基础知识(一)', '<h4 id=\"h4-u5B57u7B26u4E32\"><a name=\"字符串\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>字符串</h4><p>toLowerCase 转换为小写</p>\n<p>a=now Date()<br>a.getHours()//获取小时<br>a.getDay()/获取星期\n</p><h1 id=\"h1-u8BEDu53E5u63A7u5236\"><a name=\"语句控制\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>语句控制</h1><p>if(){</p>\n<p>}else{</p>\n<p>}<br>switch(){<br>case 1:\n</p><p>break;<br>}<br>while(){\n</p><p>}</p>\n<p>do{</p>\n<p>}while()//X先执行一次语句,再判断表达式<br>fo(){\n</p><p>}<br>跳转语句<br>containue;//终止本次循环,并开始下一次循环,只能运用到while,for,do…while<br>break;//退出循环\n</p><p>函数<br>通过超链接调用<br><img src=\"https://oss.qin500.com/user/1000/article/20201015201544_16.png\" alt=\"\">\n</p><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">         document</span><span class=\"pun\">.</span><span class=\"pln\">onmousedown</span><span class=\"pun\">=</span><span class=\"kwd\">function</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">            </span><span class=\"com\">//屏蔽鼠标右键</span></code></li><li class=\"L2\"><code><span class=\"pln\">            </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"kwd\">event</span><span class=\"pun\">.</span><span class=\"pln\">button </span><span class=\"pun\">==</span><span class=\"pln\"> </span><span class=\"lit\">2</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L3\"><code><span class=\"pln\">                </span><span class=\"kwd\">event</span><span class=\"pun\">.</span><span class=\"pln\">returnValue</span><span class=\"pun\">=</span><span class=\"kwd\">false</span><span class=\"pun\">;</span></code></li><li class=\"L4\"><code><span class=\"pln\">                alert</span><span class=\"pun\">(</span><span class=\"str\">\"禁止鼠标右键\"</span><span class=\"pun\">)</span></code></li><li class=\"L5\"><code><span class=\"pln\">            </span><span class=\"pun\">}</span></code></li><li class=\"L6\"><code><span class=\"pln\">        </span><span class=\"pun\">}</span></code></li></ol></pre><p><img src=\"https://oss.qin500.com/user/1000/article/20201015211434_17.png\" alt=\"\"><br><img src=\"https://oss.qin500.com/user/1000/article/20201015211445_18.png\" alt=\"\">\n</p><p>toLocaleString()  返回一个String对象,<br>toSting() 返回对象字符串<br>toString(16)以16进制计算显示<br>valueOf() 返回对象原始值\n</p><p>2.String对象的属性<br>(1）length属性<br>length属性用于获得当前字符串的长度。<br><img src=\"https://oss.qin500.com/user/1000/article/20201015213907_19.png\" alt=\"\"><br>(2)constructor属性用于对当前对象的引用<br>参数说明:<br>Object:String对象名或字符变量名。<br>例如，使用constructor属性判断当前对象或自定义变量的类型。代码如下:<br>var newName=new String(“sdf”);<br>if(newName.constructor==String)//判断当前对象是否为字符型<br>{alert(“this is String”);}<br>运行结果:<br>this is String\n</p><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">        </span><span class=\"kwd\">function</span><span class=\"pln\"> demo</span><span class=\"pun\">(){</span></code></li><li class=\"L1\"><code><span class=\"pln\">          </span><span class=\"kwd\">var</span><span class=\"pln\"> p</span><span class=\"pun\">=</span><span class=\"lit\">0</span><span class=\"pun\">;</span></code></li><li class=\"L2\"><code><span class=\"pln\">            </span><span class=\"kwd\">var</span><span class=\"pln\"> newString</span><span class=\"pun\">=</span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">String</span><span class=\"pun\">(</span><span class=\"str\">\"abcdefgabcdefgabcdefg\"</span><span class=\"pun\">);</span></code></li><li class=\"L3\"><code><span class=\"pln\">            </span><span class=\"kwd\">var</span><span class=\"pln\"> p</span><span class=\"pun\">=</span><span class=\"pln\">newString</span><span class=\"pun\">.</span><span class=\"pln\">length</span><span class=\"pun\">;</span></code></li><li class=\"L4\"><code></code></li><li class=\"L5\"><code><span class=\"pln\">        </span><span class=\"pun\">}</span></code></li><li class=\"L6\"><code><span class=\"pln\">            fred</span><span class=\"pun\">=</span><span class=\"kwd\">new</span><span class=\"pln\"> demo</span><span class=\"pun\">();</span></code></li><li class=\"L7\"><code><span class=\"pln\">            alert</span><span class=\"pun\">(</span><span class=\"pln\">fred</span><span class=\"pun\">.</span><span class=\"pln\">constructor</span><span class=\"pun\">)</span></code></li></ol></pre><p>结果直接打印函数构造</p>\n<p>(3）prototype属性<br>prototype属性可以为对象添加属性和方法。<br>语法:<br>object.prototype.name=value<br>参数说明:<br>object:对象名或字符变量名。<br>name:要添加的属性名。<br>value:添加属性的值。<br>例如，给information对象添加一个自定义属性salary，并给该属性赋值（1700）。代码如下:\n</p><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">function</span><span class=\"pln\"> personnel</span><span class=\"pun\">(</span><span class=\"pln\">name</span><span class=\"pun\">,</span><span class=\"pln\">age</span><span class=\"pun\">)</span></code></li><li class=\"L1\"><code><span class=\"pun\">{</span></code></li><li class=\"L2\"><code><span class=\"pln\">   </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">name</span><span class=\"pun\">=</span><span class=\"pln\">name</span><span class=\"pun\">;</span></code></li><li class=\"L3\"><code><span class=\"pln\">    </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">age</span><span class=\"pun\">-</span><span class=\"pln\">age</span><span class=\"pun\">;</span><span class=\"pln\"> </span></code></li><li class=\"L4\"><code><span class=\"pun\">}</span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"kwd\">var</span><span class=\"pln\"> information</span><span class=\"pun\">=</span><span class=\"kwd\">new</span><span class=\"pln\"> personnel</span><span class=\"pun\">(</span><span class=\"str\">\"张*租\"</span><span class=\"pun\">,</span><span class=\"lit\">27</span><span class=\"pun\">);</span></code></li><li class=\"L7\"><code><span class=\"pln\">personnel</span><span class=\"pun\">.</span><span class=\"pln\">prototype</span><span class=\"pun\">.</span><span class=\"pln\">salary</span><span class=\"pun\">=</span><span class=\"kwd\">null</span><span class=\"pun\">;</span></code></li><li class=\"L8\"><code><span class=\"pln\">information</span><span class=\"pun\">.</span><span class=\"pln\">salary</span><span class=\"pun\">=</span><span class=\"lit\">1700</span><span class=\"pun\">;</span></code></li><li class=\"L9\"><code><span class=\"pln\">alert</span><span class=\"pun\">(</span><span class=\"pln\">information</span><span class=\"pun\">.</span><span class=\"pln\">salary</span><span class=\"pun\">);</span></code></li></ol></pre><p><img src=\"https://oss.qin500.com/user/1000/article/20201015215413_20.png\" alt=\"\">\n</p><p>日期对象 Date()<br><img src=\"https://oss.qin500.com/user/1000/article/20201015222020_21.png\" alt=\"\"><br><img src=\"https://oss.qin500.com/user/1000/article/20201015222032_22.png\" alt=\"\">\n</p><p>数组 Array()<br><img src=\"https://oss.qin500.com/user/1000/article/20201016150746_24.png\" alt=\"\">\n</p><p>字符串 String()<br>charAt() 获取第几个字符串<br>indexOf() 返回字符串首次出现的位置<br>lastIndexO() 返回字符串最后出现的位置\n</p><h3 id=\"h3-math-\"><a name=\"Math 对象\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Math 对象</h3><p>![<img src=\"https://oss.qin500.com/user/1000/article/20201016153202_26.png\" alt=\"\">![<img src=\"https://oss.qin500.com/user/1000/article/20201016153153_25.png\" alt=\"\">\n</p><h3 id=\"h3-number-\"><a name=\"Number 对象\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Number 对象</h3><p>（1）MAX VALUE属性<br>语法:<br>value=Number.MAX_VALUE<br>MAXVALUE属性用于返回Number对象的最大可能值。<br>(2）MIN VALUE属性<br>语法:<br>value=Number.MIN_VALUE<br>MIN_VALUE属性用于返回 Number对象的最小可能值。<br>(3）NEGATIVE INFINITY属性<br>语法:<br>value=Number.NEGATIVE_INFINITY<br>NEGATIVE INFINITY属性用于返回Number对象的负无穷大的值。<br>(4）POSITIVE INFINITY属性<br>语法:<br>value=Number.POSITIVE_INFINITY<br>POSITIVE INFINITY属性用于返回Number对象的正无穷大的值。\n</p><p>3.Number对象的方法<br>(1）toStringO方法<br>(2）toLocaleStringO方法<br>语法:<br>NumberObject.toLocaleString()<br>toLocaleString(方法可以把 Number对象转换为本地格式的字符串。<br>(3） toFixed方法<br>语法:<br>NumberObject.toFixed(num)<br>toFixed()方法将Number对象四舍五入为指定小数位数的数字，然后转换成字符串。<br>(4） toExponential(方法<br>语法:<br>NumberObject.toExponential(num)<br>toExponential()方法利用指数计数法计算Number对象的值，然后将其转换成字符串。<br>(5）toPrecision()方法<br>语法:<br>NumberObject.toPrecision(num)<br>参数说明:<br>以支持更大的数值范围。如果省略该参数，将使用尽可能多的数字。<br>返回值:数字的字符串表示，包含num个有效数字。如果num足够大，能够包括整数部分的所有<br>点后有num-1位数字。必要时，该数字会被舍入或用0补足。<br>toPrecision()方法将Number对象转换成字符串，<br>num: 必选项。规定指数计数法中的小数位数，<br>数字，那么返回的字符串将采用定点计数法;否则<br>并根据不同的情况选择定点计数法或指数计数法。<br>是0～20之间的值（包括О和20），有些实现可<br>采用指数计数法，即小数点前有一位数字，小数<br>点后有num-1位数字。必要时，该数字会被舍入或用0补足。\n</p><h3 id=\"h3-boolean-\"><a name=\"Boolean对象\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Boolean对象</h3><p>（1 constructor属性<br>(2)prototype属性\n</p><p>（1）toStringO方法<br>(2）valueOf()方法\n</p>', 'https://oss.qin500.com/user/1000/article/20201015201544_16.png', '字符串toLowerCase 转换为小写\na=now Date()a.getHours()//获取小时a.getDay()/获取星期\n语句控制if(){\n}else{\n}switch(){case 1:\nbreak;}while(){\n}\ndo{\n}while()//X先执行一次语句,再判断表达式fo(){\n}跳转语句containue;//终止本次循环,并开始下一次循环,只能运用到while,for,do…whilebreak;//退出循环\n函数通过超链接调用\n         document.onmousedown=function() {            //屏蔽鼠标右键            if (event.button == 2) {                event.returnValue=false;                alert(\"禁止鼠标右键\")            }        }\ntoLocaleString()  返回一个String对象,toSting() 返回对象字符串toString(16)以16进制计算显示valueOf() 返回对象原始值\n2.String对象的属性(1）length属性length属性用于获得当前字符串的长度。(2)constructor属性用于对当前对象的引用参数说明:Object:String对象名或字符变量名。例如，使用constructor属性判断当前对象或自定义变量的类型。代码如下:var newName=new String(“sdf”);if(newName.constructor==String)//判断当前对象是否为字符型{alert(“this is String”);}运行结果:this is String\n        function demo(){          var p=0;            var newString=new String(\"abcdefgabcdefgabcdefg\");            var p=newString.length;        }            fred=new demo();            alert(fred.constructor)结果直接打印函数构造\n(3）prototype属性prototype属性可以为对象添加属性和方法。语法:object.prototype.name=value参数说明:object:对象名或字符变量名。name:要添加的属性名。value:添加属性的值。例如，给information对象添加一个自定义属性salary，并给该属性赋值（1700）。代码如下:\nfunction personnel(name,age){   this.name=name;    this.age-age; }var information=new personnel(\"张*租\",27);personnel.prototype.salary=null;information.salary=1700;alert(information.salary);\n日期对象 Date()\n数组 Array()\n字符串 String()charAt() 获取第几个字符串indexOf() 返回字符串首次出现的位置lastIndexO() 返回字符串最后出现的位置\nMath 对象![![\nNumber 对象（1）MAX VALUE属性语法:value=Number.MAX_VALUEMAXVALUE属性用于返回Number对象的最大可能值。(2）MIN VALUE属性语法:value=Number.MIN_VALUEMIN_VALUE属性用于返回 Number对象的最小可能值。(3）NEGATIVE INFINITY属性语法:value=Number.NEGATIVE_INFINITYNEGATIVE INFINITY属性用于返回Number对象的负无穷大的值。(4）POSITIVE INFINITY属性语法:value=Number.POSITIVE_INFINITYPOSITIVE INFINITY属性用于返回Number对象的正无穷大的值。\n3.Number对象的方法(1）toStringO方法(2）toLocaleStringO方法语法:NumberObject.toLocaleString()toLocaleString(方法可以把 Number对象转换为本地格式的字符串。(3） toFixed方法语法:NumberObject.toFixed(num)toFixed()方法将Number对象四舍五入为指定小数位数的数字，然后转换成字符串。(4） toExponential(方法语法:NumberObject.toExponential(num)toExponential()方法利用指数计数法计算Number对象的值，然后将其转换成字符串。(5）toPrecision()方法语法:NumberObject.toPrecision(num)参数说明:以支持更大的数值范围。如果省略该参数，将使用尽可能多的数字。返回值:数字的字符串表示，包含num个有效数字。如果num足够大，能够包括整数部分的所有点后有num-1位数字。必要时，该数字会被舍入或用0补足。toPrecision()方法将Number对象转换成字符串，num: 必选项。规定指数计数法中的小数位数，数字，那么返回的字符串将采用定点计数法;否则并根据不同的情况选择定点计数法或指数计数法。是0～20之间的值（包括О和20），有些实现可采用指数计数法，即小数点前有一位数字，小数点后有num-1位数字。必要时，该数字会被舍入或用0补足。\nBoolean对象（1 constructor属性(2)prototype属性\n（1）toStringO方法(2）valueOf()方法\n', 2, 388, 1, 0, 1, '2020-10-16 00:23:30', '2022-09-11 07:31:04'),
(1025, 1000, 'scp命令传文件', '<p>scp可以概括为：scp -P 端口 文件路径 用户名@主机地址:远程目录</p>\n<p>如果想拷贝本地文件到另外一台ssh终端，可以使用以下命令；</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">scp </span><span class=\"pun\">/</span><span class=\"pln\">www</span><span class=\"pun\">/</span><span class=\"pln\">q</span><span class=\"pun\">.</span><span class=\"pln\">txt root@qin500</span><span class=\"pun\">.</span><span class=\"pln\">com</span><span class=\"pun\">:</span><span class=\"str\">/www/</span></code></li></ol></pre><p>如果你反过来操作，把远程主机的文件拷贝到当前系统，操作命令以下；</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">scp  root@qin500</span><span class=\"pun\">.</span><span class=\"pln\">com</span><span class=\"pun\">:</span><span class=\"str\">/www/</span><span class=\"pln\">q</span><span class=\"pun\">.</span><span class=\"pln\">txt </span><span class=\"pun\">/</span><span class=\"pln\">www</span></code></li></ol></pre><p>如果你想拷贝文件夹以及文件夹内的所有文件,就加参数 -r 如果你的端口号不是22，那么需要在scp后加个 -P (区分大小写)端口号。建议加-C选项，因为这样可以启用SSH的压缩功能；传输速度更快，例如</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">scp </span><span class=\"pun\">-</span><span class=\"pln\">P </span><span class=\"lit\">1234</span><span class=\"pln\"> </span><span class=\"pun\">-</span><span class=\"pln\">C </span><span class=\"pun\">/</span><span class=\"pln\">www</span><span class=\"pun\">/</span><span class=\"pln\">q</span><span class=\"pun\">.</span><span class=\"pln\">txt root@qin500</span><span class=\"pun\">.</span><span class=\"pln\">com</span><span class=\"pun\">:</span><span class=\"str\">/www/</span></code></li></ol></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/045.jpg', 'scp可以概括为：scp -P 端口 文件路径 用户名@主机地址:远程目录\n如果想拷贝本地文件到另外一台ssh终端，可以使用以下命令；\nscp /www/q.txt root@qin500.com:/www/如果你反过来操作，把远程主机的文件拷贝到当前系统，操作命令以下；\nscp  root@qin500.com:/www/q.txt /www如果你想拷贝文件夹以及文件夹内的所有文件,就加参数 -r 如果你的端口号不是22，那么需要在scp后加个 -P (区分大小写)端口号。建议加-C选项，因为这样可以启用SSH的压缩功能；传输速度更快，例如\nscp -P 1234 -C /www/q.txt root@qin500.com:/www/', 2, 355, 1, 0, 1, '2020-10-16 15:14:48', '2022-09-11 07:31:04');
INSERT INTO `qin500_articles` (`id`, `uid`, `title`, `text`, `masterpic`, `pure`, `cid`, `views`, `isshow`, `zan`, `bdts`, `created_at`, `updated_at`) VALUES
(1026, 1000, 'javascript基础知识(二)', '<p>错误处理</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">try</span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">abc</span></code></li><li class=\"L2\"><code><span class=\"pun\">}</span><span class=\"kwd\">catch</span><span class=\"pun\">(</span><span class=\"pln\">exception </span><span class=\"pun\">){</span></code></li><li class=\"L3\"><code><span class=\"pln\">alert</span><span class=\"pun\">(</span><span class=\"pln\">exception</span><span class=\"pun\">.</span><span class=\"pln\">message</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pun\">}</span><span class=\"kwd\">finally</span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">alert</span><span class=\"pun\">(</span><span class=\"lit\">66</span><span class=\"pun\">)</span></code></li><li class=\"L6\"><code><span class=\"pun\">}</span></code></li></ol></pre><p>throw 手动抛出异常</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">        </span><span class=\"kwd\">try</span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">            </span><span class=\"kwd\">var</span><span class=\"pln\"> num</span><span class=\"pun\">=</span><span class=\"lit\">1</span><span class=\"pun\">/</span><span class=\"lit\">0</span></code></li><li class=\"L2\"><code><span class=\"pln\">            </span><span class=\"kwd\">if</span><span class=\"pun\">(</span><span class=\"pln\">num </span><span class=\"pun\">==</span><span class=\"pln\"> </span><span class=\"str\">\"Infinity\"</span><span class=\"pun\">){</span></code></li><li class=\"L3\"><code><span class=\"pln\">                </span><span class=\"kwd\">throw</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">Error</span><span class=\"pun\">(</span><span class=\"str\">\"被除数不能为0\"</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pln\">            </span><span class=\"pun\">}</span></code></li><li class=\"L5\"><code><span class=\"pln\">        </span><span class=\"pun\">}</span><span class=\"kwd\">catch</span><span class=\"pun\">(</span><span class=\"pln\">exception </span><span class=\"pun\">){</span></code></li><li class=\"L6\"><code><span class=\"pln\">                alert</span><span class=\"pun\">(</span><span class=\"pln\">exception</span><span class=\"pun\">.</span><span class=\"pln\">message</span><span class=\"pun\">)</span></code></li><li class=\"L7\"><code><span class=\"pln\">        </span><span class=\"pun\">}</span></code></li></ol></pre><p><code>编写程序，在JavaScript脚本中添加debugger 指令，自动启动JavaScript脚本调试器。</code></p>\n<h2 id=\"h2-u4E8Bu4EF6\"><a name=\"事件\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>事件</h2><p><img src=\"https://oss.qin500.com/user/1000/article/20201016162820_27.png\" alt=\"\"><br><img src=\"https://oss.qin500.com/user/1000/article/20201016162830_28.png\" alt=\"\"><br><img src=\"https://oss.qin500.com/user/1000/article/20201016162839_29.png\" alt=\"\">\n</p><p>9.2 DOM 事件模型<br>9.2.1事件流<br>DOM（文档对象模型）结构是一个树形结构，当一个HTML 元素产生一个事件时，该事件会在元素节点与根节点之间的路径传播，路径所经过的节点都会收到该事件，这个传播过程可称为 DOM事件流\n</p><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"tag\">&lt;img</span><span class=\"pln\"> </span><span class=\"atn\">src</span><span class=\"pun\">=</span><span class=\"atv\">\"https://oss.qin500.com/user/1000/article/20201016150746_24.png\"</span><span class=\"pln\"> </span><span class=\"atn\">name</span><span class=\"pun\">=</span><span class=\"atv\">\"bv\"</span><span class=\"pln\"> </span><span class=\"atn\">alt</span><span class=\"pun\">=</span><span class=\"atv\">\"\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"tag\">&lt;script&gt;</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"pln\">function handle(oEvent){</span></code></li><li class=\"L4\"><code><span class=\"pln\">   if(window.event) oEvent = window.event;</span></code></li><li class=\"L5\"><code><span class=\"pln\">var oTarget;</span></code></li><li class=\"L6\"><code><span class=\"pln\">if(oEvent.srcElement)</span></code></li><li class=\"L7\"><code><span class=\"pln\">oTarget = oEvent.srcElement;</span></code></li><li class=\"L8\"><code><span class=\"pln\">else</span></code></li><li class=\"L9\"><code><span class=\"pln\">oTarget = oEvent.target;</span></code></li><li class=\"L0\"><code><span class=\"pln\">alert(oTarget.tagName); </span></code></li><li class=\"L1\"><code><span class=\"pln\">}</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"pln\">window.onload = function(){</span></code></li><li class=\"L4\"><code><span class=\"pln\">   var olmg = document.getElementsByTagName(\"img\")[0]; </span></code></li><li class=\"L5\"><code><span class=\"pln\">   olmg.onclick = handle;</span></code></li><li class=\"L6\"><code><span class=\"pln\">}</span></code></li></ol></pre><p>9.2.4注册与移除事件监听器<br>1.IE下注册多个事件监听器与移除监听器方法<br>element.attachEvent(‘onclick’, observer);<br>E浏览器中的HTML 元素有一个attachEvent()方法允许外界注册该元素多个事件监听器。例如:<br>element.detachEvent(‘onclick’, observer);<br>要移除先前注册的事件的监听器，调用element 的detachEvent()方法即可，参数相同。例如:\n</p><ol>\n<li>DOM标准下注册多个事件监听器与移除监听器方法<br>实现 DOM标准的浏览器与I正浏览器中注册元素事件监听器方式有所不同，它通过元素的<br>addEventListener方法注册，该方法既支持注册冒泡型事件处理，又支持捕获型事件处理。<br>element.addEventListener(‘click’, observer, useCapture)<br>移除已注册的事件监听器调用element的removeEventListener()即可，参数不变。<br>element.removeEventListener(‘click’, observer,useCapture</li></ol>\n<h3 id=\"h3-document-\"><a name=\"document对象\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>document对象</h3><p><img src=\"https://oss.qin500.com/user/1000/article/20201016182334_30.png\" alt=\"\">\n</p><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">//动态创建一个控件</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"pun\">&lt;</span><span class=\"pln\">form action</span><span class=\"pun\">=</span><span class=\"str\">\"\"</span><span class=\"pln\"> name</span><span class=\"pun\">=</span><span class=\"str\">\"frm\"</span><span class=\"pun\">&gt;&lt;/</span><span class=\"pln\">form</span><span class=\"pun\">&gt;</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"pun\">&lt;</span><span class=\"pln\">input type</span><span class=\"pun\">=</span><span class=\"str\">\"text\"</span><span class=\"pln\"> name</span><span class=\"pun\">=</span><span class=\"str\">\"t1\"</span><span class=\"pun\">&gt;</span></code></li><li class=\"L3\"><code><span class=\"pln\">    </span><span class=\"str\">&lt;script&gt;</span></code></li><li class=\"L4\"><code><span class=\"pln\">        </span><span class=\"kwd\">var</span><span class=\"pln\"> txt </span><span class=\"pun\">=</span><span class=\"pln\"> document</span><span class=\"pun\">.</span><span class=\"pln\">createElement</span><span class=\"pun\">(</span><span class=\"str\">\"input\"</span><span class=\"pun\">)</span></code></li><li class=\"L5\"><code><span class=\"pln\">        txt</span><span class=\"pun\">.</span><span class=\"pln\">type </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">\"text\"</span></code></li><li class=\"L6\"><code><span class=\"pln\">        frm</span><span class=\"pun\">.</span><span class=\"pln\">appendChild</span><span class=\"pun\">(</span><span class=\"pln\">txt</span><span class=\"pun\">)</span></code></li><li class=\"L7\"><code></code></li><li class=\"L8\"><code><span class=\"pln\">        t1</span><span class=\"pun\">.</span><span class=\"pln\">value </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">\"666666666666666666666\"</span><span class=\"com\">//IE下有效</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"pun\">&lt;/</span><span class=\"pln\">script</span><span class=\"pun\">&gt;</span></code></li></ol></pre><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">       document</span><span class=\"pun\">.</span><span class=\"pln\">createDocumentFragment</span></code></li><li class=\"L1\"><code><span class=\"pln\">        </span><span class=\"kwd\">var</span><span class=\"pln\"> b</span><span class=\"pun\">=</span><span class=\"pln\">document</span><span class=\"pun\">.</span><span class=\"pln\">createElement</span><span class=\"pun\">(</span><span class=\"str\">\"b\"</span><span class=\"pun\">)</span></code></li><li class=\"L2\"><code><span class=\"pln\">        </span><span class=\"kwd\">var</span><span class=\"pln\"> txt</span><span class=\"pun\">=</span><span class=\"pln\">document</span><span class=\"pun\">.</span><span class=\"pln\">createTextNode</span><span class=\"pun\">(</span><span class=\"str\">\"文本节点\"</span><span class=\"pun\">)</span></code></li><li class=\"L3\"><code><span class=\"pln\">        b</span><span class=\"pun\">.</span><span class=\"pln\">appendChild</span><span class=\"pun\">(</span><span class=\"pln\">txt</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pln\">        document</span><span class=\"pun\">.</span><span class=\"pln\">body</span><span class=\"pun\">.</span><span class=\"pln\">appendChild</span><span class=\"pun\">(</span><span class=\"pln\">b</span><span class=\"pun\">)</span></code></li></ol></pre><p>createDocumentFragment()一次创建多个节点<br>避免了每次创建都渲染页面\n</p><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">var</span><span class=\"pln\"> ul </span><span class=\"pun\">=</span><span class=\"pln\"> document</span><span class=\"pun\">.</span><span class=\"pln\">getElementById</span><span class=\"pun\">(</span><span class=\"str\">\"ul\"</span><span class=\"pun\">);</span></code></li><li class=\"L1\"><code><span class=\"kwd\">var</span><span class=\"pln\"> fragment </span><span class=\"pun\">=</span><span class=\"pln\"> document</span><span class=\"pun\">.</span><span class=\"pln\">createDocumentFragment</span><span class=\"pun\">();</span></code></li><li class=\"L2\"><code><span class=\"kwd\">for</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"kwd\">var</span><span class=\"pln\"> i </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\"> i </span><span class=\"pun\">&lt;</span><span class=\"pln\"> </span><span class=\"lit\">20</span><span class=\"pun\">;</span><span class=\"pln\"> i</span><span class=\"pun\">++)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L3\"><code><span class=\"pln\">    </span><span class=\"kwd\">var</span><span class=\"pln\"> li </span><span class=\"pun\">=</span><span class=\"pln\"> document</span><span class=\"pun\">.</span><span class=\"pln\">createElement</span><span class=\"pun\">(</span><span class=\"str\">\"li\"</span><span class=\"pun\">);</span></code></li><li class=\"L4\"><code><span class=\"pln\">    li</span><span class=\"pun\">.</span><span class=\"pln\">innerHTML </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">\"index: \"</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> i</span><span class=\"pun\">;</span></code></li><li class=\"L5\"><code><span class=\"pln\">    fragment</span><span class=\"pun\">.</span><span class=\"pln\">appendChild</span><span class=\"pun\">(</span><span class=\"pln\">li</span><span class=\"pun\">);</span></code></li><li class=\"L6\"><code><span class=\"pun\">}</span></code></li><li class=\"L7\"><code><span class=\"pln\">ul</span><span class=\"pun\">.</span><span class=\"pln\">appendChild</span><span class=\"pun\">(</span><span class=\"pln\">fragment</span><span class=\"pun\">);</span></code></li></ol></pre><p>obj.insertBefore(new,ref)<br>插入节点通过使用insertBefore()方法来实现。该方法将新的子节点添加到当前节点的末尾。\n</p><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">        </span><span class=\"kwd\">function</span><span class=\"pln\"> crNode</span><span class=\"pun\">(</span><span class=\"pln\">str</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">            </span><span class=\"kwd\">var</span><span class=\"pln\"> newP </span><span class=\"pun\">=</span><span class=\"pln\"> document</span><span class=\"pun\">.</span><span class=\"pln\">createElement</span><span class=\"pun\">(</span><span class=\"str\">\"p\"</span><span class=\"pun\">);</span></code></li><li class=\"L2\"><code><span class=\"pln\">            </span><span class=\"kwd\">var</span><span class=\"pln\"> newTxt </span><span class=\"pun\">=</span><span class=\"pln\"> document</span><span class=\"pun\">.</span><span class=\"pln\">createTextNode</span><span class=\"pun\">(</span><span class=\"pln\">str</span><span class=\"pun\">);</span></code></li><li class=\"L3\"><code><span class=\"pln\">            newP</span><span class=\"pun\">.</span><span class=\"pln\">appendChild</span><span class=\"pun\">(</span><span class=\"pln\">newTxt</span><span class=\"pun\">);</span></code></li><li class=\"L4\"><code><span class=\"pln\">            </span><span class=\"kwd\">return</span><span class=\"pln\"> newP</span><span class=\"pun\">;</span></code></li><li class=\"L5\"><code><span class=\"pln\">        </span><span class=\"pun\">}</span></code></li><li class=\"L6\"><code><span class=\"pln\">        </span><span class=\"kwd\">function</span><span class=\"pln\"> insetNode</span><span class=\"pun\">(</span><span class=\"pln\">nodeld</span><span class=\"pun\">,</span><span class=\"pln\"> str</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L7\"><code><span class=\"pln\">            </span><span class=\"kwd\">var</span><span class=\"pln\"> node </span><span class=\"pun\">=</span><span class=\"pln\"> document</span><span class=\"pun\">.</span><span class=\"pln\">getElementByld</span><span class=\"pun\">(</span><span class=\"pln\">nodeld</span><span class=\"pun\">);</span></code></li><li class=\"L8\"><code><span class=\"pln\">            </span><span class=\"kwd\">var</span><span class=\"pln\"> newNode </span><span class=\"pun\">=</span><span class=\"pln\"> crNode</span><span class=\"pun\">(</span><span class=\"pln\">str</span><span class=\"pun\">);</span></code></li><li class=\"L9\"><code><span class=\"pln\">            </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">node</span><span class=\"pun\">.</span><span class=\"pln\">parentNode</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"com\">//判断是否拥有父节点</span></code></li><li class=\"L0\"><code><span class=\"pln\">                node</span><span class=\"pun\">.</span><span class=\"pln\">parentNode</span><span class=\"pun\">.</span><span class=\"pln\">insertBefore</span><span class=\"pun\">(</span><span class=\"pln\">newNode</span><span class=\"pun\">,</span><span class=\"pln\"> node</span><span class=\"pun\">);</span><span class=\"com\">//l插入节点</span></code></li><li class=\"L1\"><code><span class=\"pln\">            </span><span class=\"pun\">}</span></code></li><li class=\"L2\"><code><span class=\"pln\">        </span><span class=\"pun\">}</span></code></li></ol></pre><p>11.3.3复制节点<br>使用cloneNode()方法实现复制节点。<br>语法:<br>obj.cloneNode(deep)<br>参数说明:<br>其子节点。<br>deep:该参数是一个Boolean值，表示是否为深度复制。深度复制是将当前节点的所有子节点全部<br>复制，当值为true时表示深度复制;当值为false时表示简单复制，简单复制只复制当前节点，不复制<br><code>var newSelect=sel.cloneNode(bl);//复制节点</code></p>\n<p>1．删除节点<br>语法:<br>obj. removeChild(oldChild)<br>使用removeChild(方法可以实现删除节点。该方法用来删除一个子节点。\n</p><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">var</span><span class=\"pln\"> deleteN</span><span class=\"pun\">=</span><span class=\"pln\">document</span><span class=\"pun\">.</span><span class=\"pln\">getElementByld</span><span class=\"pun\">(</span><span class=\"str\">\'di\'</span><span class=\"pun\">);</span></code></li><li class=\"L1\"><code><span class=\"kwd\">if</span><span class=\"pun\">(</span><span class=\"pln\">deleteN</span><span class=\"pun\">.</span><span class=\"pln\">hasChildNodes</span><span class=\"pun\">())</span></code></li><li class=\"L2\"><code><span class=\"pln\">deleteN</span><span class=\"pun\">.</span><span class=\"pln\">removeChild</span><span class=\"pun\">(</span><span class=\"pln\">deleteN</span><span class=\"pun\">.</span><span class=\"pln\">lastChild</span><span class=\"pun\">);</span><span class=\"com\">//判断是否有子节点</span></code></li></ol></pre><p>2．替换节点<br>语法:<br>obj.replaceChild(new,old)<br>参数说明:<br>new:替换后的新节点。<br>old:需要被替换的旧节点。<br>使用replaceChild()方法实现替换节点。该方法用来将旧的节点替换成新的节点。\n</p><blockquote>\n<p>说明<br>虽然节点的元素属性可以修改，但元素不能直接修改。如果要进行修改，应当改变节点本身.\n</p></blockquote>\n<p>document.body.innerHTML<br>innerHTML<br>innerText<br>outText<br>outHTML\n</p><h3 id=\"h3-12-3-\"><a name=\"12.3窗口的打开与关闭\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>12.3窗口的打开与关闭</h3><p>12.3.1打开窗口<br>可以使用JavaScript 的open()方法打开浏览器对话框。作为一名程序开发人员，可以基于特定的条 件创建带有被装入其中的特定文档的新对话框，也可以指定新对话框的大小以及对话框中可用的选项， 并且可以为引用的对话框命名。<br>利用open)方法可以打开一个新的窗口，并在窗口中装载指定URL地址的网页。<br>语法:<br>windowVar=window.open(url,windowname[,location]);<br>参数说明:<br>windowVar:当前打开窗口的句柄。如果open()方法成功，则windowVar的值为一个window 对象的句柄，否则是一个空值。<br>url:目标窗口的 URL。如果 URL 是一个空字符串，则浏览器将打开一个空白窗口，允许用 write(方法创建动态HTML。<br>windowname:window对象的名称。该名称可以作为属性值在&lt;&gt;和</p><form>标记的target属性 中出现。如果指定的名称是一个已经存在的窗口名称，则返回对该窗口的引用，而不会再打开<br>一个新窗口。<br>location:对对话框属性进行设置的可选参数及说明如表12.3所示。\n<p>location的可选参数及说明</p>\n<table>\n<thead>\n<tr>\n<th>参数值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>top</td>\n<td>窗口顶部离开屏幕顶部的像素数</td>\n</tr>\n<tr>\n<td>left</td>\n<td>窗口左端离开屏幕左端的像素数</td>\n</tr>\n<tr>\n<td>width</td>\n<td>对话框的宽度</td>\n</tr>\n<tr>\n<td>height</td>\n<td>对话框的高度</td>\n</tr>\n<tr>\n<td>scrollbars</td>\n<td>是否显示滚动条</td>\n</tr>\n<tr>\n<td>resizable</td>\n<td>设定对话框大小是否固定</td>\n</tr>\n<tr>\n<td>toolbar</td>\n<td>浏览器工具条，包括后退及前进按钮等</td>\n</tr>\n<tr>\n<td>menubar</td>\n<td>菜单条，一般包括文件、编辑及其他一些条目</td>\n</tr>\n<tr>\n<td>location</td>\n<td>定位区，也叫地址栏，是可以输入URL的浏览器文本区</td>\n</tr>\n<tr>\n<td>direction</td>\n<td>更新信息的按钮</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">//设置打印的时候页面为空</span></code></li><li class=\"L1\"><code><span class=\"lit\">@media</span><span class=\"pln\"> </span><span class=\"typ\">Print</span><span class=\"pln\">    </span></code></li><li class=\"L2\"><code><span class=\"pun\">{</span></code></li><li class=\"L3\"><code><span class=\"pln\">BODY </span><span class=\"pun\">{</span></code></li><li class=\"L4\"><code><span class=\"pln\">    DISPLAY</span><span class=\"pun\">:</span><span class=\"pln\"> none</span></code></li><li class=\"L5\"><code><span class=\"pun\">}</span></code></li><li class=\"L6\"><code><span class=\"pln\">    </span><span class=\"pun\">}</span></code></li><li class=\"L7\"><code><span class=\"pun\">&lt;/</span><span class=\"pln\">style</span><span class=\"pun\">&gt;</span></code></li></ol></pre></form>', 'https://oss.qin500.com/user/1000/article/20201016162820_27.png', '错误处理\ntry{abc}catch(exception ){alert(exception.message)}finally{alert(66)}throw 手动抛出异常\n        try{            var num=1/0            if(num == \"Infinity\"){                throw new Error(\"被除数不能为0\")            }        }catch(exception ){                alert(exception.message)        }编写程序，在JavaScript脚本中添加debugger 指令，自动启动JavaScript脚本调试器。\n事件\n9.2 DOM 事件模型9.2.1事件流DOM（文档对象模型）结构是一个树形结构，当一个HTML 元素产生一个事件时，该事件会在元素节点与根节点之间的路径传播，路径所经过的节点都会收到该事件，这个传播过程可称为 DOM事件流\n&lt;img src=\"https://oss.qin500.com/user/1000/article/20201016150746_24.png\" name=\"bv\" alt=\"\"&gt;    &lt;script&gt;function handle(oEvent){   if(window.event) oEvent = window.event;var oTarget;if(oEvent.srcElement)oTarget = oEvent.srcElement;elseoTarget = oEvent.target;alert(oTarget.tagName); }window.onload = function(){   var olmg = document.getElementsByTagName(\"img\")[0];    olmg.onclick = handle;}9.2.4注册与移除事件监听器1.IE下注册多个事件监听器与移除监听器方法element.attachEvent(‘onclick’, observer);E浏览器中的HTML 元素有一个attachEvent()方法允许外界注册该元素多个事件监听器。例如:element.detachEvent(‘onclick’, observer);要移除先前注册的事件的监听器，调用element 的detachEvent()方法即可，参数相同。例如:\n\nDOM标准下注册多个事件监听器与移除监听器方法实现 DOM标准的浏览器与I正浏览器中注册元素事件监听器方式有所不同，它通过元素的addEventListener方法注册，该方法既支持注册冒泡型事件处理，又支持捕获型事件处理。element.addEventListener(‘click’, observer, useCapture)移除已注册的事件监听器调用element的removeEventListener()即可，参数不变。element.removeEventListener(‘click’, observer,useCapture\ndocument对象\n//动态创建一个控件    &lt;form action=\"\" name=\"frm\"&gt;&lt;/form&gt;    &lt;input type=\"text\" name=\"t1\"&gt;    &lt;script&gt;        var txt = document.createElement(\"input\")        txt.type = \"text\"        frm.appendChild(txt)        t1.value = \"666666666666666666666\"//IE下有效    &lt;/script&gt;       document.createDocumentFragment        var b=document.createElement(\"b\")        var txt=document.createTextNode(\"文本节点\")        b.appendChild(txt)        document.body.appendChild(b)createDocumentFragment()一次创建多个节点避免了每次创建都渲染页面\nvar ul = document.getElementById(\"ul\");var fragment = document.createDocumentFragment();for (var i = 0; i &lt; 20; i++) {    var li = document.createElement(\"li\");    li.innerHTML = \"index: \" + i;    fragment.appendChild(li);}ul.appendChild(fragment);obj.insertBefore(new,ref)插入节点通过使用insertBefore()方法来实现。该方法将新的子节点添加到当前节点的末尾。\n        function crNode(str) {            var newP = document.createElement(\"p\");            var newTxt = document.createTextNode(str);            newP.appendChild(newTxt);            return newP;        }        function insetNode(nodeld, str) {            var node = document.getElementByld(nodeld);            var newNode = crNode(str);            if (node.parentNode) {//判断是否拥有父节点                node.parentNode.insertBefore(newNode, node);//l插入节点            }        }11.3.3复制节点使用cloneNode()方法实现复制节点。语法:obj.cloneNode(deep)参数说明:其子节点。deep:该参数是一个Boolean值，表示是否为深度复制。深度复制是将当前节点的所有子节点全部复制，当值为true时表示深度复制;当值为false时表示简单复制，简单复制只复制当前节点，不复制var newSelect=sel.cloneNode(bl);//复制节点\n1．删除节点语法:obj. removeChild(oldChild)使用removeChild(方法可以实现删除节点。该方法用来删除一个子节点。\nvar deleteN=document.getElementByld(\'di\');if(deleteN.hasChildNodes())deleteN.removeChild(deleteN.lastChild);//判断是否有子节点2．替换节点语法:obj.replaceChild(new,old)参数说明:new:替换后的新节点。old:需要被替换的旧节点。使用replaceChild()方法实现替换节点。该方法用来将旧的节点替换成新的节点。\n\n说明虽然节点的元素属性可以修改，但元素不能直接修改。如果要进行修改，应当改变节点本身.\n\ndocument.body.innerHTMLinnerHTMLinnerTextoutTextoutHTML\n12.3窗口的打开与关闭12.3.1打开窗口可以使用JavaScript 的open()方法打开浏览器对话框。作为一名程序开发人员，可以基于特定的条 件创建带有被装入其中的特定文档的新对话框，也可以指定新对话框的大小以及对话框中可用的选项， 并且可以为引用的对话框命名。利用open)方法可以打开一个新的窗口，并在窗口中装载指定URL地址的网页。语法:windowVar=window.open(url,windowname[,location]);参数说明:windowVar:当前打开窗口的句柄。如果open()方法成功，则windowVar的值为一个window 对象的句柄，否则是一个空值。url:目标窗口的 URL。如果 URL 是一个空字符串，则浏览器将打开一个空白窗口，允许用 write(方法创建动态HTML。windowname:window对象的名称。该名称可以作为属性值在&lt;&gt;和标记的target属性 中出现。如果指定的名称是一个已经存在的窗口名称，则返回对该窗口的引用，而不会再打开一个新窗口。location:对对话框属性进行设置的可选参数及说明如表12.3所示。\nlocation的可选参数及说明\n\n\n\n参数值\n说明\n\n\n\n\ntop\n窗口顶部离开屏幕顶部的像素数\n\n\nleft\n窗口左端离开屏幕左端的像素数\n\n\nwidth\n对话框的宽度\n\n\nheight\n对话框的高度\n\n\nscrollbars\n是否显示滚动条\n\n\nresizable\n设定对话框大小是否固定\n\n\ntoolbar\n浏览器工具条，包括后退及前进按钮等\n\n\nmenubar\n菜单条，一般包括文件、编辑及其他一些条目\n\n\nlocation\n定位区，也叫地址栏，是可以输入URL的浏览器文本区\n\n\ndirection\n更新信息的按钮\n\n\n\n//设置打印的时候页面为空@media Print    {BODY {    DISPLAY: none}    }&lt;/style&gt;', 1, 269, 0, 0, 0, '2020-10-17 01:38:15', '2022-09-11 18:01:23'),
(1027, 1000, 'js坐标系', '<p>clientX =  从可视区域开始到鼠标位置<br>clientY: 96<br>clientWidth  = 当前盒子的宽度-边框的宽度\n</p><p>pageX: 267<br>pageY: 134\n</p><p>screenX: 347<br>screenY: 203\n</p><p>layerX: 25  以父元素边框的开始到鼠标位置,    父元素边框 +<br>layerY: 16\n</p><p>offsetX: 24      相对于事件源X坐标<br>offsetY: 16\n</p><p>x: 267<br>y: 96\n</p><p>offsetLeft =  父元素padding宽度<br>offsetWidth  当前盒子的边框+border+padding<br>offsetParent 获取父元素<br><img src=\"https://oss.qin500.com/user/1000/article/20201017223124_31.png\" alt=\"\">\n</p>', 'https://oss.qin500.com/user/1000/article/20201017223124_31.png', 'clientX =  从可视区域开始到鼠标位置clientY: 96clientWidth  = 当前盒子的宽度-边框的宽度\npageX: 267pageY: 134\nscreenX: 347screenY: 203\nlayerX: 25  以父元素边框的开始到鼠标位置,    父元素边框 +layerY: 16\noffsetX: 24      相对于事件源X坐标offsetY: 16\nx: 267y: 96\noffsetLeft =  父元素padding宽度offsetWidth  当前盒子的边框+border+paddingoffsetParent 获取父元素\n', 1, 235, 1, 0, 1, '2020-10-18 02:31:31', '2022-09-08 03:32:11'),
(1028, 1000, 'php抽象多态的应用', '<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pun\">&lt;?</span><span class=\"pln\">php</span></code></li><li class=\"L1\"><code></code></li><li class=\"L2\"><code><span class=\"com\">//多态</span></code></li><li class=\"L3\"><code><span class=\"com\">//接口中定义的方法必须全部实现</span></code></li><li class=\"L4\"><code><span class=\"kwd\">interface</span><span class=\"pln\"> USB</span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">    </span><span class=\"kwd\">function</span><span class=\"pln\"> load</span><span class=\"pun\">();</span></code></li><li class=\"L6\"><code><span class=\"pln\">    </span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"kwd\">using</span><span class=\"pun\">();</span></code></li><li class=\"L7\"><code><span class=\"pln\">    </span><span class=\"kwd\">function</span><span class=\"pln\"> uninstall</span><span class=\"pun\">();</span></code></li><li class=\"L8\"><code><span class=\"pun\">}</span></code></li><li class=\"L9\"><code></code></li><li class=\"L0\"><code><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Keyboard</span><span class=\"pln\"> </span><span class=\"kwd\">implements</span><span class=\"pln\"> USB</span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> load</span><span class=\"pun\">()</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"pun\">{</span></code></li><li class=\"L3\"><code><span class=\"pln\">        </span><span class=\"com\">// TODO: Implement cd() method.</span></code></li><li class=\"L4\"><code><span class=\"pln\">        echo </span><span class=\"str\">\"键盘加载&lt;br&gt;\"</span><span class=\"pun\">;</span></code></li><li class=\"L5\"><code><span class=\"pln\">    </span><span class=\"pun\">}</span></code></li><li class=\"L6\"><code></code></li><li class=\"L7\"><code><span class=\"pln\">    </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"kwd\">using</span><span class=\"pun\">()</span></code></li><li class=\"L8\"><code><span class=\"pln\">    </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">        </span><span class=\"com\">// TODO: Implement using() method.</span></code></li><li class=\"L0\"><code><span class=\"pln\">        echo </span><span class=\"str\">\"键盘使用中&lt;br&gt;\"</span><span class=\"pun\">;</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"pun\">}</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"pln\">    </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> uninstall</span><span class=\"pun\">()</span></code></li><li class=\"L4\"><code><span class=\"pln\">    </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">        </span><span class=\"com\">// TODO: Implement uninstall() method.</span></code></li><li class=\"L6\"><code><span class=\"pln\">        echo  </span><span class=\"str\">\"键盘卸载中&lt;br&gt;\"</span><span class=\"pun\">;</span></code></li><li class=\"L7\"><code><span class=\"pln\">    </span><span class=\"pun\">}</span></code></li><li class=\"L8\"><code><span class=\"pun\">}</span></code></li><li class=\"L9\"><code><span class=\"kwd\">class</span><span class=\"pln\"> mouse </span><span class=\"kwd\">implements</span><span class=\"pln\"> USB</span><span class=\"pun\">{</span></code></li><li class=\"L0\"><code><span class=\"pln\">    </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> load</span><span class=\"pun\">()</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"pun\">{</span></code></li><li class=\"L2\"><code><span class=\"pln\">        </span><span class=\"com\">// TODO: Implement cd() method.</span></code></li><li class=\"L3\"><code><span class=\"pln\">        echo </span><span class=\"str\">\"鼠标加载&lt;br&gt;\"</span><span class=\"pun\">;</span></code></li><li class=\"L4\"><code><span class=\"pln\">    </span><span class=\"pun\">}</span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"pln\">    </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"kwd\">using</span><span class=\"pun\">()</span></code></li><li class=\"L7\"><code><span class=\"pln\">    </span><span class=\"pun\">{</span></code></li><li class=\"L8\"><code><span class=\"pln\">        </span><span class=\"com\">// TODO: Implement using() method.</span></code></li><li class=\"L9\"><code><span class=\"pln\">        echo </span><span class=\"str\">\"鼠标使用中&lt;br&gt;\"</span><span class=\"pun\">;</span></code></li><li class=\"L0\"><code><span class=\"pln\">    </span><span class=\"pun\">}</span></code></li><li class=\"L1\"><code></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> uninstall</span><span class=\"pun\">()</span></code></li><li class=\"L3\"><code><span class=\"pln\">    </span><span class=\"pun\">{</span></code></li><li class=\"L4\"><code><span class=\"pln\">        </span><span class=\"com\">// TODO: Implement uninstall() method.</span></code></li><li class=\"L5\"><code><span class=\"pln\">        echo  </span><span class=\"str\">\"鼠标卸载中&lt;br&gt;\"</span><span class=\"pun\">;</span></code></li><li class=\"L6\"><code><span class=\"pln\">    </span><span class=\"pun\">}</span></code></li><li class=\"L7\"><code><span class=\"pun\">}</span></code></li><li class=\"L8\"><code><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Computer</span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"kwd\">function</span><span class=\"pln\"> load</span><span class=\"pun\">(</span><span class=\"pln\">USB $usb</span><span class=\"pun\">){</span></code></li><li class=\"L0\"><code><span class=\"pln\">        $usb</span><span class=\"pun\">-&gt;</span><span class=\"pln\">load</span><span class=\"pun\">();</span></code></li><li class=\"L1\"><code><span class=\"pln\">        $usb</span><span class=\"pun\">-&gt;</span><span class=\"kwd\">using</span><span class=\"pun\">();</span></code></li><li class=\"L2\"><code><span class=\"pln\">        $usb</span><span class=\"pun\">-&gt;</span><span class=\"pln\">uninstall</span><span class=\"pun\">();</span></code></li><li class=\"L3\"><code><span class=\"pln\">    </span><span class=\"pun\">}</span></code></li><li class=\"L4\"><code><span class=\"pun\">}</span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"com\">//$a=new Keyup();</span></code></li><li class=\"L7\"><code><span class=\"com\">//$a-&gt;load();</span></code></li><li class=\"L8\"><code></code></li><li class=\"L9\"><code><span class=\"pln\">$b</span><span class=\"pun\">=</span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">Computer</span><span class=\"pun\">();</span></code></li><li class=\"L0\"><code><span class=\"pln\">$b</span><span class=\"pun\">-&gt;</span><span class=\"pln\">load</span><span class=\"pun\">(</span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">Keyboard</span><span class=\"pun\">());</span></code></li><li class=\"L1\"><code><span class=\"pln\">echo </span><span class=\"str\">\"&lt;hr/&gt;\"</span><span class=\"pun\">;</span></code></li><li class=\"L2\"><code><span class=\"pln\">$c</span><span class=\"pun\">=</span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">Computer</span><span class=\"pun\">();</span></code></li><li class=\"L3\"><code><span class=\"pln\">$c</span><span class=\"pun\">-&gt;</span><span class=\"pln\">load</span><span class=\"pun\">(</span><span class=\"kwd\">new</span><span class=\"pln\"> mouse</span><span class=\"pun\">());</span></code></li></ol></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/015.jpg', '&lt;?php//多态//接口中定义的方法必须全部实现interface USB{    function load();    function using();    function uninstall();}class Keyboard implements USB{    public function load()    {        // TODO: Implement cd() method.        echo \"键盘加载&lt;br&gt;\";    }    public function using()    {        // TODO: Implement using() method.        echo \"键盘使用中&lt;br&gt;\";    }    public function uninstall()    {        // TODO: Implement uninstall() method.        echo  \"键盘卸载中&lt;br&gt;\";    }}class mouse implements USB{    public function load()    {        // TODO: Implement cd() method.        echo \"鼠标加载&lt;br&gt;\";    }    public function using()    {        // TODO: Implement using() method.        echo \"鼠标使用中&lt;br&gt;\";    }    public function uninstall()    {        // TODO: Implement uninstall() method.        echo  \"鼠标卸载中&lt;br&gt;\";    }}class Computer{    function load(USB $usb){        $usb-&gt;load();        $usb-&gt;using();        $usb-&gt;uninstall();    }}//$a=new Keyup();//$a-&gt;load();$b=new Computer();$b-&gt;load(new Keyboard());echo \"&lt;hr/&gt;\";$c=new Computer();$c-&gt;load(new mouse());', 1, 252, 1, 0, 1, '2020-10-25 20:24:14', '2022-09-09 20:35:42'),
(1029, 1000, '正则表达式', '<p>preg_match()<br>preg_match_all()<br>preg_replace()<br>preg_split()<br>preg_grep()<br>preg_replace_callback()\n</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/047.jpg', 'preg_match()preg_match_all()preg_replace()preg_split()preg_grep()preg_replace_callback()\n', 1, 217, 1, 0, 1, '2020-10-27 02:23:29', '2022-09-10 03:28:56'),
(1030, 1000, 'php日期函数', '<p>mktime()将日期时间转换为时间戳<br>time()当前时间戳<br>getdate()返回一个时间戳关联数组\n</p><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">print_r</span><span class=\"pun\">(</span><span class=\"pln\">getdate</span><span class=\"pun\">())</span><span class=\"pln\"> </span><span class=\"pun\">;</span></code></li><li class=\"L1\"><code><span class=\"com\">//返回</span></code></li><li class=\"L2\"><code><span class=\"typ\">Array</span></code></li><li class=\"L3\"><code><span class=\"pun\">(</span></code></li><li class=\"L4\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"pln\">seconds</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">33</span></code></li><li class=\"L5\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"pln\">minutes</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">24</span></code></li><li class=\"L6\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"pln\">hours</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">11</span></code></li><li class=\"L7\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"pln\">mday</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">28</span></code></li><li class=\"L8\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"pln\">wday</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">3</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"pln\">mon</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">10</span></code></li><li class=\"L0\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"pln\">year</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">2020</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"pln\">yday</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">301</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"pln\">weekday</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"typ\">Wednesday</span></code></li><li class=\"L3\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"pln\">month</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"typ\">October</span></code></li><li class=\"L4\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"lit\">0</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">1603855473</span></code></li><li class=\"L5\"><code><span class=\"pun\">)</span></code></li></ol></pre><p>gettimeofday()返回当前时间：</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pun\">&lt;?</span><span class=\"pln\">php</span></code></li><li class=\"L1\"><code><span class=\"com\">// 输出 gettimeofday() 返回的数组</span></code></li><li class=\"L2\"><code><span class=\"pln\">print_r</span><span class=\"pun\">(</span><span class=\"pln\">gettimeofday</span><span class=\"pun\">());</span></code></li><li class=\"L3\"><code></code></li><li class=\"L4\"><code><span class=\"com\">// 输出 gettimeofday() 返回的浮点数</span></code></li><li class=\"L5\"><code><span class=\"pln\">echo gettimeofday</span><span class=\"pun\">(</span><span class=\"kwd\">true</span><span class=\"pun\">);</span></code></li><li class=\"L6\"><code><span class=\"pun\">?&gt;</span></code></li></ol></pre><p>date()时间格式化输出函数<br>date_default_timezone_get()//获取默认时区<br>date_default_timezone_set()//设置默认时区<br>microtime — 返回当前 Unix 时间戳和微秒数\n</p><p>microtime(get_as_float);</p>\n<blockquote>\n<p>默认返回字符串 “microsec sec” ，其中 sec 为自 Unix 纪元（0: 00  :00 January 1, 1970 GMT）起的秒数，microsec 为微秒部分。如果 get_as_float 参数设置为 TRUE，则返回一个浮点数，表示自 Unix 纪元起精确到微秒的以秒为单位的当前时间。</p>\n</blockquote>', 'https://wpcdn.qin500.com/QIN500/SUCAI/051.jpg', 'mktime()将日期时间转换为时间戳time()当前时间戳getdate()返回一个时间戳关联数组\nprint_r(getdate()) ;//返回Array(    [seconds] =&gt; 33    [minutes] =&gt; 24    [hours] =&gt; 11    [mday] =&gt; 28    [wday] =&gt; 3    [mon] =&gt; 10    [year] =&gt; 2020    [yday] =&gt; 301    [weekday] =&gt; Wednesday    [month] =&gt; October    [0] =&gt; 1603855473)gettimeofday()返回当前时间：\n&lt;?php// 输出 gettimeofday() 返回的数组print_r(gettimeofday());// 输出 gettimeofday() 返回的浮点数echo gettimeofday(true);?&gt;date()时间格式化输出函数date_default_timezone_get()//获取默认时区date_default_timezone_set()//设置默认时区microtime — 返回当前 Unix 时间戳和微秒数\nmicrotime(get_as_float);\n\n默认返回字符串 “microsec sec” ，其中 sec 为自 Unix 纪元（0: 00  :00 January 1, 1970 GMT）起的秒数，microsec 为微秒部分。如果 get_as_float 参数设置为 TRUE，则返回一个浮点数，表示自 Unix 纪元起精确到微秒的以秒为单位的当前时间。\n', 1, 223, 1, 0, 1, '2020-10-28 15:30:44', '2022-09-11 17:40:35'),
(1031, 1000, 'php常用数学函数', '<p>abs()    绝对值。<br>acos()    反余弦。<br>acosh()    反双曲余弦。<br>asin()    反正弦。<br>asinh()    反双曲正弦。<br>atan()    反正切。<br>atan2()    两个参数的反正切。<br>atanh()    反双曲正切。<br>cos()    余弦。<br>cosh()    双曲余弦。<br>decbin()    把十进制转换为二进制。<br>dechex()    把十进制转换为十六进制。<br>decoct()    把十进制转换为八进制。<br>deg2rad()    将角度转换为弧度。<br>max()    返回最大值。<br>min()    返回最小值。<br>pi()    返回圆周率的值。<br>rand()    返回随机整数。<br>sin()    正弦。<br>sinh()    双曲正弦。<br>sqrt()    平方根。\n</p><p>ceil()    向上舍入为最接近的整数。<br>floor()    向下舍入为最接近的整数。<br>round()    对浮点数进行四舍五入。<br>intval() — 获取变量的整数值<br>number_format — 以千位分隔符方式格式化一个数字\n</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/040.jpg', 'abs()    绝对值。acos()    反余弦。acosh()    反双曲余弦。asin()    反正弦。asinh()    反双曲正弦。atan()    反正切。atan2()    两个参数的反正切。atanh()    反双曲正切。cos()    余弦。cosh()    双曲余弦。decbin()    把十进制转换为二进制。dechex()    把十进制转换为十六进制。decoct()    把十进制转换为八进制。deg2rad()    将角度转换为弧度。max()    返回最大值。min()    返回最小值。pi()    返回圆周率的值。rand()    返回随机整数。sin()    正弦。sinh()    双曲正弦。sqrt()    平方根。\nceil()    向上舍入为最接近的整数。floor()    向下舍入为最接近的整数。round()    对浮点数进行四舍五入。intval() — 获取变量的整数值number_format — 以千位分隔符方式格式化一个数字\n', 1, 212, 1, 0, 1, '2020-10-28 16:05:04', '2022-09-10 08:47:04');
INSERT INTO `qin500_articles` (`id`, `uid`, `title`, `text`, `masterpic`, `pure`, `cid`, `views`, `isshow`, `zan`, `bdts`, `created_at`, `updated_at`) VALUES
(1032, 1000, 'sql语句数据库操作', '<p>create database books;//创建数据库books<br>drop database books;//删除数据库books<br>show databases;//显示所有数据库<br>use books;//选择books数据库<br>select database();//查看当前使用的是哪个数据库\n</p><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">//创建数据表</span></code></li><li class=\"L1\"><code><span class=\"pln\">create table book </span><span class=\"pun\">(</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"pun\">-&gt;</span><span class=\"pln\"> id INT NOT NULL AUTO_INCREMENT</span><span class=\"pun\">,</span></code></li><li class=\"L3\"><code><span class=\"pln\">    </span><span class=\"pun\">-&gt;</span><span class=\"pln\"> bookname varchar</span><span class=\"pun\">(</span><span class=\"lit\">50</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"kwd\">not</span><span class=\"pln\"> </span><span class=\"kwd\">null</span><span class=\"pln\"> </span><span class=\"kwd\">default</span><span class=\"pln\"> </span><span class=\"str\">\"\"</span><span class=\"pun\">,</span></code></li><li class=\"L4\"><code><span class=\"pln\">    </span><span class=\"pun\">-&gt;</span><span class=\"pln\"> publisher varchar</span><span class=\"pun\">(</span><span class=\"lit\">80</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"kwd\">not</span><span class=\"pln\"> </span><span class=\"kwd\">null</span><span class=\"pln\"> </span><span class=\"kwd\">default</span><span class=\"pln\"> </span><span class=\"str\">\"\"</span><span class=\"pun\">,</span></code></li><li class=\"L5\"><code><span class=\"pln\">    </span><span class=\"pun\">-&gt;</span><span class=\"pln\"> author varchar</span><span class=\"pun\">(</span><span class=\"lit\">30</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"kwd\">not</span><span class=\"pln\"> </span><span class=\"kwd\">null</span><span class=\"pln\"> </span><span class=\"kwd\">default</span><span class=\"pln\"> </span><span class=\"str\">\'\'</span><span class=\"pun\">,</span></code></li><li class=\"L6\"><code><span class=\"pln\">    </span><span class=\"pun\">-&gt;</span><span class=\"pln\"> price </span><span class=\"kwd\">double</span><span class=\"pln\"> </span><span class=\"kwd\">not</span><span class=\"pln\"> </span><span class=\"kwd\">null</span><span class=\"pln\"> </span><span class=\"kwd\">default</span><span class=\"pln\"> </span><span class=\"lit\">0.00</span><span class=\"pln\"> </span><span class=\"pun\">,</span></code></li><li class=\"L7\"><code><span class=\"pln\">    </span><span class=\"pun\">-&gt;</span><span class=\"pln\"> detail text </span><span class=\"pun\">,</span></code></li><li class=\"L8\"><code><span class=\"pln\">    </span><span class=\"pun\">-&gt;</span><span class=\"pln\"> publishdate date</span><span class=\"pun\">,</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"pun\">-&gt;</span><span class=\"pln\"> primary key</span><span class=\"pun\">(</span><span class=\"pln\">id</span><span class=\"pun\">),</span></code></li><li class=\"L0\"><code><span class=\"pln\">    </span><span class=\"pun\">-&gt;</span><span class=\"pln\"> index book_bookname</span><span class=\"pun\">(</span><span class=\"pln\">bookname</span><span class=\"pun\">),</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"pun\">-&gt;</span><span class=\"pln\"> index bookk_price</span><span class=\"pun\">(</span><span class=\"pln\">price</span><span class=\"pun\">)</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"pun\">-&gt;</span><span class=\"pln\"> </span><span class=\"pun\">);</span></code></li></ol></pre><p>desc book;//查看表结构</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">//将表字段publishdatexiu\'g修改为pdate并且修改字段类型为int</span></code></li><li class=\"L1\"><code><span class=\"pln\">alter table book change publishdate pdate </span><span class=\"kwd\">int</span><span class=\"pun\">;</span></code></li></ol></pre><p>drop table book;//删除book表</p>\n<p>插入</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">insert </span><span class=\"kwd\">into</span><span class=\"pln\"> book</span><span class=\"pun\">(</span><span class=\"str\">`bookname`</span><span class=\"pun\">,</span><span class=\"str\">`publisher`</span><span class=\"pun\">,</span><span class=\"str\">`author`</span><span class=\"pun\">)</span><span class=\"pln\">values</span><span class=\"pun\">(</span><span class=\"str\">\'传奇故事\'</span><span class=\"pun\">,</span><span class=\"str\">\'年华流失\'</span><span class=\"pun\">,</span><span class=\"str\">\'我\'</span><span class=\"pun\">);</span></code></li></ol></pre><p>更新</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">update book </span><span class=\"kwd\">set</span><span class=\"pln\"> </span><span class=\"str\">`author`</span><span class=\"pun\">=</span><span class=\"str\">\'nianhua\'</span><span class=\"pln\"> </span><span class=\"kwd\">where</span><span class=\"pln\"> id</span><span class=\"pun\">=</span><span class=\"lit\">1</span><span class=\"pun\">;</span></code></li><li class=\"L1\"><code></code></li><li class=\"L2\"><code><span class=\"pln\">update book </span><span class=\"kwd\">set</span><span class=\"pln\"> </span><span class=\"str\">`author`</span><span class=\"pun\">=</span><span class=\"str\">\'kexue\'</span><span class=\"pun\">,</span><span class=\"str\">`bookname`</span><span class=\"pun\">=</span><span class=\"str\">\'自律\'</span><span class=\"pln\"> </span><span class=\"kwd\">where</span><span class=\"pln\"> id</span><span class=\"pun\">=</span><span class=\"lit\">1</span><span class=\"pun\">;</span></code></li></ol></pre><p>删除</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">delete</span><span class=\"pln\"> </span><span class=\"kwd\">from</span><span class=\"pln\"> book </span><span class=\"kwd\">where</span><span class=\"pln\"> id</span><span class=\"pun\">=</span><span class=\"str\">\'1\'</span><span class=\"pun\">;</span></code></li></ol></pre><p>截断表,清空表,自增id恢复为1</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">truncate table book</span><span class=\"pun\">;</span></code></li></ol></pre><p>查询表索引</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">show index </span><span class=\"kwd\">from</span><span class=\"pln\"> book</span><span class=\"pun\">;</span></code></li></ol></pre><h3 id=\"h3-u8868u4FEEu6539\"><a name=\"表修改\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>表修改</h3><p>重命名</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">alter table book rename </span><span class=\"kwd\">as</span><span class=\"pln\"> books</span><span class=\"pun\">;</span></code></li></ol></pre><p>添加字段</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\"> alter table books add email varchar</span><span class=\"pun\">(</span><span class=\"lit\">30</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"kwd\">not</span><span class=\"pln\"> </span><span class=\"kwd\">null</span><span class=\"pln\"> </span><span class=\"pun\">;</span></code></li></ol></pre><p> 指定默认值并添加到author后面</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\"> alter table books add name </span><span class=\"kwd\">double</span><span class=\"pln\"> </span><span class=\"kwd\">not</span><span class=\"pln\"> </span><span class=\"kwd\">null</span><span class=\"pln\"> </span><span class=\"kwd\">default</span><span class=\"pln\"> </span><span class=\"str\">\"0.00\"</span><span class=\"pln\"> after author</span><span class=\"pun\">;</span></code></li><li class=\"L1\"><code><span class=\"pln\"> alter table books add name </span><span class=\"kwd\">double</span><span class=\"pln\"> </span><span class=\"kwd\">not</span><span class=\"pln\"> </span><span class=\"kwd\">null</span><span class=\"pln\"> </span><span class=\"kwd\">default</span><span class=\"pln\"> </span><span class=\"str\">\"0.00\"</span><span class=\"pln\"> first</span><span class=\"pun\">;</span></code></li></ol></pre><p> 更改原有字段类型</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\"> </span><span class=\"com\">//把一个INTEGER列的名称从a变更到b</span></code></li><li class=\"L1\"><code><span class=\"pln\"> ALTER TABLE t1 CHANGE a b INTEGER</span><span class=\"pun\">;</span></code></li><li class=\"L2\"><code><span class=\"pln\"> </span><span class=\"com\">//如果您想要更改列的类型而不是名称， CHANGE语法仍然要求旧的和新的列名称，即使旧的和新的列名称是一样的。</span></code></li><li class=\"L3\"><code><span class=\"pln\"> ALTER TABLE t1 CHANGE b b BIGINT NOT NULL</span><span class=\"pun\">;</span></code></li><li class=\"L4\"><code></code></li><li class=\"L5\"><code><span class=\"pln\"> </span><span class=\"com\">//使用MODIFY来改变列的类型，此时不需要重命名</span></code></li><li class=\"L6\"><code><span class=\"pln\">  ALTER TABLE t1 MODIFY b BIGINT NOT NULL</span><span class=\"pun\">;</span></code></li></ol></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/007.jpg', 'create database books;//创建数据库booksdrop database books;//删除数据库booksshow databases;//显示所有数据库use books;//选择books数据库select database();//查看当前使用的是哪个数据库\n//创建数据表create table book (    -&gt; id INT NOT NULL AUTO_INCREMENT,    -&gt; bookname varchar(50) not null default \"\",    -&gt; publisher varchar(80) not null default \"\",    -&gt; author varchar(30) not null default \'\',    -&gt; price double not null default 0.00 ,    -&gt; detail text ,    -&gt; publishdate date,    -&gt; primary key(id),    -&gt; index book_bookname(bookname),    -&gt; index bookk_price(price)    -&gt; );desc book;//查看表结构\n//将表字段publishdatexiu\'g修改为pdate并且修改字段类型为intalter table book change publishdate pdate int;drop table book;//删除book表\n插入\ninsert into book(`bookname`,`publisher`,`author`)values(\'传奇故事\',\'年华流失\',\'我\');更新\nupdate book set `author`=\'nianhua\' where id=1;update book set `author`=\'kexue\',`bookname`=\'自律\' where id=1;删除\ndelete from book where id=\'1\';截断表,清空表,自增id恢复为1\ntruncate table book;查询表索引\nshow index from book;表修改重命名\nalter table book rename as books;添加字段\n alter table books add email varchar(30) not null ; 指定默认值并添加到author后面\n alter table books add name double not null default \"0.00\" after author; alter table books add name double not null default \"0.00\" first; 更改原有字段类型\n //把一个INTEGER列的名称从a变更到b ALTER TABLE t1 CHANGE a b INTEGER; //如果您想要更改列的类型而不是名称， CHANGE语法仍然要求旧的和新的列名称，即使旧的和新的列名称是一样的。 ALTER TABLE t1 CHANGE b b BIGINT NOT NULL; //使用MODIFY来改变列的类型，此时不需要重命名  ALTER TABLE t1 MODIFY b BIGINT NOT NULL;', 1, 215, 1, 0, 1, '2020-10-28 23:33:22', '2022-09-09 23:23:08'),
(1033, 1000, '文件系统函数', '<p>filetype();获取文件类型<br>filesize();//文件大小<br>pathinfo()//路径信息<br>is_readable() - 判断给定文件名是否可读<br>is_writable() - 判断给定的文件名是否可写<br>is_file() - 判断给定文件名是否为一个正常的文件<br>file() - 把整个文件读入一个数组<br>filectime()//文件创建时间<br>filemtime()//文件修改时间<br>fileatime()//文件访问时间<br>stat()//文件大部分属性\n</p><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\"> print_r</span><span class=\"pun\">(</span><span class=\"pln\"> stat</span><span class=\"pun\">(</span><span class=\"pln\">__FILE__</span><span class=\"pun\">));</span></code></li><li class=\"L1\"><code><span class=\"pln\"> </span><span class=\"pun\">结果返回</span></code></li><li class=\"L2\"><code><span class=\"pln\"> </span><span class=\"typ\">Array</span></code></li><li class=\"L3\"><code><span class=\"pun\">(</span></code></li><li class=\"L4\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"lit\">0</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">2116536868</span></code></li><li class=\"L5\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"lit\">1</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">6473924464350192</span></code></li><li class=\"L6\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"lit\">2</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">33206</span></code></li><li class=\"L7\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"lit\">3</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">1</span></code></li><li class=\"L8\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"lit\">4</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">0</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"lit\">5</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">0</span></code></li><li class=\"L0\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"lit\">6</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">0</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"lit\">7</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">38</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"lit\">8</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">1603937568</span></code></li><li class=\"L3\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"lit\">9</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">1603937567</span></code></li><li class=\"L4\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"lit\">10</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">1603936955</span></code></li><li class=\"L5\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"lit\">11</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">-</span><span class=\"lit\">1</span></code></li><li class=\"L6\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"lit\">12</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">-</span><span class=\"lit\">1</span></code></li><li class=\"L7\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"pln\">dev</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">2116536868</span></code></li><li class=\"L8\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"pln\">ino</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">6473924464350192</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"pln\">mode</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">33206</span></code></li><li class=\"L0\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"pln\">nlink</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">1</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"pln\">uid</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">0</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"pln\">gid</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">0</span></code></li><li class=\"L3\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"pln\">rdev</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">0</span></code></li><li class=\"L4\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"pln\">size</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">38</span></code></li><li class=\"L5\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"pln\">atime</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">1603937568</span></code></li><li class=\"L6\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"pln\">mtime</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">1603937567</span></code></li><li class=\"L7\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"pln\">ctime</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">1603936955</span></code></li><li class=\"L8\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"pln\">blksize</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">-</span><span class=\"lit\">1</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"pun\">[</span><span class=\"pln\">blocks</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">-</span><span class=\"lit\">1</span></code></li><li class=\"L0\"><code><span class=\"pun\">)</span></code></li></ol></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/030.jpg', 'filetype();获取文件类型filesize();//文件大小pathinfo()//路径信息is_readable() - 判断给定文件名是否可读is_writable() - 判断给定的文件名是否可写is_file() - 判断给定文件名是否为一个正常的文件file() - 把整个文件读入一个数组filectime()//文件创建时间filemtime()//文件修改时间fileatime()//文件访问时间stat()//文件大部分属性\n print_r( stat(__FILE__)); 结果返回 Array(    [0] =&gt; 2116536868    [1] =&gt; 6473924464350192    [2] =&gt; 33206    [3] =&gt; 1    [4] =&gt; 0    [5] =&gt; 0    [6] =&gt; 0    [7] =&gt; 38    [8] =&gt; 1603937568    [9] =&gt; 1603937567    [10] =&gt; 1603936955    [11] =&gt; -1    [12] =&gt; -1    [dev] =&gt; 2116536868    [ino] =&gt; 6473924464350192    [mode] =&gt; 33206    [nlink] =&gt; 1    [uid] =&gt; 0    [gid] =&gt; 0    [rdev] =&gt; 0    [size] =&gt; 38    [atime] =&gt; 1603937568    [mtime] =&gt; 1603937567    [ctime] =&gt; 1603936955    [blksize] =&gt; -1    [blocks] =&gt; -1)', 1, 170, 0, 0, 0, '2020-10-29 14:23:22', '2022-09-11 03:25:04'),
(1034, 1000, '数据库操作', '<p>DML语句</p>\n<p><code> <span class=\"com\">//插入</span></code></p>\n<p><code><span class=\"pln\"> insert </span><span class=\"kwd\">into</span><span class=\"pln\"> articles </span><span class=\"pun\">(</span><span class=\"str\">`userid`</span><span class=\"pun\">,</span><span class=\"str\">`title`</span><span class=\"pun\">,</span><span class=\"str\">`category_id`</span><span class=\"pun\">)</span><span class=\"pln\">values</span><span class=\"pun\">(</span><span class=\"str\">\'12\'</span><span class=\"pun\">,</span><span class=\"str\">\'测试\'</span><span class=\"pun\">,</span><span class=\"str\">\'22\'</span><span class=\"pun\">);</span></code></p>\n<p><code></code></p>\n<p><code> <span class=\"com\">//更新</span></code></p>\n<p><code><span class=\"pln\"> update articles </span><span class=\"kwd\">set</span> <span class=\"str\">`title`</span><span class=\"pun\">=</span><span class=\"str\">\'测试两下\'</span> <span class=\"kwd\">where</span> <span class=\"str\">`category_id`</span><span class=\"pun\">=</span><span class=\"str\">\'22\'</span><span class=\"pun\">;</span></code></p>\n<p><code></code></p>\n<p><code><span class=\"pln\"> update articles </span><span class=\"kwd\">set</span> <span class=\"str\">`title`</span><span class=\"pun\">=</span><span class=\"str\">\'测试两下\'</span><span class=\"pun\">;</span><span class=\"com\">//将影响所有行</span></code></p>\n<p><code><span class=\"pln\"> update articles </span><span class=\"kwd\">set</span> <span class=\"str\">`title`</span><span class=\"pun\">=</span><span class=\"str\">\'实验三下\'</span><span class=\"pln\"> order </span><span class=\"kwd\">by</span><span class=\"pln\"> id desc limit </span><span class=\"lit\">5</span><span class=\"pun\">;</span></code></p>\n<p><code></code></p>\n<p><code> <span class=\"com\">//删除</span></code></p>\n<p><code> <span class=\"kwd\">delete</span> <span class=\"kwd\">from</span><span class=\"pln\"> articles </span><span class=\"kwd\">where</span> <span class=\"str\">`id`</span><span class=\"pun\">=</span><span class=\"str\">\'1039\'</span><span class=\"pun\">;</span></code></p>\n<p><code> <span class=\"com\">//id倒序删除5行</span></code></p>\n<p><code>  <span class=\"kwd\">delete</span> <span class=\"kwd\">from</span><span class=\"pln\"> articles order </span><span class=\"kwd\">by</span><span class=\"pln\"> id desc limit </span><span class=\"lit\">5</span><span class=\"pun\">;</span></code></p>\n<p>DQL语句</p>\n<p><code> <span class=\"com\">//查询所有</span></code></p>\n<p><code> <span class=\"kwd\">select</span> <span class=\"pun\">*</span> <span class=\"kwd\">from</span><span class=\"pln\">  articles</span><span class=\"pun\">;</span></code></p>\n<p><code></code></p>\n<p><code> <span class=\"com\">//查询指定列</span></code></p>\n<p><code> <span class=\"kwd\">select</span> <span class=\"str\">`id`</span><span class=\"pun\">,</span><span class=\"str\">`cid`</span><span class=\"pun\">,</span><span class=\"str\">`title`</span> <span class=\"kwd\">from</span><span class=\"pln\">  articles</span><span class=\"pun\">;</span></code></p>\n<p><code></code></p>\n<p><code> <span class=\"com\">//使用AS别名</span></code></p>\n<p><code> <span class=\"kwd\">select</span> <span class=\"str\">`title`</span> <span class=\"kwd\">as</span> <span class=\"str\">\'标题\'</span><span class=\"pun\">,</span><span class=\"str\">`id`</span><span class=\"pun\">,</span><span class=\"str\">`views`</span> <span class=\"kwd\">as</span> <span class=\"str\">\'浏览量\'</span> <span class=\"kwd\">from</span><span class=\"pln\">  articles</span><span class=\"pun\">;</span></code></p>\n<p><code></code></p>\n<p><code> <span class=\"com\">//distinct 关键字去除重复</span></code></p>\n<p><code> <span class=\"kwd\">select</span><span class=\"pln\"> distinct  title </span><span class=\"kwd\">as</span> <span class=\"str\">\"标题\"</span> <span class=\"kwd\">from</span><span class=\"pln\">  articles</span><span class=\"pun\">;</span></code></p>\n<p><code></code></p>\n<p><code> <span class=\"com\">//查询非空</span></code></p>\n<p><code> <span class=\"kwd\">select</span> <span class=\"pun\">*</span> <span class=\"kwd\">from</span><span class=\"pln\"> articles </span><span class=\"kwd\">where</span><span class=\"pln\"> remark </span><span class=\"kwd\">is</span> <span class=\"kwd\">not</span> <span class=\"kwd\">null</span><span class=\"pun\">;</span></code></p>\n<p><code></code></p>\n<p><code> <span class=\"com\">//范围查询</span></code></p>\n<p><code> <span class=\"kwd\">select</span> <span class=\"pun\">*</span> <span class=\"kwd\">from</span><span class=\"pln\"> articles </span><span class=\"kwd\">where</span><span class=\"pln\"> views between </span><span class=\"lit\">30</span> <span class=\"kwd\">and</span> <span class=\"lit\">40</span><span class=\"pun\">;</span></code></p>\n<p><code> <span class=\"kwd\">select</span> <span class=\"pun\">*</span> <span class=\"kwd\">from</span><span class=\"pln\"> articles </span><span class=\"kwd\">where</span><span class=\"pln\"> views </span><span class=\"kwd\">not</span><span class=\"pln\"> between </span><span class=\"lit\">30</span> <span class=\"kwd\">and</span> <span class=\"lit\">40</span><span class=\"pun\">;</span></code></p>\n<p><code></code></p>\n<p><code> <span class=\"com\">//范围比较查询</span></code></p>\n<p><code>  <span class=\"kwd\">select</span> <span class=\"pun\">*</span> <span class=\"kwd\">from</span><span class=\"pln\"> articles </span><span class=\"kwd\">where</span><span class=\"pln\"> views </span><span class=\"pun\">=</span> <span class=\"str\">\'61\'</span> <span class=\"kwd\">or</span><span class=\"pln\"> views</span><span class=\"pun\">=</span><span class=\"str\">\'89\'</span> <span class=\"kwd\">or</span><span class=\"pln\"> views</span><span class=\"pun\">=</span><span class=\"str\">\'15\'</span><span class=\"pun\">;</span></code></p>\n<p><code>  <span class=\"com\">//使用IN进行范围比较查询</span></code></p>\n<p><code><span class=\"kwd\">select</span> <span class=\"pun\">*</span> <span class=\"kwd\">from</span><span class=\"pln\"> articles </span><span class=\"kwd\">where</span><span class=\"pln\"> views </span><span class=\"kwd\">in</span><span class=\"pun\">(</span><span class=\"str\">\'61\'</span><span class=\"pun\">,</span><span class=\"str\">\'89\'</span><span class=\"pun\">,</span><span class=\"str\">\'15\'</span><span class=\"pun\">);</span></code></p>\n<p><code></code></p>\n<p><code><span class=\"kwd\">select</span> <span class=\"pun\">*</span> <span class=\"kwd\">from</span><span class=\"pln\"> articles </span><span class=\"kwd\">where</span><span class=\"pln\"> views </span><span class=\"kwd\">not</span> <span class=\"kwd\">in</span><span class=\"pun\">(</span><span class=\"str\">\'61\'</span><span class=\"pun\">,</span><span class=\"str\">\'89\'</span><span class=\"pun\">,</span><span class=\"str\">\'15\'</span><span class=\"pun\">);</span> </code></p>\n<p><code></code></p>\n<p><code>  <span class=\"pun\">使用</span><span class=\"pln\">LIKE</span><span class=\"pun\">进行模糊查询</span></code></p>\n<p><code>  <span class=\"pun\">%</span> <span class=\"pun\">表示</span><span class=\"lit\">0</span><span class=\"pun\">个或多个</span></code></p>\n<p><code><span class=\"pln\">  _ </span><span class=\"pun\">表示任意单个</span></code></p>\n<p><code>  <span class=\"kwd\">select</span> <span class=\"pun\">*</span> <span class=\"kwd\">from</span><span class=\"pln\"> articles </span><span class=\"kwd\">where</span><span class=\"pln\"> title like </span><span class=\"str\">\'%php%\'</span><span class=\"pun\">;</span></code></p>\n<p><code>  <span class=\"kwd\">select</span> <span class=\"pun\">*</span> <span class=\"kwd\">from</span><span class=\"pln\"> articles </span><span class=\"kwd\">where</span><span class=\"pln\"> title </span><span class=\"kwd\">not</span><span class=\"pln\"> like </span><span class=\"str\">\'%php%\'</span><span class=\"pun\">;</span></code></p>\n<p><code>  <span class=\"kwd\">select</span> <span class=\"pun\">*</span> <span class=\"kwd\">from</span><span class=\"pln\"> articles </span><span class=\"kwd\">where</span><span class=\"pln\"> title like </span><span class=\"str\">\'_ss自动序列\'</span><span class=\"pun\">;</span></code></p>\n<p><code></code></p>\n<p><code>  <span class=\"pun\">多表查询</span></code></p>\n<p><code>  <span class=\"kwd\">select</span> <span class=\"pun\">*</span> <span class=\"kwd\">from</span><span class=\"pln\"> article</span><span class=\"pun\">,</span><span class=\"pln\">categorie </span><span class=\"pun\">;</span></code></p>\n<p><code></code></p>\n<p><code>  <span class=\"kwd\">select</span> <span class=\"pun\">*</span> <span class=\"kwd\">from</span><span class=\"pln\"> article</span><span class=\"pun\">,</span><span class=\"pln\">categorie </span><span class=\"kwd\">where</span><span class=\"pln\"> article</span><span class=\"pun\">.</span><span class=\"pln\">category_id </span><span class=\"pun\">=</span><span class=\"pln\"> categorie</span><span class=\"pun\">.</span><span class=\"pln\">id</span><span class=\"pun\">;</span></code></p>\n<p>自身连接查询<br />连接查询不仅可以用于多张表之间的连接也可以用于一张表与其自身的连接,方法,为它起两个别名</p>\n<p><code><span class=\"kwd\">select</span><span class=\"pln\"> cs1</span><span class=\"pun\">.</span><span class=\"pln\">name </span><span class=\"str\">\'父类别名称\'</span> <span class=\"pun\">,</span><span class=\"pln\"> cs2</span><span class=\"pun\">.</span><span class=\"pln\">name </span><span class=\"str\">\'子类别名称\'</span> <span class=\"kwd\">from</span><span class=\"pln\"> categorie cs1</span><span class=\"pun\">,</span><span class=\"pln\">categorie cs2 </span><span class=\"kwd\">where</span><span class=\"pln\"> cs1</span><span class=\"pun\">.</span><span class=\"pln\">id</span><span class=\"pun\">=</span><span class=\"pln\">cs2</span><span class=\"pun\">.</span><span class=\"pln\">pid</span><span class=\"pun\">;</span></code></p>\n<p><img src=\"https://oss.qin500.com/user/1000/article/20201029130023_32.png\" alt=\"\" /></p>\n<hr />\n<p>嵌套查询(子查询)</p>\n<p>in()里面的返回必须是返回单行,不能是集合,可以用&rdquo;=&rdquo;,&rdquo;&gt;&rdquo;,&rdquo;&lt;&rdquo;,&rdquo;!=&rdquo;,或用LIMIT来限制返回单行</p>\n<p><code> <span class=\"kwd\">select</span> <span class=\"pun\">*</span> <span class=\"kwd\">from</span><span class=\"pln\"> article </span><span class=\"kwd\">where</span><span class=\"pln\"> category_id  </span><span class=\"kwd\">in</span><span class=\"pun\">(</span><span class=\"kwd\">select</span><span class=\"pln\"> id </span><span class=\"kwd\">from</span><span class=\"pln\"> categorie </span><span class=\"kwd\">where</span><span class=\"pln\"> id</span><span class=\"pun\">=</span><span class=\"lit\">1</span><span class=\"pun\">);</span></code></p>\n<p><img src=\"https://oss.qin500.com/user/1000/article/20201029131536_33.png\" alt=\"\" /></p>\n<p>LIMIT限定结果行数()</p>\n<p><code>  <span class=\"kwd\">select</span> <span class=\"pun\">*</span> <span class=\"kwd\">from</span><span class=\"pln\"> article </span><span class=\"kwd\">where</span><span class=\"pln\"> category_id  </span><span class=\"kwd\">in</span><span class=\"pun\">(</span><span class=\"kwd\">select</span><span class=\"pln\"> id </span><span class=\"kwd\">from</span><span class=\"pln\"> categorie</span><span class=\"pun\">)</span><span class=\"pln\"> LIMIT </span><span class=\"lit\">4</span><span class=\"pun\">,</span><span class=\"lit\">8</span><span class=\"pun\">;</span><span class=\"com\">//返回4到8条</span></code></p>\n<p>统计函数<br />count();<br />avg();<br />sum();<br />max();<br />min();</p>\n<p><code>  <span class=\"kwd\">select</span><span class=\"pln\"> max</span><span class=\"pun\">(</span><span class=\"pln\">views</span><span class=\"pun\">)</span> <span class=\"kwd\">as</span> <span class=\"str\">\"浏览最多\"</span> <span class=\"kwd\">from</span><span class=\"pln\"> article</span><span class=\"pun\">;</span></code></p>\n<p>EXPLAIN语句检测索引和查询能否良好匹配的简便方法&rsquo;</p>\n<p><code><span class=\"pln\">  explain </span><span class=\"kwd\">select</span> <span class=\"pun\">*</span> <span class=\"kwd\">from</span><span class=\"pln\"> article</span><span class=\"pun\">;</span></code></p>\n<p><code><span class=\"pun\">+----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------+</span></code></p>\n<p><code><span class=\"pun\">|</span><span class=\"pln\"> id </span><span class=\"pun\">|</span><span class=\"pln\"> select_type </span><span class=\"pun\">|</span><span class=\"pln\"> table   </span><span class=\"pun\">|</span><span class=\"pln\"> partitions </span><span class=\"pun\">|</span><span class=\"pln\"> type </span><span class=\"pun\">|</span><span class=\"pln\"> possible_keys </span><span class=\"pun\">|</span><span class=\"pln\"> key  </span><span class=\"pun\">|</span><span class=\"pln\"> key_len </span><span class=\"pun\">|</span> <span class=\"kwd\">ref</span>  <span class=\"pun\">|</span><span class=\"pln\"> rows </span><span class=\"pun\">|</span><span class=\"pln\"> filtered </span><span class=\"pun\">|</span> <span class=\"typ\">Extra</span> <span class=\"pun\">|</span></code></p>\n<p><code><span class=\"pun\">+----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------+</span></code></p>\n<p><code><span class=\"pun\">|</span>  <span class=\"lit\">1</span> <span class=\"pun\">|</span><span class=\"pln\"> SIMPLE      </span><span class=\"pun\">|</span><span class=\"pln\"> article </span><span class=\"pun\">|</span><span class=\"pln\"> NULL       </span><span class=\"pun\">|</span><span class=\"pln\"> ALL  </span><span class=\"pun\">|</span><span class=\"pln\"> NULL          </span><span class=\"pun\">|</span><span class=\"pln\"> NULL </span><span class=\"pun\">|</span><span class=\"pln\"> NULL    </span><span class=\"pun\">|</span><span class=\"pln\"> NULL </span><span class=\"pun\">|</span>   <span class=\"lit\">38</span> <span class=\"pun\">|</span>   <span class=\"lit\">100.00</span> <span class=\"pun\">|</span><span class=\"pln\"> NULL  </span><span class=\"pun\">|</span></code></p>\n<p><code><span class=\"pun\">+----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------+</span></code></p>\n<p><code><span class=\"lit\">1</span><span class=\"pln\"> row </span><span class=\"kwd\">in</span> <span class=\"kwd\">set</span><span class=\"pun\">,</span> <span class=\"lit\">1</span><span class=\"pln\"> warning </span><span class=\"pun\">(</span><span class=\"lit\">0.00</span><span class=\"pln\"> sec</span><span class=\"pun\">)</span></code></p>', 'https://oss.qin500.com/user/1000/article/20201029130023_32.png', 'DML语句\n //插入\n insert into articles (`userid`,`title`,`category_id`)values(\'12\',\'测试\',\'22\');\n\n //更新\n update articles set `title`=\'测试两下\' where `category_id`=\'22\';\n\n update articles set `title`=\'测试两下\';//将影响所有行\n update articles set `title`=\'实验三下\' order by id desc limit 5;\n\n //删除\n delete from articles where `id`=\'1039\';\n //id倒序删除5行\n  delete from articles order by id desc limit 5;\nDQL语句\n //查询所有\n select * from  articles;\n\n //查询指定列\n select `id`,`cid`,`title` from  articles;\n\n //使用AS别名\n select `title` as \'标题\',`id`,`views` as \'浏览量\' from  articles;\n\n //distinct 关键字去除重复\n select distinct  title as \"标题\" from  articles;\n\n //查询非空\n select * from articles where remark is not null;\n\n //范围查询\n select * from articles where views between 30 and 40;\n select * from articles where views not between 30 and 40;\n\n //范围比较查询\n  select * from articles where views = \'61\' or views=\'89\' or views=\'15\';\n  //使用IN进行范围比较查询\nselect * from articles where views in(\'61\',\'89\',\'15\');\n\nselect * from articles where views not in(\'61\',\'89\',\'15\'); \n\n  使用LIKE进行模糊查询\n  % 表示0个或多个\n  _ 表示任意单个\n  select * from articles where title like \'%php%\';\n  select * from articles where title not like \'%php%\';\n  select * from articles where title like \'_ss自动序列\';\n\n  多表查询\n  select * from article,categorie ;\n\n  select * from article,categorie where article.category_id = categorie.id;\n自身连接查询连接查询不仅可以用于多张表之间的连接也可以用于一张表与其自身的连接,方法,为它起两个别名\nselect cs1.name \'父类别名称\' , cs2.name \'子类别名称\' from categorie cs1,categorie cs2 where cs1.id=cs2.pid;\n\n\n嵌套查询(子查询)\nin()里面的返回必须是返回单行,不能是集合,可以用&rdquo;=&rdquo;,&rdquo;&gt;&rdquo;,&rdquo;&lt;&rdquo;,&rdquo;!=&rdquo;,或用LIMIT来限制返回单行\n select * from article where category_id  in(select id from categorie where id=1);\n\nLIMIT限定结果行数()\n  select * from article where category_id  in(select id from categorie) LIMIT 4,8;//返回4到8条\n统计函数count();avg();sum();max();min();\n  select max(views) as \"浏览最多\" from article;\nEXPLAIN语句检测索引和查询能否良好匹配的简便方法&rsquo;\n  explain select * from article;\n+----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------+\n| id | select_type | table   | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |\n+----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------+\n|  1 | SIMPLE      | article | NULL       | ALL  | NULL          | NULL | NULL    | NULL |   38 |   100.00 | NULL  |\n+----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------+\n1 row in set, 1 warning (0.00 sec)', 1, 202, 1, 0, 1, '2020-10-29 16:29:25', '2022-09-10 05:55:10'),
(1035, 1000, 'php错误处理', '<p>配置设置在php.ini文件</p>\n<p>将错误写入文件,需满足以下条件<br>error_reportinh= E_ALL<br>display_errors=Off<br>log_errors=On<br>error_log=”D:/php_error.log”//错误文件路径<br>error_log=ssyslog//将错误发送给系统\n</p><p>自定义错误</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">ini_set</span><span class=\"pun\">(</span><span class=\"str\">\"display_errors\"</span><span class=\"pun\">,</span><span class=\"lit\">0</span><span class=\"pun\">);</span></code></li><li class=\"L1\"><code><span class=\"com\">//error_reporting(E_ALL &amp; ~E_NOTICE);//显示所有错误排除通知类型信息</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"pln\">error_reporting</span><span class=\"pun\">(</span><span class=\"lit\">0</span><span class=\"pun\">);</span></code></li><li class=\"L4\"><code><span class=\"kwd\">function</span><span class=\"pln\"> error_handle</span><span class=\"pun\">(</span><span class=\"pln\">$erroe_level</span><span class=\"pun\">,</span><span class=\"pln\">$error_message</span><span class=\"pun\">,</span><span class=\"pln\">$error_file</span><span class=\"pun\">,</span><span class=\"pln\">$error_line</span><span class=\"pun\">){</span></code></li><li class=\"L5\"><code><span class=\"pln\">    echo </span><span class=\"str\">\"错误级别\"</span><span class=\"pln\"> </span><span class=\"pun\">.</span><span class=\"pln\"> $erroe_level </span><span class=\"pun\">.</span><span class=\"pln\"> </span><span class=\"str\">\"&lt;br&gt;\"</span><span class=\"pun\">;</span></code></li><li class=\"L6\"><code><span class=\"pln\">    echo </span><span class=\"str\">\"错误信息\"</span><span class=\"pln\"> </span><span class=\"pun\">.</span><span class=\"pln\"> $error_message </span><span class=\"pun\">.</span><span class=\"pln\"> </span><span class=\"str\">\"&lt;br&gt;\"</span><span class=\"pun\">;</span></code></li><li class=\"L7\"><code><span class=\"pln\">    echo </span><span class=\"str\">\"错误文件\"</span><span class=\"pln\"> </span><span class=\"pun\">.</span><span class=\"pln\"> $error_file </span><span class=\"pun\">.</span><span class=\"pln\"> </span><span class=\"str\">\"&lt;br&gt;\"</span><span class=\"pun\">;</span></code></li><li class=\"L8\"><code><span class=\"pln\">    echo </span><span class=\"str\">\"错误行\"</span><span class=\"pln\"> </span><span class=\"pun\">.</span><span class=\"pln\"> $error_line </span><span class=\"pun\">.</span><span class=\"pln\"> </span><span class=\"str\">\"&lt;br&gt;\"</span><span class=\"pun\">;</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"kwd\">die</span><span class=\"pun\">();</span></code></li><li class=\"L0\"><code><span class=\"pun\">}</span></code></li><li class=\"L1\"><code><span class=\"pln\">set_error_handler</span><span class=\"pun\">(</span><span class=\"str\">\"error_handle\"</span><span class=\"pun\">);</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"pln\">mysqli_connect</span><span class=\"pun\">(</span><span class=\"str\">\"localhost\"</span><span class=\"pun\">,</span><span class=\"str\">\"root\"</span><span class=\"pun\">,</span><span class=\"str\">\"\"</span><span class=\"pun\">);</span></code></li></ol></pre><p>将错误日志发送给系统<br>可以打开windows 事件查看器查看\n</p><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">openlog</span><span class=\"pun\">(</span><span class=\"str\">\"php7\"</span><span class=\"pun\">,</span><span class=\"pln\">LOG_PID</span><span class=\"pun\">,</span><span class=\"pln\">LOG_USER</span><span class=\"pun\">);</span></code></li><li class=\"L1\"><code><span class=\"pln\">syslog</span><span class=\"pun\">(</span><span class=\"pln\">LOG_WARNING</span><span class=\"pun\">,</span><span class=\"str\">\"jingg警告消息,演示时间\"</span><span class=\"pln\"> </span><span class=\"pun\">.</span><span class=\"pln\"> date</span><span class=\"pun\">(</span><span class=\"str\">\"Y-m-d\"</span><span class=\"pun\">));</span></code></li><li class=\"L2\"><code><span class=\"pln\">closelog</span><span class=\"pun\">();</span></code></li></ol></pre><p>trigger_error()函数创建用户级别的错误消息。<br>函数能结合内置的错误处理器所关联，或者可以使用用户定义的函数作为新的错误处理程序\n</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/035.jpg', '配置设置在php.ini文件\n将错误写入文件,需满足以下条件error_reportinh= E_ALLdisplay_errors=Offlog_errors=Onerror_log=”D:/php_error.log”//错误文件路径error_log=ssyslog//将错误发送给系统\n自定义错误\nini_set(\"display_errors\",0);//error_reporting(E_ALL &amp; ~E_NOTICE);//显示所有错误排除通知类型信息error_reporting(0);function error_handle($erroe_level,$error_message,$error_file,$error_line){    echo \"错误级别\" . $erroe_level . \"&lt;br&gt;\";    echo \"错误信息\" . $error_message . \"&lt;br&gt;\";    echo \"错误文件\" . $error_file . \"&lt;br&gt;\";    echo \"错误行\" . $error_line . \"&lt;br&gt;\";    die();}set_error_handler(\"error_handle\");mysqli_connect(\"localhost\",\"root\",\"\");将错误日志发送给系统可以打开windows 事件查看器查看\nopenlog(\"php7\",LOG_PID,LOG_USER);syslog(LOG_WARNING,\"jingg警告消息,演示时间\" . date(\"Y-m-d\"));closelog();trigger_error()函数创建用户级别的错误消息。函数能结合内置的错误处理器所关联，或者可以使用用户定义的函数作为新的错误处理程序\n', 1, 211, 1, 0, 1, '2020-10-30 20:07:23', '2022-09-07 11:44:54'),
(1036, 1000, 'PHP读取命令行参数', '<p>方法一：使用$argv or $argc参数接收</p>\n<ol class=\"linenums\">\n<li class=\"L0\"><code><span class=\"pln\">echo </span><span class=\"str\">\"接收到{$argc}个参数\"</span><span class=\"pun\">;</span></code></li>\n<li class=\"L1\"><code><span class=\"pln\">print_r</span><span class=\"pun\">(</span><span class=\"pln\">$argv</span><span class=\"pun\">);</span></code></li>\n</ol>\n<ol class=\"linenums\">\n<li class=\"L0\"><code><span class=\"pln\">D</span><span class=\"pun\">:</span><span class=\"pln\">\\www\\test\\1</span><span class=\"lit\">1</span><span class=\"pun\">&gt;</span><span class=\"pln\">php </span><span class=\"lit\">11.2</span><span class=\"pun\">.</span><span class=\"lit\">4.php</span><span class=\"pln\">  make</span><span class=\"pun\">:</span><span class=\"pln\">controller </span><span class=\"pun\">-</span><span class=\"pln\">m</span></code></li>\n<li class=\"L1\"><code><span class=\"typ\">Array</span></code></li>\n<li class=\"L2\"><code><span class=\"pun\">(</span></code></li>\n<li class=\"L3\"><code>    <span class=\"pun\">[</span><span class=\"lit\">0</span><span class=\"pun\">]</span> <span class=\"pun\">=&gt;</span> <span class=\"lit\">11.2</span><span class=\"pun\">.</span><span class=\"lit\">4.php</span></code></li>\n<li class=\"L4\"><code>    <span class=\"pun\">[</span><span class=\"lit\">1</span><span class=\"pun\">]</span> <span class=\"pun\">=&gt;</span><span class=\"pln\"> make</span><span class=\"pun\">:</span><span class=\"pln\">controller</span></code></li>\n<li class=\"L5\"><code>    <span class=\"pun\">[</span><span class=\"lit\">2</span><span class=\"pun\">]</span> <span class=\"pun\">=&gt;</span> <span class=\"pun\">-</span><span class=\"pln\">m</span></code></li>\n<li class=\"L6\"><code><span class=\"pun\">)</span></code></li>\n</ol>\n<p>方法二：使用getopt函数</p>\n<ol class=\"linenums\">\n<li class=\"L0\"><code><span class=\"pln\">$param_arr </span><span class=\"pun\">=</span><span class=\"pln\"> getopt</span><span class=\"pun\">(</span><span class=\"str\">\'a:b:\'</span><span class=\"pun\">);</span></code></li>\n<li class=\"L1\"><code><span class=\"pln\">print_r</span><span class=\"pun\">(</span><span class=\"pln\">$param_arr</span><span class=\"pun\">);</span></code></li>\n</ol>\n<ol class=\"linenums\">\n<li class=\"L0\"><code><span class=\"pln\">D</span><span class=\"pun\">:</span><span class=\"pln\">\\www\\test\\1</span><span class=\"lit\">1</span><span class=\"pun\">&gt;</span><span class=\"pln\">php </span><span class=\"lit\">11.2</span><span class=\"pun\">.</span><span class=\"lit\">4.php</span> <span class=\"pun\">-</span><span class=\"pln\">a  make</span><span class=\"pun\">:</span><span class=\"pln\">controller </span><span class=\"pun\">-</span><span class=\"pln\">m model</span></code></li>\n<li class=\"L1\"><code><span class=\"typ\">Array</span></code></li>\n<li class=\"L2\"><code><span class=\"pun\">(</span></code></li>\n<li class=\"L3\"><code>    <span class=\"pun\">[</span><span class=\"pln\">a</span><span class=\"pun\">]</span> <span class=\"pun\">=&gt;</span><span class=\"pln\"> make</span><span class=\"pun\">:</span><span class=\"pln\">controller</span></code></li>\n<li class=\"L4\"><code>    <span class=\"pun\">[</span><span class=\"pln\">m</span><span class=\"pun\">]</span> <span class=\"pun\">=&gt;</span><span class=\"pln\"> model</span></code></li>\n<li class=\"L5\"><code><span class=\"pun\">)</span></code></li>\n</ol>\n<p>方法三：提示用户输入</p>\n<ol class=\"linenums\">\n<li class=\"L0\"><code><span class=\"pln\">fwrite</span><span class=\"pun\">(</span><span class=\"pln\">STDOUT</span><span class=\"pun\">,</span><span class=\"str\">\'请输入您的博客名：\'</span><span class=\"pun\">);</span></code></li>\n<li class=\"L1\"><code><span class=\"pln\">echo </span><span class=\"str\">\'您输入的信息是：\'</span><span class=\"pun\">.</span><span class=\"pln\">fgets</span><span class=\"pun\">(</span><span class=\"pln\">STDIN</span><span class=\"pun\">);</span></code></li>\n</ol>\n<p>请输入您的博客名：demo<br />您输入的信息是：demo</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/096.jpg', '方法一：使用$argv or $argc参数接收\n\necho \"接收到{$argc}个参数\";\nprint_r($argv);\n\n\nD:\\www\\test\\11&gt;php 11.2.4.php  make:controller -m\nArray\n(\n    [0] =&gt; 11.2.4.php\n    [1] =&gt; make:controller\n    [2] =&gt; -m\n)\n\n方法二：使用getopt函数\n\n$param_arr = getopt(\'a:b:\');\nprint_r($param_arr);\n\n\nD:\\www\\test\\11&gt;php 11.2.4.php -a  make:controller -m model\nArray\n(\n    [a] =&gt; make:controller\n    [m] =&gt; model\n)\n\n方法三：提示用户输入\n\nfwrite(STDOUT,\'请输入您的博客名：\');\necho \'您输入的信息是：\'.fgets(STDIN);\n\n请输入您的博客名：demo您输入的信息是：demo', 1, 225, 1, 0, 1, '2020-10-31 00:21:41', '2022-09-08 14:26:25');
INSERT INTO `qin500_articles` (`id`, `uid`, `title`, `text`, `masterpic`, `pure`, `cid`, `views`, `isshow`, `zan`, `bdts`, `created_at`, `updated_at`) VALUES
(1037, 1000, 'composer版本说明', '<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"str\">\"require\"</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"str\">\"vendor/package\"</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\"1.3.2\"</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"com\">// exactly 1.3.2</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"pln\">    </span><span class=\"com\">// &gt;, &lt;, &gt;=, &lt;= | 指定上/下界</span></code></li><li class=\"L4\"><code><span class=\"pln\">    </span><span class=\"str\">\"vendor/package\"</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\"&gt;=1.3.2\"</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"com\">// anything above or equal to 1.3.2</span></code></li><li class=\"L5\"><code><span class=\"pln\">    </span><span class=\"str\">\"vendor/package\"</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\"&lt;1.3.2\"</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"com\">// anything below 1.3.2</span></code></li><li class=\"L6\"><code></code></li><li class=\"L7\"><code><span class=\"pln\">    </span><span class=\"com\">// * | wildcard</span></code></li><li class=\"L8\"><code><span class=\"pln\">    </span><span class=\"str\">\"vendor/package\"</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\"1.3.*\"</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"com\">// &gt;=1.3.0 &lt;1.4.0</span></code></li><li class=\"L9\"><code></code></li><li class=\"L0\"><code><span class=\"pln\">    </span><span class=\"com\">// ~ | 允许指定的最后一个数字向上</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"str\">\"vendor/package\"</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\"~1.3.2\"</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"com\">// &gt;=1.3.2 &lt;1.4.0</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"str\">\"vendor/package\"</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\"~1.3\"</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"com\">// &gt;=1.3.0 &lt;2.0.0</span></code></li><li class=\"L3\"><code></code></li><li class=\"L4\"><code><span class=\"pln\">    </span><span class=\"com\">// ^ | doesn\'t allow breaking changes (major version fixed - following semver)</span></code></li><li class=\"L5\"><code><span class=\"pln\">    </span><span class=\"str\">\"vendor/package\"</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\"^1.3.2\"</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"com\">// &gt;=1.3.2 &lt;2.0.0</span></code></li><li class=\"L6\"><code><span class=\"pln\">    </span><span class=\"str\">\"vendor/package\"</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\"^0.3.2\"</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"com\">// &gt;=0.3.2 &lt;0.4.0 // except if major version is 0</span></code></li><li class=\"L7\"><code><span class=\"pun\">}</span></code></li></ol></pre><p>版本格式：主版本号.次版本号.修订号，版本号递增规则如下：</p>\n<p>主版本号：当你做了不兼容的 API 修改，<br>次版本号：当你做了向下兼容的功能性新增，<br>修订号：当你做了向下兼容的问题修正。<br>先行版本号及版本编译元数据可以加到“主版本号.次版本号.修订号”的后面，作为延伸。\n</p><p>~表示版本号只能改变最末尾那段（如果是 ~x.y 末尾就是 y，如果是 ~x.y.z 末尾就是 z）<br>~1.2.3 代表 1.2.3 &lt;= 版本号 &lt; 1.3.0<br>~1.2   代表  1.2 &lt;= 版本号 &lt;2.0\n</p><p>^表示除了大版本号以外，小版本号和补丁版本号都可以变<br>^1.2.3 代表 1.2.3 &lt;= 版本号 &lt; 2.0.0\n</p><p>特殊情况0开头的版本号：<br>^0.3.0 等于 0.3.0 &lt;= 版本号 &lt;0.4.0  注意：不是 &lt;1.0.0<br>因为：semantic versioning 的规定是，大版本号以 0 开头表示这是一个非稳定版本（unstable），如果处于非稳定状态，小版本号是允许不向下兼容的，<br>所以如果你要指定 0 开头的库那一定要注意：<br>危险写法：~0.1 等于 0.1.0 &lt;= 版本号 &lt;1.0.0<br>保险写法：^0.1 等于 0.1.0 &lt;= 版本号 &lt;0.2.0\n</p><p><a href=\"https://semver.mwl.be/\">https://semver.mwl.be/</a></p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/064.jpg', '\"require\": {    \"vendor/package\": \"1.3.2\", // exactly 1.3.2    // &gt;, &lt;, &gt;=, &lt;= | 指定上/下界    \"vendor/package\": \"&gt;=1.3.2\", // anything above or equal to 1.3.2    \"vendor/package\": \"&lt;1.3.2\", // anything below 1.3.2    // * | wildcard    \"vendor/package\": \"1.3.*\", // &gt;=1.3.0 &lt;1.4.0    // ~ | 允许指定的最后一个数字向上    \"vendor/package\": \"~1.3.2\", // &gt;=1.3.2 &lt;1.4.0    \"vendor/package\": \"~1.3\", // &gt;=1.3.0 &lt;2.0.0    // ^ | doesn\'t allow breaking changes (major version fixed - following semver)    \"vendor/package\": \"^1.3.2\", // &gt;=1.3.2 &lt;2.0.0    \"vendor/package\": \"^0.3.2\", // &gt;=0.3.2 &lt;0.4.0 // except if major version is 0}版本格式：主版本号.次版本号.修订号，版本号递增规则如下：\n主版本号：当你做了不兼容的 API 修改，次版本号：当你做了向下兼容的功能性新增，修订号：当你做了向下兼容的问题修正。先行版本号及版本编译元数据可以加到“主版本号.次版本号.修订号”的后面，作为延伸。\n~表示版本号只能改变最末尾那段（如果是 ~x.y 末尾就是 y，如果是 ~x.y.z 末尾就是 z）~1.2.3 代表 1.2.3 &lt;= 版本号 &lt; 1.3.0~1.2   代表  1.2 &lt;= 版本号 &lt;2.0\n^表示除了大版本号以外，小版本号和补丁版本号都可以变^1.2.3 代表 1.2.3 &lt;= 版本号 &lt; 2.0.0\n特殊情况0开头的版本号：^0.3.0 等于 0.3.0 &lt;= 版本号 &lt;0.4.0  注意：不是 &lt;1.0.0因为：semantic versioning 的规定是，大版本号以 0 开头表示这是一个非稳定版本（unstable），如果处于非稳定状态，小版本号是允许不向下兼容的，所以如果你要指定 0 开头的库那一定要注意：危险写法：~0.1 等于 0.1.0 &lt;= 版本号 &lt;1.0.0保险写法：^0.1 等于 0.1.0 &lt;= 版本号 &lt;0.2.0\nhttps://semver.mwl.be/', 1, 216, 1, 0, 1, '2020-11-03 14:42:00', '2022-09-11 17:24:18'),
(1038, 1000, 'Laravel使用ApiToken认证请求', '<p>首先在用户表添加</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">$table</span><span class=\"pun\">-&gt;</span><span class=\"kwd\">string</span><span class=\"pun\">(</span><span class=\"str\">\'api_token\'</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">60</span><span class=\"pun\">)-&gt;</span><span class=\"pln\">unique</span><span class=\"pun\">();</span></code></li></ol></pre><p>创建一个中间件,添加如下内容</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\"> </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"typ\">Auth</span><span class=\"pun\">::</span><span class=\"pln\">guard</span><span class=\"pun\">(</span><span class=\"str\">\'api\'</span><span class=\"pun\">)-&gt;</span><span class=\"pln\">guest</span><span class=\"pun\">())</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">            </span><span class=\"kwd\">return</span><span class=\"pln\"> response</span><span class=\"pun\">()-&gt;</span><span class=\"pln\">json</span><span class=\"pun\">([</span><span class=\"str\">\'code\'</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"lit\">401</span><span class=\"pun\">,</span><span class=\"str\">\'msg\'</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"str\">\'未设置token\'</span><span class=\"pun\">]);</span></code></li><li class=\"L2\"><code><span class=\"pln\">        </span><span class=\"pun\">}</span></code></li></ol></pre><p>api.php文件添加中间件</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"typ\">Route</span><span class=\"pun\">::</span><span class=\"pln\">middleware</span><span class=\"pun\">(</span><span class=\"str\">\'auth.api\'</span><span class=\"pun\">)-&gt;</span><span class=\"pln\">resource</span><span class=\"pun\">(</span><span class=\"str\">\"article\"</span><span class=\"pun\">,</span><span class=\"str\">\'Api\\ArticleController\'</span><span class=\"pun\">);</span></code></li></ol></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/035.jpg', '首先在用户表添加\n$table-&gt;string(\'api_token\', 60)-&gt;unique();创建一个中间件,添加如下内容\n if (Auth::guard(\'api\')-&gt;guest()) {            return response()-&gt;json([\'code\' =&gt; 401,\'msg\' =&gt; \'未设置token\']);        }api.php文件添加中间件\nRoute::middleware(\'auth.api\')-&gt;resource(\"article\",\'Api\\ArticleController\');', 1, 190, 0, 0, 0, '2020-11-04 21:31:33', '2022-09-11 03:26:04'),
(1039, 1000, 'git命令', '<p>获取 Git 仓库<br>通常有两种获取 Git 项目仓库的方式：\n</p><p>将尚未进行版本控制的本地目录转换为 Git 仓库；</p>\n<p>从其它服务器 克隆 一个已存在的 Git 仓库。<br>将文件添加到暂存区\n</p><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">$ git add </span><span class=\"pun\">*.</span><span class=\"pln\">c</span></code></li><li class=\"L1\"><code><span class=\"pln\">$ git add LICENSE</span></code></li><li class=\"L2\"><code><span class=\"pln\">$ git commit </span><span class=\"pun\">-</span><span class=\"pln\">m </span><span class=\"str\">\'initial project version\'</span></code></li></ol></pre><p>忽略文件<br>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件的模式。 来看一个实际的 .gitignore 例子：\n</p><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">$ cat </span><span class=\"pun\">.</span><span class=\"pln\">gitignore</span></code></li><li class=\"L1\"><code><span class=\"pun\">*.[</span><span class=\"pln\">oa</span><span class=\"pun\">]</span></code></li><li class=\"L2\"><code><span class=\"pun\">*~</span></code></li></ol></pre><p>从暂存区恢复</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">git checkout </span><span class=\"pun\">--</span><span class=\"pln\"> readme</span><span class=\"pun\">.</span><span class=\"pln\">txt</span></code></li></ol></pre><p>查看日志</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">git log</span></code></li></ol></pre><p>版本回退</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">//回退到指定版本</span></code></li><li class=\"L1\"><code><span class=\"pln\">git reset </span><span class=\"pun\">-–</span><span class=\"pln\">hard a11bef06a3f659402fe7563abf99ad00de2209e6</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"pln\">git reset</span></code></li></ol></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/094.jpg', '获取 Git 仓库通常有两种获取 Git 项目仓库的方式：\n将尚未进行版本控制的本地目录转换为 Git 仓库；\n从其它服务器 克隆 一个已存在的 Git 仓库。将文件添加到暂存区\n$ git add *.c$ git add LICENSE$ git commit -m \'initial project version\'忽略文件一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件的模式。 来看一个实际的 .gitignore 例子：\n$ cat .gitignore*.[oa]*~从暂存区恢复\ngit checkout -- readme.txt查看日志\ngit log版本回退\n//回退到指定版本git reset -–hard a11bef06a3f659402fe7563abf99ad00de2209e6git reset', 1, 200, 1, 0, 1, '2020-11-05 17:28:05', '2022-09-10 13:56:48'),
(1040, 1000, 'linux服务器免密登录配置教程', '<p>第一步:在本地机器上使用ssh-keygen产生公钥私钥对</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">$ ssh</span><span class=\"pun\">-</span><span class=\"pln\">keygen</span></code></li></ol></pre><p>第二步:用ssh-copy-id将公钥复制到远程机器中</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">$  ssh</span><span class=\"pun\">-</span><span class=\"pln\">copy</span><span class=\"pun\">-</span><span class=\"pln\">id </span><span class=\"pun\">-</span><span class=\"pln\">i </span><span class=\"pun\">/</span><span class=\"pln\">root</span><span class=\"pun\">/.</span><span class=\"pln\">ssh</span><span class=\"pun\">/</span><span class=\"pln\">id_rsa</span><span class=\"pun\">.</span><span class=\"pln\">pub root@192</span><span class=\"pun\">.</span><span class=\"lit\">168.3</span><span class=\"pun\">.</span><span class=\"lit\">22</span></code></li><li class=\"L1\"><code></code></li><li class=\"L2\"><code><span class=\"pun\">注意:</span><span class=\"pln\"> ssh</span><span class=\"pun\">-</span><span class=\"pln\">copy</span><span class=\"pun\">-</span><span class=\"pln\">id </span><span class=\"pun\">将</span><span class=\"pln\">key</span><span class=\"pun\">写到远程机器的</span><span class=\"pln\"> </span><span class=\"pun\">~</span><span class=\"str\">/ .ssh/</span><span class=\"pln\">authorized_key</span><span class=\"pun\">.文件中</span></code></li></ol></pre><p>通过以上两部即可用如下命令免密登录远程服务器</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">ssh work@192</span><span class=\"pun\">.</span><span class=\"lit\">168.x</span><span class=\"pun\">.</span><span class=\"pln\">xxx</span></code></li></ol></pre><p>如果我们觉得输入邮箱显得有些麻烦,可以创建一个配置文件<br>取名为 config\n</p><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"typ\">Host</span><span class=\"pln\"> qin500</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"typ\">HostName</span><span class=\"pln\"> qin500</span><span class=\"pun\">.</span><span class=\"pln\">com</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"typ\">IdentityFile</span><span class=\"pln\"> C</span><span class=\"pun\">:</span><span class=\"pln\">\\Users\\work\\.ssh\\id_rsa</span></code></li><li class=\"L3\"><code><span class=\"pln\">    </span><span class=\"typ\">User</span><span class=\"pln\"> root</span></code></li><li class=\"L4\"><code><span class=\"com\"># 第一个账号</span></code></li><li class=\"L5\"><code><span class=\"typ\">Host</span><span class=\"pln\"> github</span><span class=\"pun\">.</span><span class=\"pln\">com</span></code></li><li class=\"L6\"><code><span class=\"pln\">    </span><span class=\"typ\">HostName</span><span class=\"pln\"> github</span><span class=\"pun\">.</span><span class=\"pln\">com</span></code></li><li class=\"L7\"><code><span class=\"pln\">    </span><span class=\"typ\">IdentityFile</span><span class=\"pln\"> C</span><span class=\"pun\">:</span><span class=\"pln\">\\Users\\work\\.ssh\\github_rsa</span></code></li><li class=\"L8\"><code><span class=\"pln\">    </span><span class=\"typ\">User</span><span class=\"pln\"> git  </span></code></li><li class=\"L9\"><code></code></li><li class=\"L0\"><code><span class=\"com\"># 第二个账号</span></code></li><li class=\"L1\"><code><span class=\"typ\">Host</span><span class=\"pln\"> second</span><span class=\"pun\">.</span><span class=\"pln\">github</span><span class=\"pun\">.</span><span class=\"pln\">com  </span><span class=\"com\"># second为前缀名，可以任意设置</span></code></li><li class=\"L2\"><code><span class=\"typ\">HostName</span><span class=\"pln\"> github</span><span class=\"pun\">.</span><span class=\"pln\">com</span></code></li><li class=\"L3\"><code><span class=\"typ\">User</span><span class=\"pln\"> git</span></code></li><li class=\"L4\"><code><span class=\"typ\">IdentityFile</span><span class=\"pln\"> </span><span class=\"pun\">~</span><span class=\"str\">/.ssh/</span><span class=\"pln\">id_rsa_x</span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code></code></li><li class=\"L7\"><code><span class=\"com\"># 测试是否通过</span></code></li><li class=\"L8\"><code><span class=\"pln\">ssh </span><span class=\"pun\">-</span><span class=\"pln\">T git@github</span><span class=\"pun\">.</span><span class=\"pln\">com</span></code></li><li class=\"L9\"><code><span class=\"pln\">ssh </span><span class=\"pun\">-</span><span class=\"pln\">T git@second</span><span class=\"pun\">.</span><span class=\"pln\">github</span><span class=\"pun\">.</span><span class=\"pln\">com</span></code></li></ol></pre><p>在这里配置了两个,可以使用别名登录</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">ssh qin500</span></code></li></ol></pre><p>github需将github_rsa文件添加到网站设置-&gt;SSH和GPG密锁页面<br>可以通过\n</p><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">//测试是否连接成功</span></code></li><li class=\"L1\"><code><span class=\"pln\"> ssh </span><span class=\"pun\">-</span><span class=\"pln\">T git@github</span><span class=\"pun\">.</span><span class=\"pln\">com</span></code></li></ol></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/019.jpg', '第一步:在本地机器上使用ssh-keygen产生公钥私钥对\n$ ssh-keygen第二步:用ssh-copy-id将公钥复制到远程机器中\n$  ssh-copy-id -i /root/.ssh/id_rsa.pub root@192.168.3.22注意: ssh-copy-id 将key写到远程机器的 ~/ .ssh/authorized_key.文件中通过以上两部即可用如下命令免密登录远程服务器\nssh work@192.168.x.xxx如果我们觉得输入邮箱显得有些麻烦,可以创建一个配置文件取名为 config\nHost qin500    HostName qin500.com    IdentityFile C:\\Users\\work\\.ssh\\id_rsa    User root# 第一个账号Host github.com    HostName github.com    IdentityFile C:\\Users\\work\\.ssh\\github_rsa    User git  # 第二个账号Host second.github.com  # second为前缀名，可以任意设置HostName github.comUser gitIdentityFile ~/.ssh/id_rsa_x# 测试是否通过ssh -T git@github.comssh -T git@second.github.com在这里配置了两个,可以使用别名登录\nssh qin500github需将github_rsa文件添加到网站设置-&gt;SSH和GPG密锁页面可以通过\n//测试是否连接成功 ssh -T git@github.com', 1, 275, 1, 0, 1, '2020-11-05 21:16:08', '2022-09-10 03:14:45'),
(1041, 1000, 'git命令', '<p>git命令</p>\n<p>初始化本地仓库</p>\n<p>git init</p>\n<p>将文件添加到暂存区<br />添加单个文件<br />git add 文件名<br />添加所有文件<br />git add -A</p>\n<p>$ git restore -s HEAD~1 READEME.md // 该命名表示将版本回退到当前快照的前一个版本<br />$ git restore -s 91410eb9 READEME.md // 改命令指定明确的 commit id ，回退到指定的快照中<br />$ git reset &mdash;soft HEAD^ // 该命令表示撤销 commit 至上一次 commit 的版本</p>\n<p>查看分支<br />git branch</p>\n<p>查看远程分支<br />git branch -r<br />查看本地和远程分支<br />git branch -a</p>\n<p>创建分支<br />git branch fff</p>\n<p>创建并切换到分支<br />git checkout -b newtest</p>\n<p>删除分支<br />git branch -d fff</p>\n<p>切换分支<br />git checkout master</p>\n<p>查看提交记录<br />git log<br />简洁版<br />git log &mdash;oneline<br />开启拓扑图<br />git log &mdash;graph<br />逆向<br />git log &mdash;reverse<br />查看指定用户提交的日志<br />git log &mdash;author=Linus &mdash;online -5</p>\n<p>git blame<br />如果要查看指定文件的修改记录可以使用 git blame 命令，格式如下：</p>\n<p>git标签<br />-a 默认添加标签注解,他会打开编辑器让你书写注解<br />git tag -a v1.0</p>\n<p>查看所有标签<br />git tag</p>\n<p>指定标签信息<br />git tag -a -m &lsquo;标签&rsquo;</p>\n<p>&nbsp;</p>\n<p>提交到 Github<br />$ git remote add origin2 <a href=\"mailto:git@github.com\">git@github.com</a>:qin500/mydemo.git<br />$ git push -u origin master</p>\n<p>从远程拉取到本地仓库<br />git fetch origin<br />在合并<br />git merge origin/master</p>\n<p>从本地仓库到github<br />git push origin master</p>\n<p>列出已经存在的远程分支<br />git remote</p>\n<p>添加远程分支<br />git remote add origin2 <a href=\"mailto:git@github.com\">git@github.com</a>:qin500/mydemo.git</p>\n<p>删除远程分支<br />git remote rm origin2</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/052.jpg', 'git命令\n初始化本地仓库\ngit init\n将文件添加到暂存区添加单个文件git add 文件名添加所有文件git add -A\n$ git restore -s HEAD~1 READEME.md // 该命名表示将版本回退到当前快照的前一个版本$ git restore -s 91410eb9 READEME.md // 改命令指定明确的 commit id ，回退到指定的快照中$ git reset &mdash;soft HEAD^ // 该命令表示撤销 commit 至上一次 commit 的版本\n查看分支git branch\n查看远程分支git branch -r查看本地和远程分支git branch -a\n创建分支git branch fff\n创建并切换到分支git checkout -b newtest\n删除分支git branch -d fff\n切换分支git checkout master\n查看提交记录git log简洁版git log &mdash;oneline开启拓扑图git log &mdash;graph逆向git log &mdash;reverse查看指定用户提交的日志git log &mdash;author=Linus &mdash;online -5\ngit blame如果要查看指定文件的修改记录可以使用 git blame 命令，格式如下：\ngit标签-a 默认添加标签注解,他会打开编辑器让你书写注解git tag -a v1.0\n查看所有标签git tag\n指定标签信息git tag -a -m &lsquo;标签&rsquo;\n&nbsp;\n提交到 Github$ git remote add origin2 git@github.com:qin500/mydemo.git$ git push -u origin master\n从远程拉取到本地仓库git fetch origin在合并git merge origin/master\n从本地仓库到githubgit push origin master\n列出已经存在的远程分支git remote\n添加远程分支git remote add origin2 git@github.com:qin500/mydemo.git\n删除远程分支git remote rm origin2', 1, 236, 1, 0, 1, '2020-11-06 00:50:11', '2022-09-04 17:40:12'),
(1042, 1000, '文件系统处理', '<p>filetype()//文件类型<br />file_exists()文件或目录是否存在<br />filesize()//文件大小<br />is_readable()//判断文件是否可读<br />is_writeable()//文件是否可写<br />is_executable()//文件是否可执行<br />filectime()创建时间<br />filemtime()修改时间<br />fileatime()访问时间<br />stat()文件大部分属性<br />is_file();<br />is_dir()</p>\n<p>$filename=\'resource/01.txt\';<br />//返回文件名<br />echo basename($filename) . \'&lt;Br&gt;\';<br />//返回不带扩展名文件名<br />echo basename($filename , \'.txt\') . \'&lt;br&gt;\';<br />//返回目录名<br />echo dirname($filename) . \'&lt;br&gt;\';<br />//返回一个关联数组<br />$path_arr=pathinfo($filename);<br />print_r($path_arr);<br />//Array ( [dirname] =&gt; resource [basename] =&gt; 01.txt [extension] =&gt; txt [filename] =&gt; 01 )</p>\n<p>opendir()<br />readdir()从目录句柄中读取条目,返回目录中下一个文件的文件名。文件名以在文件系统中的排序返回<br />closedir()<br />mkdir()建立目录<br />rmdir()删除目录<br />unlink()删除文件<br />copy()复制文件</p>\n<p>文件操作<br />fopen()打开一个文件资源<br />fread();读取文件<br />fwrite()写入文件<br />fclose()释放资源</p>\n<p>fgets()从打开的文件中返回一行<br />fgetc()从打开的文件中返回一个字符<br />file()读入一个文件到数组,每个元素对应一行<br />readfile(&ldquo;data.txt&rdquo;);将数据读出并输出到浏览器</p>\n<p>文件指针<br />ftell() 返回文件指针的当前位置<br />fseek()移动文件指针到指定位置<br />rewind()移动文件指针到文件的开头</p>\n<p>copy(来源文件,目的文件)//复制文件<br />unlink(目标文件)删除文件<br />ftruncate(目标文件资源,截取长度)//将文件截断到指定的长度<br />rename(旧文件名,新文件名)//文件或目录重命名</p>\n<p>is_uploadedfile()判断文件是否通过HTTP POST上传的<br />move_uploaded_file()将上传的文件移动到新位置</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/048.jpg', 'filetype()//文件类型file_exists()文件或目录是否存在filesize()//文件大小is_readable()//判断文件是否可读is_writeable()//文件是否可写is_executable()//文件是否可执行filectime()创建时间filemtime()修改时间fileatime()访问时间stat()文件大部分属性is_file();is_dir()\n$filename=\'resource/01.txt\';//返回文件名echo basename($filename) . \'&lt;Br&gt;\';//返回不带扩展名文件名echo basename($filename , \'.txt\') . \'&lt;br&gt;\';//返回目录名echo dirname($filename) . \'&lt;br&gt;\';//返回一个关联数组$path_arr=pathinfo($filename);print_r($path_arr);//Array ( [dirname] =&gt; resource [basename] =&gt; 01.txt [extension] =&gt; txt [filename] =&gt; 01 )\nopendir()readdir()从目录句柄中读取条目,返回目录中下一个文件的文件名。文件名以在文件系统中的排序返回closedir()mkdir()建立目录rmdir()删除目录unlink()删除文件copy()复制文件\n文件操作fopen()打开一个文件资源fread();读取文件fwrite()写入文件fclose()释放资源\nfgets()从打开的文件中返回一行fgetc()从打开的文件中返回一个字符file()读入一个文件到数组,每个元素对应一行readfile(&ldquo;data.txt&rdquo;);将数据读出并输出到浏览器\n文件指针ftell() 返回文件指针的当前位置fseek()移动文件指针到指定位置rewind()移动文件指针到文件的开头\ncopy(来源文件,目的文件)//复制文件unlink(目标文件)删除文件ftruncate(目标文件资源,截取长度)//将文件截断到指定的长度rename(旧文件名,新文件名)//文件或目录重命名\nis_uploadedfile()判断文件是否通过HTTP POST上传的move_uploaded_file()将上传的文件移动到新位置', 1, 260, 1, 0, 1, '2020-11-06 20:39:53', '2022-09-11 17:00:58'),
(1043, 1000, 'cookie的应用', '<p>index.html文件内容</p>\n<pre class=\"line-numbers  language-html\"><code class=\"line-numbers language-html\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"viewport\"\ncontent=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"&gt;\n&lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt;\n&lt;title&gt;登录页面&lt;/title&gt;\n&lt;style&gt;\nbody{\ntext-align: center;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;登录页面&lt;/h1&gt;\n&lt;form action=\"do_login.php\" method=\"post\"&gt;\n用户名:\n&lt;input type=\"text\" name=\"username\"&gt;&lt;br&gt;\n密码:\n&lt;input type=\"password\" name=\"password\"&gt;&lt;br&gt;\n&lt;input type=\"submit\" name=\"submit\" value=\"登录\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p>do_login.php内容</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">&lt;?php\nif(isset($_POST[\'submit\'])){\n$username=$_POST[\'username\'];\n$password=$_POST[\'password\'];\nif($username == \"xiao\" &amp;&amp; $password == \"123\"){\nsetcookie(\'islogin\',true,time() + 3600,\'/\');\nsetcookie(\'username\',$username,time() + 3600,\'/\');\nsetcookie(\'sex\',\'girl\',time() + 3600,\'/\');\necho \'&lt;h3&gt;登录成功&lt;/h3&gt;\' . $username;\necho \"&lt;meta http-equiv=\'refresh\' content=\'3;url=finsh.php\'&gt;\";\n}else{\necho \"&lt;font size=\'4\' color=\'red\'&gt;您还未登录&lt;/font&gt;\";\n}\n}</code></pre>\n<p>finsh.php内容</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">&lt;?php\nvar_dump($_COOKIE);\necho \"登录成功\" . $_COOKIE[\'username\'];\necho \"&lt;a href=\'logout.php\'&gt;退出登录&lt;/a&gt;\";</code></pre>\n<p>logout.php内容</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">&lt;?php\necho \"&lt;font size=\'6\' color=\'red\'&gt;这里是退出页面&lt;/font&gt;\";\nvar_dump($_COOKIE);\nsetcookie(\'islogin\',null,time() - 1,\'/\');//后面的斜杠不要漏了,否则操作不成功\nsetcookie(\'username\',null,time() - 1,\'/\');\nsetcookie(\'sex\',null,time() - 1,\'/\');\necho \"&lt;a href=\'index.html\'&gt;进入登录&lt;/a&gt;\";</code></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/040.jpg', 'index.html文件内容\n&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"viewport\"\ncontent=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"&gt;\n&lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt;\n&lt;title&gt;登录页面&lt;/title&gt;\n&lt;style&gt;\nbody{\ntext-align: center;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;登录页面&lt;/h1&gt;\n&lt;form action=\"do_login.php\" method=\"post\"&gt;\n用户名:\n&lt;input type=\"text\" name=\"username\"&gt;&lt;br&gt;\n密码:\n&lt;input type=\"password\" name=\"password\"&gt;&lt;br&gt;\n&lt;input type=\"submit\" name=\"submit\" value=\"登录\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\ndo_login.php内容\n&lt;?php\nif(isset($_POST[\'submit\'])){\n$username=$_POST[\'username\'];\n$password=$_POST[\'password\'];\nif($username == \"xiao\" &amp;&amp; $password == \"123\"){\nsetcookie(\'islogin\',true,time() + 3600,\'/\');\nsetcookie(\'username\',$username,time() + 3600,\'/\');\nsetcookie(\'sex\',\'girl\',time() + 3600,\'/\');\necho \'&lt;h3&gt;登录成功&lt;/h3&gt;\' . $username;\necho \"&lt;meta http-equiv=\'refresh\' content=\'3;url=finsh.php\'&gt;\";\n}else{\necho \"&lt;font size=\'4\' color=\'red\'&gt;您还未登录&lt;/font&gt;\";\n}\n}\nfinsh.php内容\n&lt;?php\nvar_dump($_COOKIE);\necho \"登录成功\" . $_COOKIE[\'username\'];\necho \"&lt;a href=\'logout.php\'&gt;退出登录&lt;/a&gt;\";\nlogout.php内容\n&lt;?php\necho \"&lt;font size=\'6\' color=\'red\'&gt;这里是退出页面&lt;/font&gt;\";\nvar_dump($_COOKIE);\nsetcookie(\'islogin\',null,time() - 1,\'/\');//后面的斜杠不要漏了,否则操作不成功\nsetcookie(\'username\',null,time() - 1,\'/\');\nsetcookie(\'sex\',null,time() - 1,\'/\');\necho \"&lt;a href=\'index.html\'&gt;进入登录&lt;/a&gt;\";', 1, 218, 1, 0, 1, '2020-11-07 02:11:00', '2022-09-10 20:40:32'),
(1044, 1000, 'pdo事务', '<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pun\">&lt;?</span><span class=\"pln\">php</span></code></li><li class=\"L1\"><code></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"com\">//事务</span></code></li><li class=\"L4\"><code><span class=\"kwd\">try</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">    $dsn</span><span class=\"pun\">=</span><span class=\"str\">\"mysql:dbname=demo;host=localhost;port=3308\"</span><span class=\"pun\">;</span></code></li><li class=\"L6\"><code><span class=\"pln\">    $dbh</span><span class=\"pun\">=</span><span class=\"kwd\">new</span><span class=\"pln\"> PDO</span><span class=\"pun\">(</span><span class=\"pln\">$dsn</span><span class=\"pun\">,</span><span class=\"str\">\'root\'</span><span class=\"pun\">,</span><span class=\"str\">\'root\'</span><span class=\"pun\">);</span></code></li><li class=\"L7\"><code><span class=\"pun\">}</span><span class=\"kwd\">catch</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"typ\">PDOException</span><span class=\"pln\"> $e</span><span class=\"pun\">){</span></code></li><li class=\"L8\"><code><span class=\"pln\">    echo $e</span><span class=\"pun\">-&gt;</span><span class=\"pln\">getMessage</span><span class=\"pun\">();</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"kwd\">exit</span><span class=\"pun\">();</span></code></li><li class=\"L0\"><code><span class=\"pun\">}</span></code></li><li class=\"L1\"><code><span class=\"com\">//关闭自动提交</span></code></li><li class=\"L2\"><code><span class=\"pln\">$dbh</span><span class=\"pun\">-&gt;</span><span class=\"pln\">setAttribute</span><span class=\"pun\">(</span><span class=\"pln\">PDO</span><span class=\"pun\">::</span><span class=\"pln\">ATTR_AUTOCOMMIT</span><span class=\"pun\">,</span><span class=\"kwd\">false</span><span class=\"pun\">);</span></code></li><li class=\"L3\"><code><span class=\"com\">//开启事务</span></code></li><li class=\"L4\"><code><span class=\"pln\">echo $dbh</span><span class=\"pun\">-&gt;</span><span class=\"pln\">getAttribute</span><span class=\"pun\">(</span><span class=\"pln\">PDO</span><span class=\"pun\">::</span><span class=\"pln\">ATTR_AUTOCOMMIT</span><span class=\"pun\">);</span></code></li><li class=\"L5\"><code><span class=\"pln\">$dbh</span><span class=\"pun\">-&gt;</span><span class=\"pln\">beginTransaction</span><span class=\"pun\">();</span></code></li><li class=\"L6\"><code><span class=\"com\">//查看是否开启自动提交</span></code></li><li class=\"L7\"><code></code></li><li class=\"L8\"><code><span class=\"pln\">$result1</span><span class=\"pun\">=</span><span class=\"pln\">$dbh</span><span class=\"pun\">-&gt;</span><span class=\"kwd\">exec</span><span class=\"pun\">(</span><span class=\"str\">\'update jinrong set money=money-100 where name=\"张大美\"\'</span><span class=\"pun\">);</span></code></li><li class=\"L9\"><code><span class=\"pln\">$result2</span><span class=\"pun\">=</span><span class=\"pln\">$dbh</span><span class=\"pun\">-&gt;</span><span class=\"kwd\">exec</span><span class=\"pun\">(</span><span class=\"str\">\'update jinrong set money=money-200 where name=\"李阳\"\'</span><span class=\"pun\">);</span></code></li><li class=\"L0\"><code><span class=\"pln\">$result3</span><span class=\"pun\">=</span><span class=\"pln\">$dbh</span><span class=\"pun\">-&gt;</span><span class=\"kwd\">exec</span><span class=\"pun\">(</span><span class=\"str\">\'update jinrong set money=money+300 where name=\"罗晓玲\"\'</span><span class=\"pun\">);</span></code></li><li class=\"L1\"><code><span class=\"com\">//</span></code></li><li class=\"L2\"><code><span class=\"com\">//</span></code></li><li class=\"L3\"><code><span class=\"kwd\">if</span><span class=\"pun\">(</span><span class=\"pln\">$result1 </span><span class=\"pun\">&amp;&amp;</span><span class=\"pln\"> $result2 </span><span class=\"pun\">&amp;</span><span class=\"pln\"> $result3</span><span class=\"pun\">){</span></code></li><li class=\"L4\"><code><span class=\"pln\">    $dbh</span><span class=\"pun\">-&gt;</span><span class=\"pln\">commit</span><span class=\"pun\">();</span><span class=\"com\">//提交</span></code></li><li class=\"L5\"><code><span class=\"pln\">    echo </span><span class=\"str\">\"更新成功\"</span><span class=\"pun\">;</span></code></li><li class=\"L6\"><code><span class=\"pun\">}</span><span class=\"kwd\">else</span><span class=\"pun\">{</span></code></li><li class=\"L7\"><code><span class=\"pln\">    $dbh</span><span class=\"pun\">-&gt;</span><span class=\"pln\">rollBack</span><span class=\"pun\">();</span><span class=\"com\">//回滚事务</span></code></li><li class=\"L8\"><code><span class=\"pln\">    echo </span><span class=\"str\">\"更新失败\"</span><span class=\"pun\">;</span></code></li><li class=\"L9\"><code><span class=\"pun\">}</span></code></li><li class=\"L0\"><code></code></li><li class=\"L1\"><code><span class=\"com\">//恢复自动提交</span></code></li><li class=\"L2\"><code><span class=\"pln\">$dbh</span><span class=\"pun\">-&gt;</span><span class=\"pln\">setAttribute</span><span class=\"pun\">(</span><span class=\"pln\">PDO</span><span class=\"pun\">::</span><span class=\"pln\">ATTR_AUTOCOMMIT</span><span class=\"pun\">,</span><span class=\"kwd\">true</span><span class=\"pun\">);</span></code></li></ol></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/002.jpg', '&lt;?php//事务try {    $dsn=\"mysql:dbname=demo;host=localhost;port=3308\";    $dbh=new PDO($dsn,\'root\',\'root\');}catch (PDOException $e){    echo $e-&gt;getMessage();    exit();}//关闭自动提交$dbh-&gt;setAttribute(PDO::ATTR_AUTOCOMMIT,false);//开启事务echo $dbh-&gt;getAttribute(PDO::ATTR_AUTOCOMMIT);$dbh-&gt;beginTransaction();//查看是否开启自动提交$result1=$dbh-&gt;exec(\'update jinrong set money=money-100 where name=\"张大美\"\');$result2=$dbh-&gt;exec(\'update jinrong set money=money-200 where name=\"李阳\"\');$result3=$dbh-&gt;exec(\'update jinrong set money=money+300 where name=\"罗晓玲\"\');////if($result1 &amp;&amp; $result2 &amp; $result3){    $dbh-&gt;commit();//提交    echo \"更新成功\";}else{    $dbh-&gt;rollBack();//回滚事务    echo \"更新失败\";}//恢复自动提交$dbh-&gt;setAttribute(PDO::ATTR_AUTOCOMMIT,true);', 1, 250, 1, 0, 1, '2020-11-08 01:27:05', '2022-09-09 13:38:43'),
(1045, 1000, 'php头部信息header自动刷新,下载', '<p>Content-disposition 是 MIME 协议的扩展，MIME 协议指示 MIME 用户代理如何显示附加的文件</p>\n<p>//这里表示以附件形式进行下载,如果要在页面显示可以将attachment改为inline<br />header(&lsquo;Content-Disposition: attachment; filename=&rdquo;后台信息.txt&rdquo;&lsquo;);</p>\n<p>attachment:表示以附件方式下载，如果要在页面中打开，可以改为inline.</p>\n<p>　　注意:filename如果是中文会出现乱码：解决办法：</p>\n<p>　　　　1、将filename 替换为 new String(filename.getBytes(), &ldquo;ISO8859-1&rdquo;);</p>\n<p>　　　　2、将filename 替换为 URLEncoder.encode(filename, &ldquo;utf-8&rdquo;);</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>//自动刷新当前页面</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">&lt;?php\n\necho \"hello\";\nheader(\"refresh:3\");//3秒后自动刷新</code></pre>\n<p>//自动跳转</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">&lt;?php\n\necho \"hello\";\nheader(\"refresh:1;demo.php\");\nexit();</code></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/014.jpg', 'Content-disposition 是 MIME 协议的扩展，MIME 协议指示 MIME 用户代理如何显示附加的文件\n//这里表示以附件形式进行下载,如果要在页面显示可以将attachment改为inlineheader(&lsquo;Content-Disposition: attachment; filename=&rdquo;后台信息.txt&rdquo;&lsquo;);\nattachment:表示以附件方式下载，如果要在页面中打开，可以改为inline.\n　　注意:filename如果是中文会出现乱码：解决办法：\n　　　　1、将filename 替换为 new String(filename.getBytes(), &ldquo;ISO8859-1&rdquo;);\n　　　　2、将filename 替换为 URLEncoder.encode(filename, &ldquo;utf-8&rdquo;);\n&nbsp;\n&nbsp;\n//自动刷新当前页面\n&lt;?php\n\necho \"hello\";\nheader(\"refresh:3\");//3秒后自动刷新\n//自动跳转\n&lt;?php\n\necho \"hello\";\nheader(\"refresh:1;demo.php\");\nexit();', 1, 371, 1, 0, 1, '2020-11-08 16:24:41', '2022-09-11 07:31:15'),
(1046, 1000, 'php代码实例', '<p>&nbsp;</p>\n<p>后台代码</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"zh-CN\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;meta name=\"csrf-token\" content=\"{{ csrf_token() }}\"&gt;\n    &lt;meta content=\"always\" name=\"referrer\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" /&gt;\n    &lt;meta name=\"renderer\" content=\"webkit\" /&gt;\n    &lt;meta name=\"qin500_authorized\" content=\"{{ route(\'Admin::qin500_authorized\') }}\" /&gt;\n    &lt;title&gt;@yield(\'title\') - 年华流失后台管理系统&lt;/title&gt;\n    &lt;link href=\"{{ config(\'mm.__ADMIN__\') }}font-awesome-4.7.0/css/font-awesome.min.css\" type=\"text/css\" rel=\"stylesheet\"&gt;\n    &lt;link href=\"{{ config(\'mm.__ADMIN__\') }}css/base.css?i=4\" type=\"text/css\" rel=\"stylesheet\"&gt;\n    &lt;link href=\"{{ config(\'mm.__ADMIN__\') }}lib/alert/style.css\" type=\"text/css\" rel=\"stylesheet\"&gt;\n    &lt;link rel=\"shortcut icon\" href=\"/favicon.ico\" /&gt;\n    &lt;link href=\"{{ config(\'mm.__ADMIN__\') }}lib/float/css/float.css\" type=\"text/css\" rel=\"stylesheet\"&gt;\n    @if(request()-&gt;route()-&gt;getName() == \"ADMIN::index\")\n        &lt;link href=\"{{ config(\'mm.__ADMIN__\') }}css/index.css\" type=\"text/css\" rel=\"stylesheet\"&gt;\n    @endif\n&lt;/head&gt;\n&lt;body class=\"\"&gt;\n&lt;div class=\"header-top\"&gt;\n    &lt;div class=\"header-top-inner\"&gt;\n        &lt;a id=\"logo\" href=\"{{ route(\'Admin::index\') }}\"&gt;&lt;img src=\"{{ config(\'mm.__HOME__\') }}/images/logo.png\" alt=\"\"&gt;&lt;/a&gt;\n        &lt;a class=\"menushort icon\" href=\"#\"&gt;&lt;i class=\"fa fa-bars\"&gt;&lt;/i&gt;&lt;/a&gt;\n        &lt;div class=\"wid\"&gt;&lt;/div&gt;\n        &lt;div class=\"top-right\"&gt;\n            &lt;div class=\"top-head-short\"&gt;\n                &lt;div class=\"icon\" onclick=\"fullScreen()\"&gt;&lt;i class=\"fa fa-arrows-alt\"&gt;&lt;/i&gt;&lt;/div&gt;\n                &lt;a target=\"_blank\" href=\"{{ route(\'Home::index\') }}\" class=\"icon\"&gt;&lt;i class=\"fa fa-home\"&gt;&lt;/i&gt;&lt;/a&gt;\n            &lt;/div&gt;\n            &lt;div class=\"topphoto\"&gt;&lt;a class=\"q5center\" href=\"#\"&gt;&lt;img\n                        src=\"/static/home/images/i2.jpg\"&gt;\n                    &lt;span&gt;&lt;/span&gt;&lt;/a&gt;\n                &lt;ul class=\"mytopmenu\"&gt;\n                    &lt;li&gt;&lt;a href=\"\"&gt;我的信息&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;我的消息&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"\"&gt;博客配置&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"{{ route(\'Admin::quit\')  }}\"&gt;退出系统&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n&lt;/div&gt;\n&lt;div id=\"mobilemask\" class=\"mobilemask\"&gt;&lt;/div&gt;\n&lt;div class=\"main\"&gt;\n    &lt;div class=\"main-inner\"&gt;\n        &lt;div class=\"aside q5mobile-aside\"&gt;\n            @include(\'admin.aside\')\n        &lt;/div&gt;\n        &lt;div class=\"cont-wp\"&gt;\n            @if ($errors-&gt;any())\n                @foreach ($errors-&gt;all() as $error)\n                    &lt;div class=\"q5container \"&gt;\n                        &lt;div class=\"q5row \"&gt;\n                            &lt;div class=\"q5col-12 \"&gt;\n                                &lt;div class=\"q5alert alert-danger\"&gt;\n                                    &lt;strong&gt;错误!&lt;/strong&gt;  {{ $error }}\n                                    &lt;span class=\"close\"&gt;&times;&lt;/span&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                @endforeach\n            @endif\n            @if(session()-&gt;has(\"returnresult\"))\n                &lt;div class=\"q5container \"&gt;\n                    &lt;div class=\"q5row \"&gt;\n                        &lt;div class=\"q5col-12 \"&gt;\n                            &lt;div class=\"q5alert alert-{{ session(\'returnresult\')[\'status\'] ?\'success\':\'danger\' }}\"&gt;\n                                &lt;strong&gt;{{ session(\'returnresult\')[\'status\']?\'成功\':\'错误\' }}!&lt;/strong&gt; {{ session(\'returnresult\')[\'msg\'] . (session(\'returnresult\')[\'status\']? \"成功\" : \"失败\") }}\n                                &lt;span class=\"close\"&gt;&times;&lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            @endif\n\n            @section(\'content\')\n            @show\n\n            &lt;p class=\"copyright_page\"&gt;页面设计:年华流失&lt;/p&gt;\n        &lt;/div&gt;\n\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;script src=\"{{ config(\'mm.__ADMIN__\') }}js/jquery-3.4.1.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"{{ config(\'mm.__ADMIN__\') }}lib/qin500.js\"&gt;&lt;/script&gt;\n&lt;script src=\"{{ config(\'mm.__ADMIN__\') }}js/base.js\"&gt;&lt;/script&gt;\n@section(\'footer\')\n@show\n\n&lt;script&gt;\n    // var drag = new Drag(\"q5conupdatevvvv\", \"请拖动我\", \"&lt;h3&gt;这里是内容！&lt;/h3&gt;\");\n    $(\'.aside-menu-warp .aside-menu li&gt;a\').each(function (e){\n        let str=window.location.href\n        let pos=str.indexOf(\'#\')\n        if(pos &gt; 0){\n            str.substr(0,pos)\n        }\n        if(str.substr(str.length - 1 ) == \"/\"){\n            str=str.substr(0,str.length -1);\n        }\n        if($(this).attr(\'href\') == str){\n            $(this).addClass(\'active\')\n        }\n    })\n\n\n&lt;/script&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/064.jpg', '&nbsp;\n后台代码\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"zh-CN\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;meta name=\"csrf-token\" content=\"{{ csrf_token() }}\"&gt;\n    &lt;meta content=\"always\" name=\"referrer\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" /&gt;\n    &lt;meta name=\"renderer\" content=\"webkit\" /&gt;\n    &lt;meta name=\"qin500_authorized\" content=\"{{ route(\'Admin::qin500_authorized\') }}\" /&gt;\n    &lt;title&gt;@yield(\'title\') - 年华流失后台管理系统&lt;/title&gt;\n    &lt;link href=\"{{ config(\'mm.__ADMIN__\') }}font-awesome-4.7.0/css/font-awesome.min.css\" type=\"text/css\" rel=\"stylesheet\"&gt;\n    &lt;link href=\"{{ config(\'mm.__ADMIN__\') }}css/base.css?i=4\" type=\"text/css\" rel=\"stylesheet\"&gt;\n    &lt;link href=\"{{ config(\'mm.__ADMIN__\') }}lib/alert/style.css\" type=\"text/css\" rel=\"stylesheet\"&gt;\n    &lt;link rel=\"shortcut icon\" href=\"/favicon.ico\" /&gt;\n    &lt;link href=\"{{ config(\'mm.__ADMIN__\') }}lib/float/css/float.css\" type=\"text/css\" rel=\"stylesheet\"&gt;\n    @if(request()-&gt;route()-&gt;getName() == \"ADMIN::index\")\n        &lt;link href=\"{{ config(\'mm.__ADMIN__\') }}css/index.css\" type=\"text/css\" rel=\"stylesheet\"&gt;\n    @endif\n&lt;/head&gt;\n&lt;body class=\"\"&gt;\n&lt;div class=\"header-top\"&gt;\n    &lt;div class=\"header-top-inner\"&gt;\n        &lt;a id=\"logo\" href=\"{{ route(\'Admin::index\') }}\"&gt;&lt;img src=\"{{ config(\'mm.__HOME__\') }}/images/logo.png\" alt=\"\"&gt;&lt;/a&gt;\n        &lt;a class=\"menushort icon\" href=\"#\"&gt;&lt;i class=\"fa fa-bars\"&gt;&lt;/i&gt;&lt;/a&gt;\n        &lt;div class=\"wid\"&gt;&lt;/div&gt;\n        &lt;div class=\"top-right\"&gt;\n            &lt;div class=\"top-head-short\"&gt;\n                &lt;div class=\"icon\" onclick=\"fullScreen()\"&gt;&lt;i class=\"fa fa-arrows-alt\"&gt;&lt;/i&gt;&lt;/div&gt;\n                &lt;a target=\"_blank\" href=\"{{ route(\'Home::index\') }}\" class=\"icon\"&gt;&lt;i class=\"fa fa-home\"&gt;&lt;/i&gt;&lt;/a&gt;\n            &lt;/div&gt;\n            &lt;div class=\"topphoto\"&gt;&lt;a class=\"q5center\" href=\"#\"&gt;&lt;img\n                        src=\"/static/home/images/i2.jpg\"&gt;\n                    &lt;span&gt;&lt;/span&gt;&lt;/a&gt;\n                &lt;ul class=\"mytopmenu\"&gt;\n                    &lt;li&gt;&lt;a href=\"\"&gt;我的信息&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;我的消息&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"\"&gt;博客配置&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"{{ route(\'Admin::quit\')  }}\"&gt;退出系统&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n&lt;/div&gt;\n&lt;div id=\"mobilemask\" class=\"mobilemask\"&gt;&lt;/div&gt;\n&lt;div class=\"main\"&gt;\n    &lt;div class=\"main-inner\"&gt;\n        &lt;div class=\"aside q5mobile-aside\"&gt;\n            @include(\'admin.aside\')\n        &lt;/div&gt;\n        &lt;div class=\"cont-wp\"&gt;\n            @if ($errors-&gt;any())\n                @foreach ($errors-&gt;all() as $error)\n                    &lt;div class=\"q5container \"&gt;\n                        &lt;div class=\"q5row \"&gt;\n                            &lt;div class=\"q5col-12 \"&gt;\n                                &lt;div class=\"q5alert alert-danger\"&gt;\n                                    &lt;strong&gt;错误!&lt;/strong&gt;  {{ $error }}\n                                    &lt;span class=\"close\"&gt;&times;&lt;/span&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                @endforeach\n            @endif\n            @if(session()-&gt;has(\"returnresult\"))\n                &lt;div class=\"q5container \"&gt;\n                    &lt;div class=\"q5row \"&gt;\n                        &lt;div class=\"q5col-12 \"&gt;\n                            &lt;div class=\"q5alert alert-{{ session(\'returnresult\')[\'status\'] ?\'success\':\'danger\' }}\"&gt;\n                                &lt;strong&gt;{{ session(\'returnresult\')[\'status\']?\'成功\':\'错误\' }}!&lt;/strong&gt; {{ session(\'returnresult\')[\'msg\'] . (session(\'returnresult\')[\'status\']? \"成功\" : \"失败\") }}\n                                &lt;span class=\"close\"&gt;&times;&lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            @endif\n\n            @section(\'content\')\n            @show\n\n            &lt;p class=\"copyright_page\"&gt;页面设计:年华流失&lt;/p&gt;\n        &lt;/div&gt;\n\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;script src=\"{{ config(\'mm.__ADMIN__\') }}js/jquery-3.4.1.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"{{ config(\'mm.__ADMIN__\') }}lib/qin500.js\"&gt;&lt;/script&gt;\n&lt;script src=\"{{ config(\'mm.__ADMIN__\') }}js/base.js\"&gt;&lt;/script&gt;\n@section(\'footer\')\n@show\n\n&lt;script&gt;\n    // var drag = new Drag(\"q5conupdatevvvv\", \"请拖动我\", \"&lt;h3&gt;这里是内容！&lt;/h3&gt;\");\n    $(\'.aside-menu-warp .aside-menu li&gt;a\').each(function (e){\n        let str=window.location.href\n        let pos=str.indexOf(\'#\')\n        if(pos &gt; 0){\n            str.substr(0,pos)\n        }\n        if(str.substr(str.length - 1 ) == \"/\"){\n            str=str.substr(0,str.length -1);\n        }\n        if($(this).attr(\'href\') == str){\n            $(this).addClass(\'active\')\n        }\n    })\n\n\n&lt;/script&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n', 1, 328, 1, 0, 1, '2021-07-06 21:34:38', '2022-09-11 07:31:15'),
(1047, 1000, 'JavaScript 函数', '<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">function myFunction(p1, p2) {\n    return p1 * p2;              // 该函数返回 p1 和 p2 的乘积\n}</code></pre>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">$(\'.header .tophead .menu-list .menu\').click(function(){\n    $(this).children(\".sub\").slideToggle()\n    $(this).children(\'span::after\').css(\"transform\",\'rotate(-90deg)\')\n})\n\n$(\'.header .tophead .menushort\').click(function(){\n    $(\'.header .tophead .menu-list\').slideToggle()\n    $(this).toggleClass(\"open\")\n})\n</code></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/033.jpg', 'function myFunction(p1, p2) {\n    return p1 * p2;              // 该函数返回 p1 和 p2 的乘积\n}\n$(\'.header .tophead .menu-list .menu\').click(function(){\n    $(this).children(\".sub\").slideToggle()\n    $(this).children(\'span::after\').css(\"transform\",\'rotate(-90deg)\')\n})\n\n$(\'.header .tophead .menushort\').click(function(){\n    $(\'.header .tophead .menu-list\').slideToggle()\n    $(this).toggleClass(\"open\")\n})\n', 11, 364, 1, 0, 1, '2021-07-06 21:40:34', '2022-09-11 07:31:17'),
(1048, 1000, '文档打印', '<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">window.print()</code></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/046.jpg', 'window.print()', 10, 403, 1, 0, 1, '2021-07-07 00:57:21', '2022-09-11 07:31:24'),
(1049, 1000, 'liunx免密登录设置', '<p>Ssh-keygen</p>\n<p>Ssh-copy-id <a href=\"mailto:root@qin500.com\">root@qin500.com </a></p>\n<p>新建config文件</p>\n<pre class=\"line-numbers  language-markup\"><code class=\"line-numbers language-markup\">Host qin500\n\nHostName qin500.com\n\nIdentityFile C:\\Users\\qin500\\.ssh\\id_rsa User root</code></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/063.jpg', 'Ssh-keygen\nSsh-copy-id root@qin500.com \n新建config文件\nHost qin500\n\nHostName qin500.com\n\nIdentityFile C:\\Users\\qin500\\.ssh\\id_rsa User root', 12, 432, 1, 0, 1, '2021-07-07 01:04:36', '2022-09-11 07:31:19');
INSERT INTO `qin500_articles` (`id`, `uid`, `title`, `text`, `masterpic`, `pure`, `cid`, `views`, `isshow`, `zan`, `bdts`, `created_at`, `updated_at`) VALUES
(1050, 1000, 'php常用内置函数大全', '<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">php内置函数大全\n第2章　Apache函数　15\n2.1　Apache信息获取类函数　15\n2.1.1　apache_child_terminate函数：在本次请求结束后终止Apache进程　15\n2.1.2　apache_get_modules函数：获取Apache的模块列表　16\n2.1.3　apache_get_version函数：获取Apache的版本　16\n2.1.4　apache_getenv函数：获取Apache的环境变量　17\n2.1.5　apache_lookup_uri函数：获取特定的URL有关信息　17\n2.1.6　apache_note函数：获取或设置Apache请求记录　18\n2.1.7　apache_request_headers函数：获取HTTP请求的标头　19\n2.1.8　apache_response_headers函数：获取所有HTTP回应标头　19\n2.1.9　getallheaders函数：获取所有HTTP变数值　20\n2.2　Apache配置类函数　20\n2.2.1　apache_reset_timeout函数：重设Apache写操作时间　21\n2.2.2　apache_setenv函数：设置Apache的环境变量　21\n2.2.3　virtual函数：执行Apache的子请求　22\n2.3　Apache编码类函数　22\n2.3.1　ascii2ebcdic函数：将ASCII码转换为EBCDIC码　22\n2.3.2　ebcdic2ascii函数：将EBCDIC码转换为ASCII码　23\n2.4　小结　23\n\n第3章　ODBC函数　24\n3.1　ODBC连接类函数　25\n3.1.1　odbc_connect函数：打开一个ODBC连接　25\n3.1.2　odbc_close函数：关闭一个已经打开的ODBC连接　26\n3.1.3　odbc_close_all函数：关闭所有已经打开的ODBC连接　27\n3.1.4　odbc_pconnect函数：打开一个持续有效的ODBC连接　27\n3.2　ODBC操作类函数　28\n3.2.1　odbc_commit函数：更新所有处于未决状态的操作　28\n3.2.2　odbc_do函数：在打开的ODBC连接上执行SQL语句　29\n3.2.3　odbc_exec函数：执行SQL语句　30\n3.2.4　odbc_execute函数：执行一个预置的SQL语句　30\n3.2.5　odbc_free_result函数：释放传回资料所占用的内存　31\n3.2.6　odbc_prepare函数：预置SQL语句的执行　32\n3.2.7　odbc_rollback函数：撤销所有处于未决状态的操作　32\n3.3　ODBC信息获取类函数　33\n3.3.1　odbc_columnprivileges函数：列出给定表的列和相关的权限　33\n3.3.2　odbc_columns函数：列出指定表的列的名称　34\n3.3.3　odbc_cursor函数：获取光标的名称　35\n3.3.4　odbc_data_source函数：返回连接数据库的信息　35\n3.3.5　odbc_error函数：获取最后的错误代码　36\n3.3.6　odbc_errormsg函数：获取最后的错误信息　36\n3.3.7　odbc_fetch_array函数：获取结果集数组　37\n3.3.8　odbc_fetch_into函数：获取传回的指定列　38\n3.3.9　odbc_fetch_object函数：返回结果集到对象　38\n3.3.10　odbc_fetch_row函数：获取传回的一列　39\n3.3.11　odbc_field_len函数：获取字段的长度　40\n3.3.12　odbc_field_name函数：获取字段的名称　41\n3.3.13　odbc_field_num函数：获取字段的序号　41\n3.3.14　odbc_field_precision函数：获取字段的长度　42\n3.3.15　odbc_field_scale函数：获取字段的浮点数　42\n3.3.16　odbc_field_type函数：获取字段的资料类型　43\n3.3.17　odbc_foreignkeys函数：返回特定表的外来键　44\n3.3.18　odbc_gettypeinfo函数：返回数据库的类型信息　44\n3.3.19　odbc_longreadlen函数：设定传回栏的最大值　45\n3.3.20　odbc_num_fields函数：获取字段数目　45\n3.3.21　odbc_num_rows函数：获取传回的列数目　45\n3.3.22　odbc_primarykeys函数：返回列的名字作为表的主键　46\n3.3.23　odbc_procedurecolumns函数：返回检索过程的参数信息　46\n3.3.24　odbc_procedures函数：获取存在于特定数据源中的进程信息　47\n3.3.25　odbc_result_all函数：传回HTML表格信息　47\n3.3.26　odbc_result函数：获取结果数据　47\n3.3.27　odbc_specialcolumns函数：返回一个表中在传送更新时可以自动更新的列　48\n3.3.28　odbc_statistics函数：获取表的状态及其索引　49\n3.3.29　odbc_tableprivileges函数：列出表格和每个表格关联的权限　49\n3.3.30　odbc_tables函数：获取特定数据库上的表的名称　50\n3.4　ODBC设置类函数　50\n3.4.1　odbc_autocommit函数：开启或关闭自动更新　50\n3.4.2　odbc_binmode函数：设定二进制的数据处理方式　51\n3.4.3　odbc_next_result函数：检查下一个结果集是否可用　52\n3.4.4　odbc_setoption函数：调整ODBC设定　52\n3.5　小结　53\n\n第4章　MySQL函数　54\n4.1　MySQL连接类函数　54\n4.1.1　mysql_connect函数：打开一个到MySQL服务器的连接　54\n4.1.2　mysql_close函数：关闭MySQL连接　55\n4.1.3　mysql_pconnect函数：打开一个到MySQL服务器的持久链接　56\n4.2　MySQL操作类函数　57\n4.2.1　mysql_create_db函数：新建一个MySQL数据库　57\n4.2.2　mysql_data_seek函数：移动内部结果的指针　57\n4.2.3　mysql_db_query函数：发送一条MySQL查询　58\n4.2.4　mysql_drop_db函数：删除一个MySQL数据库　59\n4.2.5　mysql_escape_string函数：转义一个用来查询的字符串　59\n4.2.6　mysql_free_result函数：释放结果内存　60\n4.2.7　mysql_list_dbs函数：列出MySQL服务器中所有的数据库　60\n4.2.8　mysql_list_fields函数：列出MySQL结果中的字段　61\n4.2.9　mysql_list_processes函数：列出MySQL进程　61\n4.2.10　mysql_list_tables函数：列出MySQL数据库中的表　62\n4.2.11　mysql_ping函数：Ping一个服务器连接，如果没有连接则重新连接　63\n4.2.12　mysql_query函数：发送一条MySQL查询　63\n4.2.13　mysql_real_escape_string函数：转义SQL语句中的特殊字符　64\n4.2.14　mysql_result函数：获取结果数据　65\n4.2.15　mysql_select_db函数：选择MySQL数据库　66\n4.2.16　mysql_unbuffered_query函数：向MySQL发送一条SQL查询，并不获取和缓存结果的行　67\n4.3　MySQL信息获取类函数　67\n4.3.1　mysql_affected_rows函数：获取前一次MySQL操作所影响的记录行数　68\n4.3.2　mysql_client_encoding函数：获取字符集的名称　68\n4.3.3　mysql_db_name函数：获取数据库名　69\n4.3.4　mysql_errno函数：返回上一个MySQL操作中的错误信息的数字编码　70\n4.3.5　mysql_error函数：返回上一个MySQL操作产生的文本错误信息　70\n4.3.6　mysql_fetch_array函数：从结果集中获取一行作为关联数组，或数字数组，或二者都有　71\n4.3.7　mysql_fetch_assoc函数：从结果集中获取一行作为关联数组　72\n4.3.8　mysql_fetch_field函数：从结果集中获取列信息并作为对象返回　73\n4.3.9　mysql_fetch_lengths函数：获取结果集中每个输出的长度　75\n4.3.10　mysql_fetch_object函数：从结果集中获取一行作为对象　76\n4.3.11　mysql_fetch_row函数：从结果集中获取一行作为枚举数组　77\n4.3.12　mysql_field_flags函数：从结果集中获取字段关联的标志　77\n4.3.13　mysql_field_len函数：返回指定字段的长度　78\n4.3.14　mysql_field_name函数：获取结果集中指定字段的字段名　79\n4.3.15　mysql_field_seek函数：将结果集中的指针设定为指定的字段偏移量　80\n4.3.16　mysql_field_table函数：获取指定字段所在的表名　81\n4.3.17　mysql_field_type函数：获取结果集中指定字段的类型　81\n4.3.18　mysql_get_client_info函数：获取MySQL客户端信息　82\n4.3.19　mysql_get_host_info函数：获取MySQL主机信息　83\n4.3.20　mysql_get_proto_info函数：获取MySQL协议信息　83\n4.3.21　mysql_get_server_info函数：获取MySQL服务器信息　84\n4.3.22　mysql_info函数：获取最近一条查询的信息　84\n4.3.23　mysql_insert_id函数：获取上一个INSERT操作产生的ID　85\n4.3.24　mysql_num_fields函数：获取结果集中字段的数目　86\n4.3.25　mysql_num_rows函数：获取结果集中行的数目　86\n4.3.26　mysql_stat函数：获取当前系统状态　87\n4.3.27　mysql_tablename函数：获取表名　88\n4.3.28　mysql_thread_id函数：获取当前线程的ID　88\n4.4　小结　89\n\n第3篇　数组字符篇\n\n第5章　Arrays函数　93\n5.1　数组建立类函数　93\n5.1.1　array函数：新建一个数组　93\n5.1.2　array_combine函数：用两个数组的值作为新数组的键与值来新建一个数组　94\n5.1.3　range函数：建立一个包含指定范围单元的数组　94\n5.2　数组操作类函数　95\n5.2.1　array_chunk函数：将一个数组分割成多个数组　95\n5.2.2　array_count_values函数：统计数组中所有的值出现的次数　97\n5.2.3　array_diff_assoc函数：带索引检查计算数组的差集　97\n5.2.4　array_diff_key函数：使用键名比较计算数组的差集　98\n5.2.5　array_diff_uassoc函数：用回调函数做索引检查来计算数组的差集　98\n5.2.6　array_diff_ukey函数：用回调函数对键名比较计算数组的差集　99\n5.2.7　array_diff函数：计算数组的差集　100\n5.2.8　array_fill函数：用给定的值填充数组　100\n5.2.9　array_filter函数：用回调函数过滤数组中的单元　101\n5.2.10　array_flip函数：交换数组中的键和值　102\n5.2.11　array_intersect_assoc函数：带索引检查计算数组的交集　103\n5.2.12　array_intersect_key函数：使用键名比较计算数组的交集　103\n5.2.13　array_intersect_uassoc函数：带索引检查计算数组的交集，并用回调函数比较索引　104\n5.2.14　array_intersect_ukey函数：用回调函数比较键名来计算数组的交集　104\n5.2.15　array_intersect函数：计算数组的交集　105\n5.2.16　array_key_exists函数：检查给定的键名或索引是否存在于数组中　106\n5.2.17　array_map函数：将回调函数作用到给定数组的单元上　106\n5.2.18　array_merge_recursive函数：递归地合并一个或多个数组　107\n5.2.19　array_merge函数：合并一个或多个数组　108\n5.2.20　array_multisort函数：对多个数组或多维数组进行排序　108\n5.2.21　array_pad函数：用值将数组填补到指定长度　109\n5.2.22　array_pop函数：将数组的最后一个单元弹出　110\n5.2.23　array_push函数：将一个或多个单元压入数组的末尾　111\n5.2.24　array_rand函数：从数组中随机取出一个或多个单元　111\n5.2.25　array_reduce函数：用回调函数迭代地将数组简化为单一的值　112\n5.2.26　array_search函数：在数组中查找给定的值并返回相应的键名　113\n5.2.27　array_shift函数：移除数组开头的一个单元　114\n5.2.28　array_unique函数：移除数组中重复的值　114\n5.2.29　array_unshift函数：在数组开头插入一个或多个单元　115\n5.2.30　array_slice函数：从数组中取出一段　115\n5.2.31　array_splice函数：把数组中的一部分去掉并用其他值取代　116\n5.2.32　array_sum函数：计算数组中所有值的和　118\n5.2.33　array_uintersect_assoc函数：带索引检查计算数组的交集并用回调函数比较数据　118\n5.2.34　array_uintersect_uassoc函数：带索引检查计算数组的交集并用回调函数比较数据和索引　119\n5.2.35　array_uintersect函数：计算数组的交集并用回调函数比较数据　119\n5.2.36　array_walk_recursive函数：对数组中的每个成员递归地应用用户函数　120\n5.2.37　array_walk函数：对数组中的每个成员应用用户函数　121\n5.2.38　compact函数：用变量名和值建立一个数组　121\n5.2.39　count函数：计算数组中的单元数目或对象中的属性个数　122\n5.2.40　current函数：返回数组中的当前单元　123\n5.2.41　extract函数：从数组中将变量导入当前的符号表中　124\n5.2.42　in_array函数：查找数组中是否存在某个值　125\n5.2.43　key函数：从关联数组中获取键名　125\n5.2.44　list函数：把数组中的值赋给一些变量　126\n5.2.45　next函数：将数组中的内部指针向前移动一位　127\n5.2.46　prev函数：将数组中的内部指针倒回一位　127\n5.2.47　reset函数：将数组中的内部指针指向第一个单元　128\n5.2.48　shuffle函数：打乱一个数组　128\n5.3　数组信息获取类函数　129\n5.3.1　array_change_key_case函数：返回字符串键名全为小写或大写的数组　129\n5.3.2　array_keys函数：返回数组中所有的键名　130\n5.3.3　array_reverse函数：返回一个单元顺序相反的数组　130\n5.3.4　array_values函数：返回数组中所有的值　131\n5.3.5　each函数：返回数组中当前的键/值对并将数组指针向前移动一步　132\n5.4　数组比较类函数　132\n5.4.1　arsort函数：对数组进行逆向排序并保持索引关系　133\n5.4.2　asort函数：对数组进行排序并保持索引关系　133\n5.4.3　krsort函数：对数组按照键名逆向排序　134\n5.4.4　ksort函数：对数组按照键名排序　135\n5.4.5　natcasesort函数：用自然排序算法对数组进行不区分大小写字母的排序　135\n5.4.6　natsort函数：用自然排序算法对数组排序　136\n5.4.7　rsort函数：对数组逆向排序　137\n5.4.8　sort函数：对数组排序　137\n5.4.9　uasort函数：使用用户自定义的比较函数对数组中的值进行排序并保持索引关联　138\n5.4.10　uksort函数：使用用户自定义的比较函数对数组中的键名进行排序　139\n5.4.11　usort函数：使用用户自定义的比较函数对数组中的值进行排序　140\n5.5　小结　140\n\n\n第6章　Strings函数　142\n6.1　字符串转换类函数　142\n6.1.1　addcslashes函数：以C语言风格使用反斜线转义字符串中的字符　142\n6.1.2　addslashes函数：使用反斜线引用字符串　143\n6.1.3　chop函数：清除字符串中的连续空格　143\n6.1.4　get_html_translation_table函数：返回htmlspecialchars()函数和htmlentities()函数的转换表　144\n6.1.5　chunk_split函数：将字符串分割成小块　146\n6.1.6　hebrev函数：转换希伯来逻辑字符为可见字符　146\n6.1.7　hebrevc函数：转换希伯来语文本为可见文本，包括换行符　147\n6.1.8　html_entity_decode函数：转换HTML字符编码为字符　147\n6.1.9　htmlentities函数：转换字符为HTML字符编码　148\n6.1.10　htmlspecialchars_decode函数：转换特殊HTML字符编码为字符　149\n6.1.11　htmlspecialchars函数：转换特殊字符为HTML字符编码　149\n6.1.12　nl2br函数：将换行字符转换成&ldquo;\n&rdquo;　150\n6.1.13　quotemeta函数：加入引用符　150\n6.1.14　rtrim函数：清除字符串末尾的空白(或其他字符)　151\n6.1.15　strip_tags函数：清除HTML及PHP的标记　151\n6.1.16　stripcslashes函数：将用addslashes()函数处理后的字符串原样返回　152\n6.1.17　stripslashes函数：清除字符串中的反斜线　152\n6.1.18　strtolower函数：将字符串中的字母全部转换为小写　153\n6.1.19　strtoupper函数：将字符串中的字母全部转换为大写　153\n6.1.20　trim函数：截取字符串首尾的空格(或其他字符)　154\n6.2　字符串操作类函数　154\n6.2.1　explode函数：将字符串按指定字符切开　154\n6.2.2　str_pad函数：用一个字符串填充另一个字符串到指定长度　155\n6.2.3　str_split函数：把字符串转化为数组　156\n6.2.4　str_shuffle函数：随机打乱字符串中的字符顺序　157\n6.2.5　str_ireplace函数：将某个子字符串替换为另一个字符串　157\n6.2.6　localeconv函数：获取当地的数字和货币信息　158\n6.2.7　ltrim函数：清除字符串左端的连续空白(或者其他字符)　159\n6.2.8　money_format函数：把数字字符串转换为货币表示形式　160\n6.2.9　nl_langinfo函数：获取语言和地区信息　160\n6.2.10　number_format函数：用千位分隔符格式化数字字符串　162\n6.2.11　parse_str函数：将字符串解析为变量　163\n6.2.12　setlocale函数：设置地区信息　163\n6.2.13　similar_text函数：计算两个字符串中相匹配的字符串数量　164\n6.2.14　str_repeat函数：重复使用指定字符串　165\n6.2.15　str_replace函数：区分大小写的字符串替换　165\n6.2.16　str_word_count函数：返回字符串中的单词数　166\n6.2.17　strcasecmp函数：对两个字符串进行比较　166\n6.2.18　strlen函数：统计字符串的长度　167\n6.2.19　strnatcmp函数：使用自然顺序演算法来对比字符串　167\n6.2.20　strrev函数：颠倒字符串　168\n6.2.21　strtok函数：切开字符串　168\n6.2.22　strtr函数：转换字符串的某些字符　169\n6.2.23　substr_count函数：计算一个字符串在另一个字符串中出现的次数　170\n6.2.24　substr_replace函数：替换字符串中的一部分为另一个字符串　170\n6.2.25　substr函数：截取字符串　171\n6.2.26　ucfirst函数：将字符串中第一个字符改为大写　171\n6.2.27　ucwords函数：将字符串中每个单词的第一个字母改为大写　172\n6.2.28　wordwrap函数：将字符串按字符个数换行　172\n6.3　字符串查找类函数　173\n6.3.1　chr函数：将指定的序数转化为相应的ASCII码字符　173\n6.3.2　implode函数：将数组合并为字符串　173\n6.3.3　join函数：将数组转化为字符串　174\n6.3.4　crc32函数：计算一个字符串的crc32多项式　174\n6.3.5　strchr函数：返回字符串在另一个字符串中首次出现的位置到末尾的子字符串　175\n6.3.6　strcspn函数：返回字符串中起首不符合mask的子字符串长度　175\n6.3.7　stripos函数：查找一个字符串在另一个字符串中首次出现的位置(不区分大小写) 176\n6.3.8　stristr函数：返回一个字符串在另一个字符串中首次出现的位置到后者末尾的子字符串(不区分大小写) 　176\n6.3.9　strripos函数：不区分大小写查找字符在字符串中首次出现的位置　177\n6.3.10　strrpos函数：查找字符在字符串中最后出现的位置　177\n6.3.11　strspn函数：返回字符串中起首符合mask的子字符串长度　178\n6.3.12　strstr函数：返回字符串中某字符串开始处至结束的字符串　178\n6.4　字符串编码类函数　178\n6.4.1　bin2hex函数：将二进制字符转化为十六进制　179\n6.4.2　convert_cyr_string函数：将字符由一种Cyrillic字符转换成另一种　179\n6.4.3　convert_uudecode函数：对用uuencode算法编码的字符串解码　180\n6.4.4　convert_uuencode函数：对字符串进行uuencode算法编码　180\n6.4.5　count_chars函数：返回字符串中所有字符的信息　180\n6.4.6　ord函数：返回一个字符的ASCII码　181\n6.4.7　quoted_printable_decode函数：将qp编码字符串转换成8 位元字串　182\n6.4.8　str_rot13函数：对一个字符串进行rot13编码　182\n6.5　字符串加密类函数　183\n6.5.1　crypt函数：将字符串用DES编码加密　183\n6.5.2　md5_file函数：计算给定文件的MD5hash　183\n6.5.3　md5函数：对一个字符串进行MD5加密　184\n6.5.4　sha1_file函数：计算给定文件的sha1hash　184\n6.5.5　sha1函数：计算字符串的sha1hash　185\n6.6　字符串输出类函数　185\n6.6.1　echo函数：输出一个或多个字符　186\n6.6.2　fprintf函数：输出格式化字符串到流　186\n6.6.3　print函数：输出格式化字符串　187\n6.6.4　printf函数：输出一个格式化的字符串　187\n6.6.5　sprintf函数：返回一个格式化的字符串到变量　188\n6.6.6　sscanf函数：按照一定格式解析输入的字符串　188\n6.6.7　vfprintf函数：输出格式化字符串到流　189\n6.6.8　vprintf函数：输出一个格式化的字符串　189\n6.6.9　vsprintf函数：输出格式化的字符串到变量　190\n6.7　字符串比较类函数　190\n6.7.1　levenshtein函数：计算两个字符串的Levenshtein距离　191\n6.7.2　metaphone函数：计算字符串的metaphone键　191\n6.7.3　soundex函数：计算字符串的soundex键　192\n6.7.4　strcoll函数：对两个字符串进行比较　193\n6.7.5　strcmp函数：比较两个字符串　193\n6.7.6　strnatcasecmp函数：用自然运算法则比较字符串(不区分大小写)　194\n6.7.7　strncasecmp函数：比较字符串的前n个字符(不区分大小写)　194\n6.7.8　strncmp函数：比较两个字符串的前n个字符　195\n6.7.9　strpbrk函数：查找字符串中的一系列字符　195\n6.7.10　strpos函数：寻找字符串中某字符最先出现的位置　196\n6.7.11　strrchr函数：查找一个字符串在另一个字符串中末次出现的位置，并返回从字符串中的这个位置起，一直到字符串结尾的子字符串　196\n6.7.12　substr_compare函数：从指定起始位置起在一定长度内比较两个字符串(二进制精确，区分大小写可选)　197\n6.8　小结　197\n\n第7章　Hash函数　198\n7.1　PHP中的常用Hash函数　198\n7.1.1　hash_algos函数：返回已经注册的Hash规则列表　198\n7.1.2　hash_file函数：用指定的文件内容生成一个Hash值　199\n7.1.3　hash_final函数：完成一个增加的Hash值并返回结果摘要　200\n7.1.4　hash_hmac_file函数：用指定文件和HMAC模式生成一个包含密钥的Hash值　200\n7.1.5　hash_hmac函数：用HMAC模式生成一个包含密钥的Hash值　201\n7.1.6　hash_init函数：初始化一个增加的Hash值　201\n7.1.7　hash_update_file函数：从一个文件向一个动态的Hash值灌注数据　202\n7.1.8　hash_update_stream函数：从一个打开的数据流向一个动态的Hash值灌注数据　202\n7.1.9　hash_update函数：向一个动态的Hash值灌注数据　203\n7.1.10　hash函数：生成一个Hash值　203\n7.2　小结　204\n\n第8章　正则表达式函数　205\n8.1　Perl兼容的正则表达式函数　205\n8.1.1　preg_grep函数：返回与模式匹配的数组单元　205\n8.1.2　preg_match_all函数：进行全局正则表达式匹配　206\n8.1.3　preg_match函数：进行正则表达式匹配　207\n8.1.4　preg_quote函数：转义正则表达式字符　208\n8.1.5　preg_replace_callback函数：用回调函数执行正则表达式的查找和替换　208\n8.1.6　preg_replace函数：执行正则表达式的查找和替换　209\n8.1.7　preg_split函数：用正则表达式分割字符串　209\n8.2　小结　210\n\n第4篇　文件目录操作篇\n\n第9章　Directories函数　213\n9.1　PHP中常用的目录操作函数　213\n9.1.1　chdir函数：改变目录　213\n9.1.2　chroot函数：改变根目录　214\n9.1.3　dir函数：仿照面向对象的机制来读取一个目录　214\n9.1.4　closedir函数：关闭目录句柄　215\n9.1.5　getcwd函数：获取当前工作目录　215\n9.1.6　opendir函数：打开目录句柄　216\n9.1.7　readdir函数：从目录句柄中读取条目　216\n9.1.8　rewinddir函数：倒回目录句柄　217\n9.1.9　scandir函数：列出指定路径中的文件和目录　218\n9.2　小结　219\n\n第10章　FilePro函数　220\n10.1　PHP中常用的FilePro函数　220\n10.1.1　filepro_fieldcount函数：返回FilePro数据库上的表的数量　220\n10.1.2　filepro_fieldname函数：返回表的名称　220\n10.1.3　filepro_fieldtype函数：返回表的类型　221\n10.1.4　filepro_fieldwidth函数：返回一个表的宽度　221\n10.1.5　filepro_retrieve函数：检索数据库中的数据　221\n10.1.6　filepro_rowcount函数：返回数据库的行数　222\n10.1.7　filepro函数：将读取核对地图文件并存储表的数量和信息　222\n10.2　小结　222\n\n第11章　FileSystem函数　223\n11.1　文件打开关闭类函数　223\n11.1.1　fopen函数：打开本地或远程的文件　223\n11.1.2　fclose函数：关闭已打开的文件指针　224\n11.1.3　popen函数：根据指定模式打开进程文件指针　225\n11.1.4　pclose函数：关闭进程文件指针　225\n11.2　文件操作类函数　226\n11.2.1　chgrp函数：改变文件所属的组　226\n11.2.2　chmod函数：改变文件的访问模式　227\n11.2.3　chown函数：修改文件的所有者　227\n11.2.4　clearstatcache函数：清除文件状态缓存　228\n11.2.5　copy函数：复制文件　229\n11.2.6　delete函数：删除文件　229\n11.2.7　flock函数：锁定文件　230\n11.2.8　fpassthru函数：输出文件中的剩余数据　230\n11.2.9　fputcsv函数：将行数据格式化为CSV格式并写入文件　231\n11.2.10　fputs函数：将字符串写入文件　232\n11.2.11　fread函数：读取文件内容　232\n11.2.12　fscanf函数：将文件内容格式化输出　233\n11.2.13　fseek函数：在文件中设置指针位置　234\n11.2.14　ftruncate函数：将文件截断到指定的长度　234\n11.2.15　fwrite函数：写入文件　235\n11.2.16　glob函数：查找与模式匹配的文件路径　235\n11.2.17　link函数：建立硬连接　236\n11.2.18　move_uploaded_file函数：将上传的文件移动到新位置　236\n11.2.19　parse_ini_file函数：解析一个配置文件　237\n11.2.20　readfile函数：输出一个文件的内容　238\n11.2.21　rename函数：重命名一个文件或目录　239\n11.2.22　rewind函数：倒回文件指针　239\n11.2.23　set_file_buffer函数：设置文件缓冲区大小　240\n11.2.24　tempnam函数：在指定目录下建立临时文件　240\n11.2.25　touch函数：修改文件时间　241\n11.2.26　unlink函数：删除文件　242\n11.3　文件信息获取类函数　242\n11.3.1　fileowner函数：获取文件所有者　242\n11.3.2　fileperms函数：获取文件权限　243\n11.3.3　filesize函数：获取文件大小　243\n11.3.4　filetype函数：获取文件类型　244\n11.3.5　fstat函数：获取打开文件的统计信息　244\n11.3.6　ftell函数：返回文件指针读/写的位置　245\n11.3.7　lstat函数：返回文件或符号连接的信息　246\n11.3.8　pathinfo函数：返回文件路径信息　246\n11.3.9　realpath函数：返回规范化的文件绝对路径　247\n11.3.10　stat函数：返回文件的信息　247\n11.4　文件类型判断类函数　249\n11.4.1　is_dir函数：判断指定文件是否是目录　249\n11.4.2　is_executable函数：判断指定文件是否是可执行文件　250\n11.4.3　is_file函数：判断指定文件是否是一个正常的文件　250\n11.4.4　is_link函数：判断指定文件是否是一个符号连接　251\n11.4.5　is_readable函数：判断指定文件是否可读　251\n11.4.6　is_uploaded_file函数：判断指定文件是否是通过POST上传　252\n11.4.7　is_writable函数：判断指定文件是否可写　252\n11.5　文件目录操作类函数　253\n11.5.1　mkdir函数：建立目录　253\n11.5.2　rmdir函数：删除目录　254\n11.5.3　disk_free_space函数：返回指定目录的剩余空间　254\n11.5.4　disk_total_space函数：返回指定目录的磁盘总空间大小　255\n11.6　小结　255\n\n\n\n第12章　Stream函数　256\n12.1　PHP中的Stream函数　256\n12.1.1　stream_bucket_append函数：为队列添加数据　257\n12.1.2　stream_bucket_make_writeable函数：从操作的队列中返回一个数据对象　258\n12.1.3　stream_bucket_new函数：为当前队列创建一个新的数据　258\n12.1.4　stream_bucket_prepend函数：预备数据到队列　258\n12.1.5　stream_context_create函数：创建数据流上下文　259\n12.1.6　stream_context_get_default函数：获取默认的数据流上下文　260\n12.1.7　stream_context_get_options函数：获取数据流的设置　261\n12.1.8　stream_context_set_option函数：对数据流、数据包或者上下文进行设置　261\n12.1.9　stream_context_set_params函数：为数据流、数据包或者上下文设置参数　261\n12.1.10　stream_copy_to_stream函数：在数据流之间进行复制操作　262\n12.1.11　stream_filter_append函数：为数据流添加过滤器　262\n12.1.12　stream_filter_prepend函数：为数据流预备添加过滤器　263\n12.1.13　stream_filter_register函数：注册一个数据流的过滤器并作为PHP类执行　264\n12.1.14　stream_filter_remove函数：从一个数据流中移除过滤器　265\n12.1.15　stream_get_contents函数：读取数据流中的剩余数据到字符串　266\n12.1.16　stream_get_filters函数：返回已经注册的数据流过滤器列表　267\n12.1.17　stream_get_line函数：按照给定的定界符从数据流资源中获取行　267\n12.1.18　stream_get_meta_data函数：从封装协议文件指针中获取报头/元数据　268\n12.1.19　stream_get_transports函数：返回注册的Socket传输列表　269\n12.1.20　stream_get_wrappers函数：返回注册的数据流列表　269\n12.1.21　stream_register_wrapper函数：注册一个用PHP类实现的URL封装协议　270\n12.1.22　stream_select函数：接收数据流数组并等待它们状态的改变　272\n12.1.23　stream_set_blocking函数：将一个数据流设置为堵塞或者非堵塞状态　273\n12.1.24　stream_set_timeout函数：对数据流进行超时设置　274\n12.1.25　stream_set_write_buffer函数：为数据流设置缓冲区　274\n12.1.26　stream_socket_accept函数：接受由函数stream_ socket_server()创建的Socket连接　275\n12.1.27　stream_socket_client函数：打开网络或者UNIX主机的Socket连接　276\n12.1.28　stream_socket_enable_crypto函数：为一个已经连接的Socket打开或者关闭数据加密　277\n12.1.29　stream_socket_get_name函数：获取本地或者网络Socket的名称　278\n12.1.30　stream_socket_pair函数：创建两个无区别的Socket数据流连接　278\n12.1.31　stream_socket_recvfrom函数：从Socket获取数据，不管其连接与否　279\n12.1.32　stream_socket_sendto函数：向Socket发送数据，不管其连接与否　280\n12.1.33　stream_socket_server函数：创建一个网络或者UNIX Socket服务端　281\n12.1.34　stream_wrapper_restore函数：恢复一个事先注销的数据包　281\n12.1.35　stream_wrapper_unregister函数：注销一个URL地址包　282\n12.2　小结　282\n\n第5篇　网络通信篇\n\n第13章　Socket函数　285\n13.1　Socket连接类函数　285\n13.1.1　socket_accept函数：接受一个Socket连接　285\n13.1.2　socket_bind函数：绑定一个Socket连接　286\n13.1.3　socket_close函数：关闭Socket连接　286\n13.1.4　socket_connect函数：在Socket上初始化一个连接　286\n13.1.5　socket_create_pair函数：建立一对Socket，并存储在数组中　287\n13.1.6　Socket_create函数：建立Socket连接　289\n13.1.7　socket_listen函数：监听一个Socket连接　290\n13.2　Socket操作类函数　290\n13.2.1　socket_clear_error函数：清空Socket错误信息或者最后一个错误代码　290\n13.2.2　Socket_create_listen函数：在Socket上打开一个端口接受连接　291\n13.2.3　Socket_get_option函数：获取Socket的设置选项　292\n13.2.4　socket_getpeername函数：获取远程主机的Socket信息　293\n13.2.5　Socket_getsockname函数：获取本地主机的Socket信息　294\n13.2.6　socket_last_error函数：返回Socket最后一个错误代号　294\n13.2.7　Socket_read函数：从连接中读取设置的最大长度的字节数　295\n13.2.8　Socket_recv函数：从一个连接的Socket中接收数据　295\n13.2.9　Socket_recvfrom函数：接收数据，不管连接是否断开　297\n13.2.10　socket_select函数：查询Socket状态　297\n13.2.11　socket_send函数：发送数据　298\n13.2.12　socket_sendto函数：发送一条消息到Socket，不管连接是否断开　299\n13.2.13　socket_set_block函数：锁定Socket　300\n13.2.14　Socket_set_nonblock函数：设置不锁定状态　300\n13.2.15　socket_set_option函数：设置Socket连接选项　301\n13.2.16　socket_shutdown函数：关闭一个Socket连接　302\n13.2.17　socket_strerror函数：返回一个包含Socket错误信息的字符串　302\n13.2.18　socket_write函数：写入一个Socket　303\n13.3　小结　303\n\n第14章　SNMP函数　304\n14.1　PHP中的SNMP函数　304\n14.1.1　snmp_get_quick_print函数：返回UCD库中quick_print设置的当前值　304\n14.1.2　snmp_get_valueretrieval函数：返回SNMP值如何被返回的路径　305\n14.1.3　snmp_read_mib函数：读取并从分析MIB文件到动态的MIB树　305\n14.1.4　snmp_set_enum_print函数：返回所有的枚举值　306\n14.1.5　snmp_set_oid_numeric_print函数：返回所有的对象，包括它们各自的对象ID并指明　306\n14.1.6　snmp_set_quick_print函数：设置UCD SNMP库中quick_print的值　306\n14.1.7　snmp_set_valueretrieval函数：指明SNMP的值的返回路径　307\n14.1.8　snmpget函数：获取一个SNMP对象　307\n14.1.9　snmpgetnext函数：发送一个SNMP对象　308\n14.1.10　snmprealwalk函数：返回指定的所有对象，包括它们各自的对象ID　308\n14.1.11　snmpset函数：设置一个SNMP对象　308\n14.1.12　snmpwalk函数：从代理返回所有的SNMP对象　309\n14.1.13　snmpwalkoid函数：查询关于网络实体的信息树　309\n14.2　小结　310\n\n第15章　Session函数　311\n15.1　PHP中常用的Session函数　311\n15.1.1　session_cache_expire函数：获取或者设置当前Session的过期时间　311\n15.1.2　session_cache_limiter函数：获取或者设置当前的cache限制者　312\n15.1.3　session_commit函数：存储Session中的数据并终止Session　312\n15.1.4　session_decode函数：解密Session数据　313\n15.1.5　session_destroy函数：结束所有已经注册的Session　313\n15.1.6　session_encode函数：将当前Session会话值加密为一个字符串　314\n15.1.7　session_get_cookie_params函数：获取Session Cookie的参数　315\n15.1.8　session_id函数：获取或者设置当前的Session ID值　315\n15.1.9　session_is_registered函数：检查变量是否被注册为Session　316\n15.1.10　session_module_name函数：获取或者设置目前的Session模组　316\n15.1.11　session_name函数：获取或者设置目前的Session名称　317\n15.1.12　session_regenerate_id函数：用一个新值更新当前的Session ID　318\n15.1.13　session_register函数：注册Session为新的全局变量　318\n15.1.14　session_save_path函数：获取或者设置目前的Session保存路径　319\n15.1.15　session_set_cookie_params函数：设置Cookie的参数　319\n15.1.16　session_set_save_handler函数：设置用户级的Session存储函数　320\n15.1.17　session_start函数：初始化Session数据　321\n15.1.18　session_unregister函数：从当前Session中注销一个值　321\n15.1.19　session_unset函数：释放所有的Session变量　322\n15.1.20　session_write_close函数：向Session中写入数据并终止Session　323\n15.2　小结　323\n\n第16章　URL函数　324\n16.1　PHP中的URL函数　324\n16.1.1　base64_decode函数：对使用MIME base64编码的数据进行解码　324\n16.1.2　base64_encode函数：使用MIME base64对数据进行编码　325\n16.1.3　get_headers函数：获取HTTP请求头部信息　325\n16.1.4　get_meta_tags函数：从一个文件中提取所有的meta标签并返回一个数组　326\n16.1.5　http_build_query函数：生成url-encoded之后的请求字符串　327\n16.1.6　parse_url函数：解析URL并返回其组成部分　328\n16.1.7　rawurldecode函数：对已编码的URL字符串进行解码　328\n16.1.8　rawurlencode函数：按照RFC 1738对URL进行编码　328\n16.1.9　urldecode函数：解码已编码的URL字符串　329\n16.1.10　urlencode函数：编码URL字符串　329\n16.2　小结　330\n\n第17章　Mail函数　331\n17.1　PHP中的Mail函数　331\n17.1.1　ezmlm_hash函数：计算EZMLM所需的散列值　331\n17.1.2　mail函数：发送邮件　332\n17.2　小结　333\n\n第18章　HTTP函数　334\n18.1　PHP中的HTTP函数　334\n18.1.1　header函数：发送一个原始HTTP标头　334\n18.1.2　headers_list函数：返回已发送(或准备发送) 的响应标头的列表　335\n18.1.3　headers_sent函数：检查标头是否已被发送以及在哪里被发送　335\n18.1.4　setcookie函数：发送一个Cookie信息　336\n18.1.5　setrawcookie函数：发送一个其值未经urlencode编码的Cookie　337\n18.2　小结　337\n\n第19章　FTP函数　338\n19.1　FTP连接类函数　338\n19.1.1　ftp_close函数：关闭一个活动的FTP连接　338\n19.1.2　ftp_connect函数：建立一个新的FTP连接　339\n19.1.3　ftp_login函数：登录FTP服务器　339\n19.1.4　ftp_ssl_connect函数：通过SSL连接FTP服务器　340\n19.1.5　ftp_quit函数：关闭一个活动的FTP连接　340\n19.2　FTP文件操作类函数　341\n19.2.1　ftp_cdup函数：切换到当前目录的父目录　341\n19.2.2　ftp_chdir函数：在FTP服务器上切换当前目录　341\n19.2.3　ftp_chmod函数：修改FTP服务器文件的访问权限　342\n19.2.4　ftp_delete函数：删除FTP服务器上的一个文件　342\n19.2.5　ftp_fget函数：从FTP服务器上下载一个文件并保存到本地一个已经打开的文件中343\n19.2.6　ftp_fput函数：上传一个已经打开的文件到FTP服务器　344\n19.2.7　ftp_get函数：从FTP服务器上下载一个文件　344\n19.2.8　ftp_mdtm函数：返回指定文件的最后修改时间　345\n19.2.9　ftp_mkdir函数：建立新目录　346\n19.2.10　ftp_nb_continue函数：连续获取/发送文件　346\n19.2.11　ftp_nb_fget函数：下载远程FTP服务器文件　347\n19.2.12　ftp_nb_fput函数：上传文件到FTP服务器　348\n19.2.13　ftp_nb_get函数：从FTP服务器上获取文件并写入本地文件　348\n19.2.14　ftp_nb_put函数：存储一个文件至FTP服务器　349\n19.2.15　ftp_nlist函数：返回给定目录的文件列表　350\n19.2.16　ftp_put函数：上传文件到FTP服务器　350\n19.2.17　ftp_pwd函数：返回当前目录名　351\n19.2.18　ftp_rename函数：更改FTP服务器上指定的文件名　351\n19.2.19　ftp_rmdir函数：删除一个目录　352\n19.2.20　ftp_size函数：返回指定文件的大小　352\n19.3　FTP服务器访问类函数　353\n19.3.1　ftp_get_option函数：返回当前FTP连接的各种不同的选项设置　353\n19.3.2　ftp_pasv函数：设置当前FTP被动模式是否打开　354\n19.3.3　ftp_set_option函数：设置各种FTP运行时选项　354\n19.3.4　ftp_systype函数：返回远程FTP服务器的系统类型　355\n19.4　FTP命令类函数　355\n19.4.1　ftp_alloc函数：发送ALO命令到远程的FTP服务器　355\n19.4.2　ftp_exec函数：请求运行一条FTP命令　356\n19.4.3　ftp_raw函数：发送命令到FTP服务器　357\n19.4.4　ftp_rawlist函数：返回指定目录下文件的详细列表　357\n19.4.5　ftp_site函数：向服务器发送SITE命令　358\n19.5　小结　358\n\n第20章　Network函数　359\n20.1　主机操作类Network函数　359\n20.1.1　checkdnsrr函数：查找主机的域名记录　359\n20.1.2　dns_check_record函数：查找主机的DNS记录　359\n20.1.3　dns_get_mx函数：获取主机的MX记录　360\n20.1.4　dns_get_record函数：获取主机的DNS记录　360\n20.1.5　gethostbyaddr函数：返回主机名称　360\n20.1.6　gethostbyname函数：返回IP地址　361\n20.1.7　gethostbynamel函数：返回IP地址列表　361\n20.1.8　getmxrr函数：根据给出的域名返回MX记录　362\n20.1.9　getprotobyname函数：返回协议名对应的协议号　362\n20.1.10　getprotobynumber函数：返回协议号对应的协议名称　363\n20.1.11　getservbyname函数：获取协议名称对应的端口号　363\n20.1.12　getservbyport函数：获取端口对应的协议名称　364\n20.2　日志操作类Network函数　365\n20.2.1　closelog函数：关闭系统日志　365\n20.2.2　define_syslog_variables函数：初始化所有系统日志的内容　365\n20.2.3　openlog函数：打开到系统日志的连接　366\n20.2.4　syslog函数：产生一个系统日志　367\n20.3　其他操作类Network函数　368\n20.3.1　debugger_off函数：禁用PHP DEBUG功能　368\n20.3.2　debugger_on函数：启用PHP DEBUG功能　368\n20.3.3　fsockopen函数：打开网络Socket连接　368\n20.3.4　inet_ntop函数：把网络IP地址转换为可识别的形式　369\n20.3.5　inet_pton函数：把可识别形式的IP地址转换为网络IP　369\n20.3.6　ip2long函数：把IP地址转换为一个整数　370\n20.3.7　long2ip函数：把一个整数转换为IP地址　370\n20.3.8　pfsockopen函数：打开网络Socket持续连接　371\n20.4　小结　371\n\n第6篇　图像处理篇\n\n第21章　Exif函数　375\n21.1　PHP中的Exif函数　375\n21.1.1　exif_imagetype函数：判断一个图像的类型　375\n21.1.2　exif_read_data函数：从JPEG或TIFF文件中读取Exif头信息　376\n21.1.3　exif_tagname函数：获取图像索引的头信息　377\n21.1.4　exif_thumbnail函数：获取嵌入在TIFF或JPEG图像中的缩略图　377\n21.1.5　read_exif_data函数：从JPEG或TIFF文件中读取Exif头信息　378\n21.2　小结　378\n\n第22章　Image函数　379\n22.1　PHP中的Image函数　379\n22.1.1　gd_info函数：获取当前安装的GD库的信息　379\n22.1.2　getimagesize函数：获取图像的大小　381\n22.1.3　image_type_to_extension函数：获取图像类型的文件后缀　381\n22.1.4　image_type_to_mime_type函数：判断一个IMAGETYPE常量的MIME类型　382\n22.1.5　image2wbmp函数：以WBMP格式将图像输出到浏览器或文件　383\n22.1.6　imagealphablending函数：设定图像的混色模式　383\n22.1.7　imageantialias函数：是否使用antialias(抗锯齿)功能　384\n22.1.8　imagearc函数：画椭圆弧　384\n22.1.9　imagechar函数：水平地画一个字符　386\n22.1.10　imagecharup函数：垂直地画一个字符　386\n22.1.11　imagecolorallocate函数：为一幅图像分配颜色　387\n22.1.12　imagecolorallocatealpha 函数：为一幅图像分配颜色+alpha　388\n22.1.13　imagecolorat函数：获取某像素的颜色索引值　389\n22.1.14　imagecolorclosest函数：获取与指定颜色最接近的颜色的索引值　390\n22.1.15　imagecolorclosestalpha函数：获取与指定颜色加透明度最接近的颜色的索引值390\n22.1.16　imagecolorclosesthwb函数：获取与指定颜色最接近的色度的黑白色的索引　391\n22.1.17　imagecolordeallocate函数：取消图像颜色的分配　391\n22.1.18　imagecolorexact函数：获取指定颜色的索引值　392\n22.1.19　imagecolorexactalpha函数：获取指定颜色加透明度的索引值　393\n22.1.20　imagecolormatch函数：使一个图像中调色板版本的颜色与真彩色版本更能匹配393\n22.1.21　imagecolorresolve函数：获取指定颜色的索引值或有可能得到的最接近的替代值393\n22.1.22　imagecolorresolvealpha函数：获取指定颜色透明度的索引值或有可能得到的最接近的替代值　394\n22.1.23　imagecolorset函数：给指定调色板索引设定颜色　394\n22.1.24　imagecolorsforindex函数：获取某索引的颜色　395\n22.1.25　imagecolorstotal函数：获取一幅图像的调色板中颜色的数目　395\n22.1.26　imagecolortransparent函数：将某个颜色定义为透明色　396\n22.1.27　imageconvolution函数：申请一个3*3的卷积矩阵　396\n22.1.28　imagecopy函数：复制图像的一部分　397\n22.1.29　imagecopymerge函数：复制并合并图像的一部分　397\n22.1.30　imagecopymergegray函数：用灰度复制并合并图像的一部分　398\n22.1.31　imagecopyresampled函数：重采样复制部分图像并调整大小　398\n22.1.32　imagecopyresized函数：复制部分图像并调整大小　399\n22.1.33　imagecreate函数：新建一个基于调色板的图像　400\n22.1.34　imagecreatefromgd2函数：从GD 2文件或URL中新建一个图像　401\n22.1.35　imagecreatefromgd2part函数：从给定的GD 2文件或URL中的一部分新建一个图像　401\n22.1.36　imagecreatefromgd函数：从GD文件或URL中新建一个图像　402\n22.1.37　imagecreatefromgif函数：从GIF文件或URL中新建一个图像　402\n22.1.38　imagecreatefromjpeg函数：从JPEG文件或URL中新建一个图像　402\n22.1.39　imagecreatefrompng函数：从PNG文件或URL中新建一个图像　403\n22.1.40　imagecreatefromstring函数：从字符串中的图像流新建一个图像　403\n22.1.41　imagecreatefromwbmp函数：从WBMP文件或URL中新建一个图像　404\n22.1.42　imagecreatefromxbm函数：从XBM文件或URL中新建一个图像　405\n22.1.43　imagecreatefromxpm函数：从XPM文件或URL中新建一个图像　405\n22.1.44　imagecreatetruecolor函数：新建一个真彩色图像　405\n22.1.45　imagedashedline函数：画一条虚线　406\n22.1.46　imagedestroy函数：销毁一个图像　407\n22.1.47　imageellipse函数：画一个椭圆　408\n22.1.48　imagefill函数：用指定颜色填充一个区域　409\n22.1.49　imagefilledarc函数：画一个椭圆弧并填充　410\n22.1.50　imagefilledellipse函数：画一个椭圆并填充　411\n22.1.51　imagefilledpolygon函数：画一个多边形并填充　412\n22.1.52　imagefilledrectangle函数：画一个矩形并填充　413\n22.1.53　imagefilltoborder函数：区域填充到指定颜色的边界为止　414\n22.1.54　imagefilter函数：对图像使用过滤器　415\n22.1.55　imagefontheight函数：获取字体高度　416\n22.1.56　imagefontwidth函数：获取字体宽度　416\n22.1.57　imageftbbox函数：给出一个使用FreeType2字体的文本框　416\n22.1.58　imagefttext函数：使用FreeType2字体将文本写入图像　417\n22.1.59　imagegammacorrect函数：对GD图像应用gamma修正　417\n22.1.60　imagegd2函数：将GD 2图像输出到浏览器或文件　418\n22.1.61　imagegd函数：将GD图像输出到浏览器或文件　418\n22.1.62　imagegif函数：以GIF格式将图像输出到浏览器或文件　419\n22.1.63　imageinterlace函数：激活或禁止隔行扫描　420\n22.1.64　imageistruecolor函数：检查图像是否为真彩色图像　420\n22.1.65　imagejpeg函数：以JPEG格式将图像输出到浏览器或文件　421\n22.1.66　imagelayereffect函数：设定alpha混色标志以使用绑定的libgd分层效果　421\n22.1.67　imageline函数：画一条线段　422\n22.1.68　imageloadfont函数：载入一个新字体　423\n22.1.69　imagepalettecopy函数：将调色板从一幅图像复制到另一幅　423\n22.1.70　imagepng函数：以PNG格式将图像输出到浏览器或文件　424\n22.1.71　imagepolygon函数：画一个多边形　424\n22.1.72　imagepsbbox函数：给出一个使用PostScript Type1字体的文本框　426\n22.1.73　imagepsencodefont函数：改变字体中的字符编码矢量　426\n22.1.74　imagepsextendfont函数：扩充或精简字体　427\n22.1.75　imagepsfreefont函数：释放一个PostScript Type1字体所占用的内存　427\n22.1.76　imagepsloadfont函数：从文件中加载一个PostScript Type1字体　427\n22.1.77　imagepsslantfont函数：倾斜某字体　428\n22.1.78　imagepstext函数：用PostScript Type1字体把文本字符串画在图像上　428\n22.1.79　imagerectangle函数：画一个矩形　429\n22.1.80　imagerotate函数：用给定角度旋转图像　430\n22.1.81　imagesavealpha函数：设置标记以在保存PNG图像时保存完整的alpha通道信息430\n22.1.82　imagesetbrush 函数：设定画线用的画笔图像　431\n22.1.83　imagesetpixel函数：画一个单一的像素　431\n22.1.84　imagesetstyle函数：设定画线的风格　432\n22.1.85　imagesetthickness函数：设定画线的宽度　434\n22.1.86　imagesettile函数：设定用于填充的贴图　434\n22.1.87　imagestring函数：水平地画一行字符串　434\n22.1.88　imagestringup函数：垂直地画一行字符串　435\n22.1.89　imagesx函数：获取图像宽度　436\n22.1.90　imagesy函数：获取图像高度　436\n22.1.91　imagetruecolortopalette函数：将真彩色图像转换为调色板图像　437\n22.1.92　imagettfbbox函数：取得使用TrueType字体的文本的范围　437\n22.1.93　imagettftext函数：用TrueType字体向图像写入文本　438\n22.1.94　imagetypes函数：返回当前PHP版本所支持的图像类型　439\n22.1.95　imagewbmp函数：以WBMP格式将图像输出到浏览器或文件　439\n22.1.96　imagexbm函数：将XBM图像输出到浏览器或文件　440\n22.1.97　iptcembed函数：将二进制IPTC数据嵌入一幅JPEG图像中　440\n22.1.98　iptcparse函数：将二进制IPTC块解析为单个标记　441\n22.1.99　jpeg2wbmp函数：将JPEG图像文件转换为WBMP图像文件　441\n22.1.100　png2wbmp函数：将PNG图像文件转换为WBMP图像文件　442\n22.2　小结　442\n\n第7篇　Win32函数篇\n\n第23章　Win32API函数　445\n23.1　PHP中的Win32API函数　445\n23.1.1　w32api_deftype函数：为w32api_functions函数定义一个类型　445\n23.1.2　w32api_init_dtype函数：创建了一个数据类型的实例，并且将函数返回值填入实例中　446\n23.1.3　w32api_invoke_function函数：带一个传递参数的执行函数，传递参数在函数名的后面　446\n23.1.4　w32api_register_function函数：从指定函数库中使用PHP注册一个函数　447\n23.1.5　w32api_set_call_method函数：设置调用的方法　447\n23.2　小结　447\n\n第24章　Win32PS函数　448\n24.1　PHP中的Win32PS函数　448\n24.1.1　win32_ps_list_procs函数：列出不同进程的内存使用情况和CPU时间　448\n24.1.2　win32_ps_stat_mem函数：列出当前系统的内存使用情况和CPU时间　449\n24.1.3　win32_ps_stat_proc函数：列出特定进程的内存使用情况和CPU时间　450\n\n\n\n\n第8篇　XML函数篇\n\n第25章　XML解析函数　453\n25.1　PHP中的语法解析函数　453\n25.1.1　utf8_decode函数：将用UTF-8方式编码的ISO-8859-1字符串转换成单字节的ISO-8859-1字符串　453\n25.1.2　utf8_encode函数：将ISO-8859-1编码的字符串转换为UTF-8编码　454\n25.1.3　xml_error_string函数：获取XML解析器的错误字符串　454\n25.1.4　xml_get_current_byte_index函数：获取XML解析器的当前字节索引　455\n25.1.5　xml_get_current_column_number函数：获取XML解析器的当前列号　455\n25.1.6　xml_get_current_line_number函数：获取XML解析器的当前行号　456\n25.1.7　xml_get_error_code函数：获取XML解析器的错误代码　456\n25.1.8　xml_parse_into_struct函数：将XML数据解析到数组中　457\n25.1.9　xml_parse函数：开始解析一个XML文档　458\n25.1.10　xml_parser_create_ns函数：生成一个支持命名空间的XML解析器　458\n25.1.11　xml_parser_create函数：建立一个XML解析器　459\n25.1.12　xml_parser_free函数：释放指定的XML解析器　459\n25.1.13　xml_parser_get_option函数：从XML解析器获取选项设置信息　460\n25.1.14　xml_parser_set_option函数：为指定的XML解析器进行选项设置　460\n25.1.15　xml_set_character_data_handler函数：建立字符数据处理器　461\n25.1.16　xml_set_default_handler函数：建立默认处理器　461\n25.1.17　xml_set_element_handler函数：建立起始和终止元素处理器　462\n25.1.18　xml_set_end_namespace_decl_handler函数：建立终止命名空间声明处理器　464\n25.1.19　xml_set_external_entity_ref_handler函数：建立外部实体指向处理器　464\n25.1.20　xml_set_notation_decl_handler函数：建立注释声明处理器　465\n25.1.21　xml_set_object函数：在对象中使用XML解析器　466\n25.1.22　xml_set_processing_instruction_handler函数：建立处理指令处理器　467\n25.1.23　xml_set_start_namespace_decl_handler函数：建立起始命名空间声明处理器　468\n25.1.24　xml_set_unparsed_entity_decl_handler函数：建立未解析实体定义声明处理器468\n25.2　小结　469\n\n第26章　XMLRPC函数　470\n26.1　PHP中的XMLRPC函数　470\n26.1.1　xmlrpc_decode_request函数：将XML译码为PHP本身的类型　470\n26.1.2　xmlrpc_decode函数：将XML译码为PHP本身的类型　471\n26.1.3　xmlrpc_encode_request函数：为PHP的值生成XML　471\n26.1.4　xmlrpc_encode函数：为PHP的值生成XML　472\n26.1.5　xmlrpc_get_type函数：为PHP值获取XMLRPC的类型　472\n26.1.6　xmlrpc_is_fault函数：检查XMLRPC是否出错　473\n26.1.7　xmlrpc_parse_method_descriptions函数：将XML译码成方法描述的列表　474\n26.1.8　xmlrpc_server_add_introspection_data函数：添加自我描述的文档　474\n26.1.9　xmlrpc_server_call_method函数：解析XML请求同时调用方法　475\n26.1.10　xmlrpc_server_create函数：创建一个XMLRPC服务端　475\n26.1.11　xmlrpc_server_destroy函数：销毁服务端资源　476\n26.1.12　xmlrpc_server_register_introspection_callback函数：注册一个PHP函数用于生成文档　476\n26.1.13　xmlrpc_server_register_method函数：注册一个PHP函数用于匹配XMLRPC方法名　477\n26.1.14　xmlrpc_set_type函数：为一个PHP字符串值设置XMLRPC的类型　478\n26.2　小结　479\n\n第9篇　综合函数篇\n\n第27章　Errors and Logging函数　483\n27.1　PHP中的Errors and Logging函数　483\n27.1.1　debug_backtrace函数：产生一个backtrace　483\n27.1.2　debug_print_backtrace函数：输出一个PHP backtrace　484\n27.1.3　error_log函数：发送一个错误信息到指定位置　484\n27.1.4　error_reporting函数：设置PHP错误报告等级　485\n27.1.5　restore_error_handler函数：恢复错误信息指针　486\n27.1.6　restore_exception_handler函数：恢复事先定义的例外指针　487\n27.1.7　set_error_handler函数：设置一个用户自定义的错误信息函数　487\n27.1.8　set_exception_handler函数：设置一个用户自定义的例外句柄函数　489\n27.1.9　trigger_error函数：产生一个用户级的错误、警告或者注意信息　489\n27.2　小结　490\n\n第28章　Math函数　491\n28.1　数学计算函数　491\n28.1.1　abs函数：求绝对值　491\n28.1.2　ceil函数：进一法取整　492\n28.1.3　floor函数：舍去法取整　492\n28.1.4　fmod函数：返回除法的浮点数余数　492\n28.1.5　log10函数：返回以10为底的对数　493\n28.1.6　log1p函数：返回log(1+number)　494\n28.1.7　log函数：返回指定数值的(自然)　对数494\n28.1.8　pow函数：返回指定数值的n次方　495\n28.1.9　round：对浮点数进行四舍五入运算　495\n28.1.10　sqrt函数：返回指定数值的平方根　496\n28.2　数学三角函数　496\n28.2.1　acos函数：求反余弦　497\n28.2.2　acosh函数：求反双曲余弦　497\n28.2.3　asin函数：求反正弦　497\n28.2.4　asinh函数：求反双曲正弦　498\n28.2.5　atan2函数：计算两个参数的反正切　498\n28.2.6　atan函数：求反正切　499\n28.2.7　atanh函数：求反双曲正切　499\n28.2.8　cos函数：求余弦　499\n28.2.9　cosh函数：求双曲余弦　500\n28.2.10　sin函数：求正弦　500\n28.2.11　sinh函数：求双曲正弦　501\n28.2.12　tan函数：求正切　501\n28.2.13　tanh函数：求双曲正切　501\n28.3　求最值函数　502\n28.3.1　getrandmax函数：显示随机数最大的可能值　502\n28.3.2　max函数：找出最大值　502\n28.3.3　min函数：找出最小值　503\n28.3.4　mt_getrandmax函数：显示随机数的最大可能值　504\n28.4　进制转换函数　504\n28.4.1　base_convert函数：在任意进制之间转换数字　505\n28.4.2　bindec函数：二进制转换为十进制　505\n28.4.3　decbin函数：十进制转换为二进制　506\n28.4.4　dechex函数：十进制转换为十六进制　506\n28.4.5　decoct函数：十进制转换为八进制　507\n28.4.6　hexdec函数：十六进制转换为十进制　507\n28.4.7　octdec函数：八进制转换为十进制　507\n28.5　其他数学函数　508\n28.5.1　deg2rad函数：将角度转换为弧度　508\n28.5.2　exp函数：计算e的指数　508\n28.5.3　expm1函数：返回exp(number)-1　509\n28.5.4　hypot函数：计算直角三角形的斜边长度　509\n28.5.5　is_finite函数：判断是否为有限值　510\n28.5.6　is_infinite函数：判断是否为无限值　510\n28.5.7　is_nan函数：判断是否为合法数值　511\n28.5.8　lcg_value函数：组合线性同余发生器　511\n28.5.9　mt_rand函数：生成更好的随机数　512\n28.5.10　mt_srand函数：播下一个更好的随机数发生器种子　512\n28.5.11　pi函数：获取圆周率值　513\n28.5.12　rad2deg函数：将弧度数转换为相应的角度数　513\n28.5.13　rand函数：产生一个随机整数　514\n28.5.14　srand函数：播下随机数发生器种子　514\n28.6　小结　515\n\n第29章　Output Control函数　516\n29.1　PHP中的输出控制函数　516\n29.1.1　flush函数：刷新输出缓冲　516\n29.1.2　ob_clean函数：清空输出缓冲　517\n29.1.3　ob_end_clean函数：清空缓冲区并且关闭正在进行的输出缓冲　518\n29.1.4　ob_end_flush函数：发送缓冲区数据并且关闭缓冲区　518\n29.1.5　ob_flush函数：发送缓冲区数据　519\n29.1.6　ob_get_clean函数：获取缓冲区内容并且结束缓冲区　519\n29.1.7　ob_get_contents函数：获取缓冲区数据　520\n29.1.8　ob_get_flush函数：刷新缓冲区数据，返回数据并且关闭缓冲区　520\n29.1.9　ob_get_length函数：获取缓冲区长度　521\n29.1.10　ob_get_level函数：获取缓冲区等级　522\n29.1.11　ob_get_status函数：获取缓冲区状态　522\n29.1.12　ob_gzhandler函数：供ob_start使用的回调函数用来压缩输出缓冲区　523\n29.1.13　ob_implicit_flush函数：打开或者关闭原本固有的输出缓冲区　524\n29.1.14　ob_list_handlers函数：列出所有使用的输出句柄　525\n29.1.15　ob_start函数：打开缓冲区　525\n29.1.16　output_add_rewrite_var函数：添加URL rewrite的值　526\n29.1.17　output_reset_rewrite_vars函数：重置URL rewrite的值　526\n29.2　小结　527\n\n第30章　PHP Options/Info函数　528\n30.1　PHP信息获取类函数　528\n30.1.1　assert函数：检查assertion声明是否错误　528\n30.1.2　extension_loaded函数：检查PHP扩展是否加载　529\n30.1.3　get_cfg_var函数：获取PHP配置选项的值　529\n30.1.4　get_current_user函数：获取当前PHP脚本的所有者的名称　530\n30.1.5　get_defined_constants函数：返回一个包含PHP预定义常量信息的数组　531\n30.1.6　get_extension_funcs函数：返回一个包含指定模块中的所有函数名称的数组　532\n30.1.7　get_include_path函数：返回当前配置的文件包含路径的信息　534\n30.1.8　get_included_files函数：返回一个关于文件包含信息的数组　534\n30.1.9　get_loaded_extensions函数：返回一个包含所有装载模块信息的数组　535\n30.1.10　get_magic_quotes_gpc函数：获取magic_quotes_gpc的状态信息　536\n30.1.11　get_magic_quotes_runtime函数：获取magic_quotes_ runtime的状态信息　537\n30.1.12　get_required_files函数：返回一个关于文件包含信息的数组　537\n30.1.13　getenv函数：获取PHP环境变量的值　538\n30.1.14　getlastmod函数：获取当前PHP页面文件的最后修改时间　539\n30.1.15　getmygid函数：获取当前PHP脚本页面所有者的GID号码　539\n30.1.16　getmyinode函数：获取当前PHP脚本页面的INODE号码　540\n30.1.17　getmypid函数：获取PHP的PID　541\n30.1.18　getmyuid函数：获取PHP脚本页面所有者的UID号码　541\n30.1.19　getopt函数：从命令行参数列表获取设置　542\n30.1.20　getrusage函数：获取当前的资源语法　542\n30.1.21　ini_get_all函数：获取所有配置选项　543\n30.1.22　ini_get函数：获取配置选项的值　544\n30.1.23　memory_get_usage函数：返回PHP脚本占用的内存空间　544\n30.1.24　php_ini_scanned_files函数：返回配置文件目录下的配置文件列表　545\n30.1.25　php_logo_guid函数：获取LOGO图片的GUID　546\n30.1.26　php_sapi_name函数：获取PHP和Web服务器之间的接口类型　546\n30.1.27　php_uname函数：获取PHP脚本运行的操作系统信息　547\n30.1.28　phpcredits函数：打印credits列表　548\n30.1.29　phpinfo函数：输出PHP的信息　549\n30.1.30　phpversion函数：获取PHP版本　550\n30.1.31　zend_logo_guid函数：获取ZEND的LOGO图片的GUID　550\n30.1.32　zend_version函数：获取ZEND引擎的版本　551\n30.2　PHP配置类函数　551\n30.2.1　assert_options函数：设置或者获取不同的声明标记　551\n30.2.2　ini_alter函数：设置PHP配置选项的值　552\n30.2.3　ini_restore函数：恢复配置选项的值　564\n30.2.4　ini_set函数：设置PHP配置选项的值　565\n30.2.5　putenv函数：设置环境变量　565\n30.2.6　restore_include_path函数：恢复文件包含路径配置信息　566\n30.2.7　set_include_path函数：设置文件包含路径配置选项　566\n30.2.8　set_magic_quotes_runtime函数：设置magic_quotes运行时间　567\n30.2.9　set_time_limit函数：设置最大执行时间　567\n30.3　其他类函数　568\n30.3.1　dl函数：加载PHP的扩展模块　568\n30.3.2　main函数：只是一个挂名的main()函数　568\n30.3.3　version_compare函数：比较PHP两个版本值　569\n30.4　小结　570\n\n第31章　Program Execution函数　571\n31.1　PHP中的程序执行函数　571\n31.1.1　escapeshellarg函数：过滤用作命令参数的字符串　571\n31.1.2　escapeshellcmd函数：过滤用作命令的字符串中的特殊字符　571\n31.1.3　exec函数：执行命令　572\n31.1.4　passthru函数：执行程序但不输出数据　573\n31.1.5　proc_close函数：关闭一个由函数proc_open()打开的进程，并返回进程的退出\n代码　574\n31.1.6　proc_get_status函数：获取进程的状态信息　574\n31.1.7　proc_nice函数：改变当前进程的优先权　575\n31.1.8　proc_open函数：执行命令并且打开输入输出文件指针　576\n31.1.9　proc_terminate函数：杀死进程　577\n31.1.10　shell_exec函数：执行命令并且将完整的输出结果作为一个字符串返回　578\n31.1.11　system函数：执行程序并输出结果　578\n31.2　小结　579\n\n第32章　Date/Time函数　580\n32.1　PHP中的日期、时间函数　580\n32.1.1　checkdate函数：验证一个格里高里日期　580\n32.1.2　date_default_timezone_get函数：获取一个脚本中所有日期、时间函数所使用的默认时区　581\n32.1.3　date_default_timezone_set函数：设定用于一个脚本中所有日期、时间函数的默认时区　582\n32.1.4　date_sunrise函数：返回给定的日期与地点的日出时间　582\n32.1.5　date_sunset函数：返回给定的日期与地点的日落时间　583\n32.1.6　date函数：格式化一个本地时间/日期　583\n32.1.7　getdate函数：获取日期/时间信息　586\n32.1.8　gettimeofday函数：获取当前时间　587\n32.1.9　gmdate函数：格式化一个GMT/UTC日期/时间　588\n32.1.10　gmmktime函数：获取GMT日期的UNIX时间戳　588\n32.1.11　gmstrftime函数：根据区域设置格式化GMT/UTC时间/日期　589\n32.1.12　idate函数：将本地时间、日期格式化为整数　589\n32.1.13　localtime函数：获取本地时间　590\n32.1.14　microtime函数：返回当前UNIX时间戳和微秒数　591\n32.1.15　mktime函数：获取一个日期的UNIX时间戳　592\n32.1.16　strftime函数：根据区域设置格式化本地时间/日期　593\n32.1.17　strptime函数：解析由strftime生成的日期/时间　595\n32.1.18　strtotime函数：将任何英文文本的日期、时间描述解析为UNIX时间戳　595\n32.1.19　time函数：返回当前的UNIX时间戳　596\n32.2　小结　597\n\n第33章　Classes/Objects函数　598\n33.1　PHP中的类/对象函数　598\n33.1.1　class_exists函数：检查类是否已定义　598\n33.1.2　get_class_methods函数：返回由类的方法名组成的数组　599\n33.1.3　get_class_vars函数：返回由类的默认属性组成的数组　600\n33.1.4　get_class函数：返回对象的类名　601\n33.1.5　get_declared_classes函数：返回由已定义类的名字所组成的数组　602\n33.1.6　get_declared_interfaces函数：返回一个声明接口的数组　604\n33.1.7　get_object_vars函数：返回由对象属性组成的关联数组　604\n33.1.8　get_parent_class函数：返回对象或类的父类名　605\n33.1.9　interface_exists函数：检查接口是否定义　606\n33.1.10　is_a函数：判断对象是否属于某一个类　607\n33.1.11　is_subclass_of函数：判断对象是否属于某一个类的子类　607\n33.1.12　method_exists函数：检查类的方法是否存在　608\n33.1.13　property_exists函数：检查对象或类是否具有指定的属性　609\n33.2　小结　610\n\n第34章　COM函数　611\n34.1　PHP中的COM与.NET函数　611\n34.1.1　COM函数：COM类构造函数，提供了将(D)COM组件整合到PHP脚本中的框架　611\n34.1.2　DOTNET函数：从.NET集合创建类并调用类的方法，使用类的属性　612\n34.1.3　VARIANT函数：将变量封装进VARIANT结构中的简单容器　613\n34.1.4　com_create_guid函数：产生一个全局唯一标识符(GUID)　613\n34.1.5　com_event_sink函数：在COM对象与PHP对象之间建立连接　614\n34.1.6　com_get_active_object函数：返回已经运行的一个COM类的实例的句柄　615\n34.1.7　com_invoke函数：调用COM组件的方法　615\n34.1.8　com_isenum函数：获取一个IenumVariant　616\n34.1.9　com_load_typelib函数：装载一个Typelib　616\n34.1.10　com_load函数：创建新的COM组件的引用　617\n34.1.11　com_message_pump函数：停止运行指定的时间，等待有信息到来　617\n34.1.12　com_print_typeinfo函数：输出一个定义为进程接口的PHP类　617\n34.2　小结　618\n\n第35章　杂项函数　619\n35.1　PHP中的杂项函数　619\n35.1.1　connection_aborted函数：判断客户端的连接状态　619\n35.1.2　connection_status函数：返回客户端的连接状态　620\n35.1.3　connection_timeout函数：判断脚本的运行状态　620\n35.1.4　constant函数：返回常量的值　620\n35.1.5　define函数：定义一个常量的值　621\n35.1.6　defined函数：判断一个常量是否存在　621\n35.1.7　die函数：退出程序　622\n35.1.8　eval函数：将一个字符串作为PHP代码来执行　622\n35.1.9　exit函数：退出并输出信息　623\n35.1.10　get_browser函数：获取客户端浏览器的各项功能　624\n35.1.11　highlight_file函数：对一个文件进行高亮度显示　625\n35.1.12　highlight_string函数：对一个字符串进行高亮度显示　626\n35.1.13　ignore_user_abort函数：设定是否在客户端断开连接时，结束PHP代码的运行　626\n35.1.14　pack函数：将指定数据打包为二进制字符串　627\n35.1.15　php_check_syntax函数：检查PHP文件的语法　628\n35.1.16　php_strip_whitespace函数：去除PHP文件中的注释和空格　628\n35.1.17　show_source函数：对一个文件进行高亮度显示　629\n35.1.18　sleep函数：暂停执行程序　629\n35.1.19　time_nanosleep函数：暂停执行程序　630\n35.1.20　time_sleep_until函数：在指定时间唤醒程序　631\n35.1.21　uniqid函数：生成一个单独的ID　631\n35.1.22　unpack函数：从二进制字符串中解包出数据到数组　631\n35.1.23　usleep函数：以微秒级暂停程序　632</code></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/007.jpg', 'php内置函数大全\n第2章　Apache函数　15\n2.1　Apache信息获取类函数　15\n2.1.1　apache_child_terminate函数：在本次请求结束后终止Apache进程　15\n2.1.2　apache_get_modules函数：获取Apache的模块列表　16\n2.1.3　apache_get_version函数：获取Apache的版本　16\n2.1.4　apache_getenv函数：获取Apache的环境变量　17\n2.1.5　apache_lookup_uri函数：获取特定的URL有关信息　17\n2.1.6　apache_note函数：获取或设置Apache请求记录　18\n2.1.7　apache_request_headers函数：获取HTTP请求的标头　19\n2.1.8　apache_response_headers函数：获取所有HTTP回应标头　19\n2.1.9　getallheaders函数：获取所有HTTP变数值　20\n2.2　Apache配置类函数　20\n2.2.1　apache_reset_timeout函数：重设Apache写操作时间　21\n2.2.2　apache_setenv函数：设置Apache的环境变量　21\n2.2.3　virtual函数：执行Apache的子请求　22\n2.3　Apache编码类函数　22\n2.3.1　ascii2ebcdic函数：将ASCII码转换为EBCDIC码　22\n2.3.2　ebcdic2ascii函数：将EBCDIC码转换为ASCII码　23\n2.4　小结　23\n\n第3章　ODBC函数　24\n3.1　ODBC连接类函数　25\n3.1.1　odbc_connect函数：打开一个ODBC连接　25\n3.1.2　odbc_close函数：关闭一个已经打开的ODBC连接　26\n3.1.3　odbc_close_all函数：关闭所有已经打开的ODBC连接　27\n3.1.4　odbc_pconnect函数：打开一个持续有效的ODBC连接　27\n3.2　ODBC操作类函数　28\n3.2.1　odbc_commit函数：更新所有处于未决状态的操作　28\n3.2.2　odbc_do函数：在打开的ODBC连接上执行SQL语句　29\n3.2.3　odbc_exec函数：执行SQL语句　30\n3.2.4　odbc_execute函数：执行一个预置的SQL语句　30\n3.2.5　odbc_free_result函数：释放传回资料所占用的内存　31\n3.2.6　odbc_prepare函数：预置SQL语句的执行　32\n3.2.7　odbc_rollback函数：撤销所有处于未决状态的操作　32\n3.3　ODBC信息获取类函数　33\n3.3.1　odbc_columnprivileges函数：列出给定表的列和相关的权限　33\n3.3.2　odbc_columns函数：列出指定表的列的名称　34\n3.3.3　odbc_cursor函数：获取光标的名称　35\n3.3.4　odbc_data_source函数：返回连接数据库的信息　35\n3.3.5　odbc_error函数：获取最后的错误代码　36\n3.3.6　odbc_errormsg函数：获取最后的错误信息　36\n3.3.7　odbc_fetch_array函数：获取结果集数组　37\n3.3.8　odbc_fetch_into函数：获取传回的指定列　38\n3.3.9　odbc_fetch_object函数：返回结果集到对象　38\n3.3.10　odbc_fetch_row函数：获取传回的一列　39\n3.3.11　odbc_field_len函数：获取字段的长度　40\n3.3.12　odbc_field_name函数：获取字段的名称　41\n3.3.13　odbc_field_num函数：获取字段的序号　41\n3.3.14　odbc_field_precision函数：获取字段的长度　42\n3.3.15　odbc_field_scale函数：获取字段的浮点数　42\n3.3.16　odbc_field_type函数：获取字段的资料类型　43\n3.3.17　odbc_foreignkeys函数：返回特定表的外来键　44\n3.3.18　odbc_gettypeinfo函数：返回数据库的类型信息　44\n3.3.19　odbc_longreadlen函数：设定传回栏的最大值　45\n3.3.20　odbc_num_fields函数：获取字段数目　45\n3.3.21　odbc_num_rows函数：获取传回的列数目　45\n3.3.22　odbc_primarykeys函数：返回列的名字作为表的主键　46\n3.3.23　odbc_procedurecolumns函数：返回检索过程的参数信息　46\n3.3.24　odbc_procedures函数：获取存在于特定数据源中的进程信息　47\n3.3.25　odbc_result_all函数：传回HTML表格信息　47\n3.3.26　odbc_result函数：获取结果数据　47\n3.3.27　odbc_specialcolumns函数：返回一个表中在传送更新时可以自动更新的列　48\n3.3.28　odbc_statistics函数：获取表的状态及其索引　49\n3.3.29　odbc_tableprivileges函数：列出表格和每个表格关联的权限　49\n3.3.30　odbc_tables函数：获取特定数据库上的表的名称　50\n3.4　ODBC设置类函数　50\n3.4.1　odbc_autocommit函数：开启或关闭自动更新　50\n3.4.2　odbc_binmode函数：设定二进制的数据处理方式　51\n3.4.3　odbc_next_result函数：检查下一个结果集是否可用　52\n3.4.4　odbc_setoption函数：调整ODBC设定　52\n3.5　小结　53\n\n第4章　MySQL函数　54\n4.1　MySQL连接类函数　54\n4.1.1　mysql_connect函数：打开一个到MySQL服务器的连接　54\n4.1.2　mysql_close函数：关闭MySQL连接　55\n4.1.3　mysql_pconnect函数：打开一个到MySQL服务器的持久链接　56\n4.2　MySQL操作类函数　57\n4.2.1　mysql_create_db函数：新建一个MySQL数据库　57\n4.2.2　mysql_data_seek函数：移动内部结果的指针　57\n4.2.3　mysql_db_query函数：发送一条MySQL查询　58\n4.2.4　mysql_drop_db函数：删除一个MySQL数据库　59\n4.2.5　mysql_escape_string函数：转义一个用来查询的字符串　59\n4.2.6　mysql_free_result函数：释放结果内存　60\n4.2.7　mysql_list_dbs函数：列出MySQL服务器中所有的数据库　60\n4.2.8　mysql_list_fields函数：列出MySQL结果中的字段　61\n4.2.9　mysql_list_processes函数：列出MySQL进程　61\n4.2.10　mysql_list_tables函数：列出MySQL数据库中的表　62\n4.2.11　mysql_ping函数：Ping一个服务器连接，如果没有连接则重新连接　63\n4.2.12　mysql_query函数：发送一条MySQL查询　63\n4.2.13　mysql_real_escape_string函数：转义SQL语句中的特殊字符　64\n4.2.14　mysql_result函数：获取结果数据　65\n4.2.15　mysql_select_db函数：选择MySQL数据库　66\n4.2.16　mysql_unbuffered_query函数：向MySQL发送一条SQL查询，并不获取和缓存结果的行　67\n4.3　MySQL信息获取类函数　67\n4.3.1　mysql_affected_rows函数：获取前一次MySQL操作所影响的记录行数　68\n4.3.2　mysql_client_encoding函数：获取字符集的名称　68\n4.3.3　mysql_db_name函数：获取数据库名　69\n4.3.4　mysql_errno函数：返回上一个MySQL操作中的错误信息的数字编码　70\n4.3.5　mysql_error函数：返回上一个MySQL操作产生的文本错误信息　70\n4.3.6　mysql_fetch_array函数：从结果集中获取一行作为关联数组，或数字数组，或二者都有　71\n4.3.7　mysql_fetch_assoc函数：从结果集中获取一行作为关联数组　72\n4.3.8　mysql_fetch_field函数：从结果集中获取列信息并作为对象返回　73\n4.3.9　mysql_fetch_lengths函数：获取结果集中每个输出的长度　75\n4.3.10　mysql_fetch_object函数：从结果集中获取一行作为对象　76\n4.3.11　mysql_fetch_row函数：从结果集中获取一行作为枚举数组　77\n4.3.12　mysql_field_flags函数：从结果集中获取字段关联的标志　77\n4.3.13　mysql_field_len函数：返回指定字段的长度　78\n4.3.14　mysql_field_name函数：获取结果集中指定字段的字段名　79\n4.3.15　mysql_field_seek函数：将结果集中的指针设定为指定的字段偏移量　80\n4.3.16　mysql_field_table函数：获取指定字段所在的表名　81\n4.3.17　mysql_field_type函数：获取结果集中指定字段的类型　81\n4.3.18　mysql_get_client_info函数：获取MySQL客户端信息　82\n4.3.19　mysql_get_host_info函数：获取MySQL主机信息　83\n4.3.20　mysql_get_proto_info函数：获取MySQL协议信息　83\n4.3.21　mysql_get_server_info函数：获取MySQL服务器信息　84\n4.3.22　mysql_info函数：获取最近一条查询的信息　84\n4.3.23　mysql_insert_id函数：获取上一个INSERT操作产生的ID　85\n4.3.24　mysql_num_fields函数：获取结果集中字段的数目　86\n4.3.25　mysql_num_rows函数：获取结果集中行的数目　86\n4.3.26　mysql_stat函数：获取当前系统状态　87\n4.3.27　mysql_tablename函数：获取表名　88\n4.3.28　mysql_thread_id函数：获取当前线程的ID　88\n4.4　小结　89\n\n第3篇　数组字符篇\n\n第5章　Arrays函数　93\n5.1　数组建立类函数　93\n5.1.1　array函数：新建一个数组　93\n5.1.2　array_combine函数：用两个数组的值作为新数组的键与值来新建一个数组　94\n5.1.3　range函数：建立一个包含指定范围单元的数组　94\n5.2　数组操作类函数　95\n5.2.1　array_chunk函数：将一个数组分割成多个数组　95\n5.2.2　array_count_values函数：统计数组中所有的值出现的次数　97\n5.2.3　array_diff_assoc函数：带索引检查计算数组的差集　97\n5.2.4　array_diff_key函数：使用键名比较计算数组的差集　98\n5.2.5　array_diff_uassoc函数：用回调函数做索引检查来计算数组的差集　98\n5.2.6　array_diff_ukey函数：用回调函数对键名比较计算数组的差集　99\n5.2.7　array_diff函数：计算数组的差集　100\n5.2.8　array_fill函数：用给定的值填充数组　100\n5.2.9　array_filter函数：用回调函数过滤数组中的单元　101\n5.2.10　array_flip函数：交换数组中的键和值　102\n5.2.11　array_intersect_assoc函数：带索引检查计算数组的交集　103\n5.2.12　array_intersect_key函数：使用键名比较计算数组的交集　103\n5.2.13　array_intersect_uassoc函数：带索引检查计算数组的交集，并用回调函数比较索引　104\n5.2.14　array_intersect_ukey函数：用回调函数比较键名来计算数组的交集　104\n5.2.15　array_intersect函数：计算数组的交集　105\n5.2.16　array_key_exists函数：检查给定的键名或索引是否存在于数组中　106\n5.2.17　array_map函数：将回调函数作用到给定数组的单元上　106\n5.2.18　array_merge_recursive函数：递归地合并一个或多个数组　107\n5.2.19　array_merge函数：合并一个或多个数组　108\n5.2.20　array_multisort函数：对多个数组或多维数组进行排序　108\n5.2.21　array_pad函数：用值将数组填补到指定长度　109\n5.2.22　array_pop函数：将数组的最后一个单元弹出　110\n5.2.23　array_push函数：将一个或多个单元压入数组的末尾　111\n5.2.24　array_rand函数：从数组中随机取出一个或多个单元　111\n5.2.25　array_reduce函数：用回调函数迭代地将数组简化为单一的值　112\n5.2.26　array_search函数：在数组中查找给定的值并返回相应的键名　113\n5.2.27　array_shift函数：移除数组开头的一个单元　114\n5.2.28　array_unique函数：移除数组中重复的值　114\n5.2.29　array_unshift函数：在数组开头插入一个或多个单元　115\n5.2.30　array_slice函数：从数组中取出一段　115\n5.2.31　array_splice函数：把数组中的一部分去掉并用其他值取代　116\n5.2.32　array_sum函数：计算数组中所有值的和　118\n5.2.33　array_uintersect_assoc函数：带索引检查计算数组的交集并用回调函数比较数据　118\n5.2.34　array_uintersect_uassoc函数：带索引检查计算数组的交集并用回调函数比较数据和索引　119\n5.2.35　array_uintersect函数：计算数组的交集并用回调函数比较数据　119\n5.2.36　array_walk_recursive函数：对数组中的每个成员递归地应用用户函数　120\n5.2.37　array_walk函数：对数组中的每个成员应用用户函数　121\n5.2.38　compact函数：用变量名和值建立一个数组　121\n5.2.39　count函数：计算数组中的单元数目或对象中的属性个数　122\n5.2.40　current函数：返回数组中的当前单元　123\n5.2.41　extract函数：从数组中将变量导入当前的符号表中　124\n5.2.42　in_array函数：查找数组中是否存在某个值　125\n5.2.43　key函数：从关联数组中获取键名　125\n5.2.44　list函数：把数组中的值赋给一些变量　126\n5.2.45　next函数：将数组中的内部指针向前移动一位　127\n5.2.46　prev函数：将数组中的内部指针倒回一位　127\n5.2.47　reset函数：将数组中的内部指针指向第一个单元　128\n5.2.48　shuffle函数：打乱一个数组　128\n5.3　数组信息获取类函数　129\n5.3.1　array_change_key_case函数：返回字符串键名全为小写或大写的数组　129\n5.3.2　array_keys函数：返回数组中所有的键名　130\n5.3.3　array_reverse函数：返回一个单元顺序相反的数组　130\n5.3.4　array_values函数：返回数组中所有的值　131\n5.3.5　each函数：返回数组中当前的键/值对并将数组指针向前移动一步　132\n5.4　数组比较类函数　132\n5.4.1　arsort函数：对数组进行逆向排序并保持索引关系　133\n5.4.2　asort函数：对数组进行排序并保持索引关系　133\n5.4.3　krsort函数：对数组按照键名逆向排序　134\n5.4.4　ksort函数：对数组按照键名排序　135\n5.4.5　natcasesort函数：用自然排序算法对数组进行不区分大小写字母的排序　135\n5.4.6　natsort函数：用自然排序算法对数组排序　136\n5.4.7　rsort函数：对数组逆向排序　137\n5.4.8　sort函数：对数组排序　137\n5.4.9　uasort函数：使用用户自定义的比较函数对数组中的值进行排序并保持索引关联　138\n5.4.10　uksort函数：使用用户自定义的比较函数对数组中的键名进行排序　139\n5.4.11　usort函数：使用用户自定义的比较函数对数组中的值进行排序　140\n5.5　小结　140\n\n\n第6章　Strings函数　142\n6.1　字符串转换类函数　142\n6.1.1　addcslashes函数：以C语言风格使用反斜线转义字符串中的字符　142\n6.1.2　addslashes函数：使用反斜线引用字符串　143\n6.1.3　chop函数：清除字符串中的连续空格　143\n6.1.4　get_html_translation_table函数：返回htmlspecialchars()函数和htmlentities()函数的转换表　144\n6.1.5　chunk_split函数：将字符串分割成小块　146\n6.1.6　hebrev函数：转换希伯来逻辑字符为可见字符　146\n6.1.7　hebrevc函数：转换希伯来语文本为可见文本，包括换行符　147\n6.1.8　html_entity_decode函数：转换HTML字符编码为字符　147\n6.1.9　htmlentities函数：转换字符为HTML字符编码　148\n6.1.10　htmlspecialchars_decode函数：转换特殊HTML字符编码为字符　149\n6.1.11　htmlspecialchars函数：转换特殊字符为HTML字符编码　149\n6.1.12　nl2br函数：将换行字符转换成&ldquo;\n&rdquo;　150\n6.1.13　quotemeta函数：加入引用符　150\n6.1.14　rtrim函数：清除字符串末尾的空白(或其他字符)　151\n6.1.15　strip_tags函数：清除HTML及PHP的标记　151\n6.1.16　stripcslashes函数：将用addslashes()函数处理后的字符串原样返回　152\n6.1.17　stripslashes函数：清除字符串中的反斜线　152\n6.1.18　strtolower函数：将字符串中的字母全部转换为小写　153\n6.1.19　strtoupper函数：将字符串中的字母全部转换为大写　153\n6.1.20　trim函数：截取字符串首尾的空格(或其他字符)　154\n6.2　字符串操作类函数　154\n6.2.1　explode函数：将字符串按指定字符切开　154\n6.2.2　str_pad函数：用一个字符串填充另一个字符串到指定长度　155\n6.2.3　str_split函数：把字符串转化为数组　156\n6.2.4　str_shuffle函数：随机打乱字符串中的字符顺序　157\n6.2.5　str_ireplace函数：将某个子字符串替换为另一个字符串　157\n6.2.6　localeconv函数：获取当地的数字和货币信息　158\n6.2.7　ltrim函数：清除字符串左端的连续空白(或者其他字符)　159\n6.2.8　money_format函数：把数字字符串转换为货币表示形式　160\n6.2.9　nl_langinfo函数：获取语言和地区信息　160\n6.2.10　number_format函数：用千位分隔符格式化数字字符串　162\n6.2.11　parse_str函数：将字符串解析为变量　163\n6.2.12　setlocale函数：设置地区信息　163\n6.2.13　similar_text函数：计算两个字符串中相匹配的字符串数量　164\n6.2.14　str_repeat函数：重复使用指定字符串　165\n6.2.15　str_replace函数：区分大小写的字符串替换　165\n6.2.16　str_word_count函数：返回字符串中的单词数　166\n6.2.17　strcasecmp函数：对两个字符串进行比较　166\n6.2.18　strlen函数：统计字符串的长度　167\n6.2.19　strnatcmp函数：使用自然顺序演算法来对比字符串　167\n6.2.20　strrev函数：颠倒字符串　168\n6.2.21　strtok函数：切开字符串　168\n6.2.22　strtr函数：转换字符串的某些字符　169\n6.2.23　substr_count函数：计算一个字符串在另一个字符串中出现的次数　170\n6.2.24　substr_replace函数：替换字符串中的一部分为另一个字符串　170\n6.2.25　substr函数：截取字符串　171\n6.2.26　ucfirst函数：将字符串中第一个字符改为大写　171\n6.2.27　ucwords函数：将字符串中每个单词的第一个字母改为大写　172\n6.2.28　wordwrap函数：将字符串按字符个数换行　172\n6.3　字符串查找类函数　173\n6.3.1　chr函数：将指定的序数转化为相应的ASCII码字符　173\n6.3.2　implode函数：将数组合并为字符串　173\n6.3.3　join函数：将数组转化为字符串　174\n6.3.4　crc32函数：计算一个字符串的crc32多项式　174\n6.3.5　strchr函数：返回字符串在另一个字符串中首次出现的位置到末尾的子字符串　175\n6.3.6　strcspn函数：返回字符串中起首不符合mask的子字符串长度　175\n6.3.7　stripos函数：查找一个字符串在另一个字符串中首次出现的位置(不区分大小写) 176\n6.3.8　stristr函数：返回一个字符串在另一个字符串中首次出现的位置到后者末尾的子字符串(不区分大小写) 　176\n6.3.9　strripos函数：不区分大小写查找字符在字符串中首次出现的位置　177\n6.3.10　strrpos函数：查找字符在字符串中最后出现的位置　177\n6.3.11　strspn函数：返回字符串中起首符合mask的子字符串长度　178\n6.3.12　strstr函数：返回字符串中某字符串开始处至结束的字符串　178\n6.4　字符串编码类函数　178\n6.4.1　bin2hex函数：将二进制字符转化为十六进制　179\n6.4.2　convert_cyr_string函数：将字符由一种Cyrillic字符转换成另一种　179\n6.4.3　convert_uudecode函数：对用uuencode算法编码的字符串解码　180\n6.4.4　convert_uuencode函数：对字符串进行uuencode算法编码　180\n6.4.5　count_chars函数：返回字符串中所有字符的信息　180\n6.4.6　ord函数：返回一个字符的ASCII码　181\n6.4.7　quoted_printable_decode函数：将qp编码字符串转换成8 位元字串　182\n6.4.8　str_rot13函数：对一个字符串进行rot13编码　182\n6.5　字符串加密类函数　183\n6.5.1　crypt函数：将字符串用DES编码加密　183\n6.5.2　md5_file函数：计算给定文件的MD5hash　183\n6.5.3　md5函数：对一个字符串进行MD5加密　184\n6.5.4　sha1_file函数：计算给定文件的sha1hash　184\n6.5.5　sha1函数：计算字符串的sha1hash　185\n6.6　字符串输出类函数　185\n6.6.1　echo函数：输出一个或多个字符　186\n6.6.2　fprintf函数：输出格式化字符串到流　186\n6.6.3　print函数：输出格式化字符串　187\n6.6.4　printf函数：输出一个格式化的字符串　187\n6.6.5　sprintf函数：返回一个格式化的字符串到变量　188\n6.6.6　sscanf函数：按照一定格式解析输入的字符串　188\n6.6.7　vfprintf函数：输出格式化字符串到流　189\n6.6.8　vprintf函数：输出一个格式化的字符串　189\n6.6.9　vsprintf函数：输出格式化的字符串到变量　190\n6.7　字符串比较类函数　190\n6.7.1　levenshtein函数：计算两个字符串的Levenshtein距离　191\n6.7.2　metaphone函数：计算字符串的metaphone键　191\n6.7.3　soundex函数：计算字符串的soundex键　192\n6.7.4　strcoll函数：对两个字符串进行比较　193\n6.7.5　strcmp函数：比较两个字符串　193\n6.7.6　strnatcasecmp函数：用自然运算法则比较字符串(不区分大小写)　194\n6.7.7　strncasecmp函数：比较字符串的前n个字符(不区分大小写)　194\n6.7.8　strncmp函数：比较两个字符串的前n个字符　195\n6.7.9　strpbrk函数：查找字符串中的一系列字符　195\n6.7.10　strpos函数：寻找字符串中某字符最先出现的位置　196\n6.7.11　strrchr函数：查找一个字符串在另一个字符串中末次出现的位置，并返回从字符串中的这个位置起，一直到字符串结尾的子字符串　196\n6.7.12　substr_compare函数：从指定起始位置起在一定长度内比较两个字符串(二进制精确，区分大小写可选)　197\n6.8　小结　197\n\n第7章　Hash函数　198\n7.1　PHP中的常用Hash函数　198\n7.1.1　hash_algos函数：返回已经注册的Hash规则列表　198\n7.1.2　hash_file函数：用指定的文件内容生成一个Hash值　199\n7.1.3　hash_final函数：完成一个增加的Hash值并返回结果摘要　200\n7.1.4　hash_hmac_file函数：用指定文件和HMAC模式生成一个包含密钥的Hash值　200\n7.1.5　hash_hmac函数：用HMAC模式生成一个包含密钥的Hash值　201\n7.1.6　hash_init函数：初始化一个增加的Hash值　201\n7.1.7　hash_update_file函数：从一个文件向一个动态的Hash值灌注数据　202\n7.1.8　hash_update_stream函数：从一个打开的数据流向一个动态的Hash值灌注数据　202\n7.1.9　hash_update函数：向一个动态的Hash值灌注数据　203\n7.1.10　hash函数：生成一个Hash值　203\n7.2　小结　204\n\n第8章　正则表达式函数　205\n8.1　Perl兼容的正则表达式函数　205\n8.1.1　preg_grep函数：返回与模式匹配的数组单元　205\n8.1.2　preg_match_all函数：进行全局正则表达式匹配　206\n8.1.3　preg_match函数：进行正则表达式匹配　207\n8.1.4　preg_quote函数：转义正则表达式字符　208\n8.1.5　preg_replace_callback函数：用回调函数执行正则表达式的查找和替换　208\n8.1.6　preg_replace函数：执行正则表达式的查找和替换　209\n8.1.7　preg_split函数：用正则表达式分割字符串　209\n8.2　小结　210\n\n第4篇　文件目录操作篇\n\n第9章　Directories函数　213\n9.1　PHP中常用的目录操作函数　213\n9.1.1　chdir函数：改变目录　213\n9.1.2　chroot函数：改变根目录　214\n9.1.3　dir函数：仿照面向对象的机制来读取一个目录　214\n9.1.4　closedir函数：关闭目录句柄　215\n9.1.5　getcwd函数：获取当前工作目录　215\n9.1.6　opendir函数：打开目录句柄　216\n9.1.7　readdir函数：从目录句柄中读取条目　216\n9.1.8　rewinddir函数：倒回目录句柄　217\n9.1.9　scandir函数：列出指定路径中的文件和目录　218\n9.2　小结　219\n\n第10章　FilePro函数　220\n10.1　PHP中常用的FilePro函数　220\n10.1.1　filepro_fieldcount函数：返回FilePro数据库上的表的数量　220\n10.1.2　filepro_fieldname函数：返回表的名称　220\n10.1.3　filepro_fieldtype函数：返回表的类型　221\n10.1.4　filepro_fieldwidth函数：返回一个表的宽度　221\n10.1.5　filepro_retrieve函数：检索数据库中的数据　221\n10.1.6　filepro_rowcount函数：返回数据库的行数　222\n10.1.7　filepro函数：将读取核对地图文件并存储表的数量和信息　222\n10.2　小结　222\n\n第11章　FileSystem函数　223\n11.1　文件打开关闭类函数　223\n11.1.1　fopen函数：打开本地或远程的文件　223\n11.1.2　fclose函数：关闭已打开的文件指针　224\n11.1.3　popen函数：根据指定模式打开进程文件指针　225\n11.1.4　pclose函数：关闭进程文件指针　225\n11.2　文件操作类函数　226\n11.2.1　chgrp函数：改变文件所属的组　226\n11.2.2　chmod函数：改变文件的访问模式　227\n11.2.3　chown函数：修改文件的所有者　227\n11.2.4　clearstatcache函数：清除文件状态缓存　228\n11.2.5　copy函数：复制文件　229\n11.2.6　delete函数：删除文件　229\n11.2.7　flock函数：锁定文件　230\n11.2.8　fpassthru函数：输出文件中的剩余数据　230\n11.2.9　fputcsv函数：将行数据格式化为CSV格式并写入文件　231\n11.2.10　fputs函数：将字符串写入文件　232\n11.2.11　fread函数：读取文件内容　232\n11.2.12　fscanf函数：将文件内容格式化输出　233\n11.2.13　fseek函数：在文件中设置指针位置　234\n11.2.14　ftruncate函数：将文件截断到指定的长度　234\n11.2.15　fwrite函数：写入文件　235\n11.2.16　glob函数：查找与模式匹配的文件路径　235\n11.2.17　link函数：建立硬连接　236\n11.2.18　move_uploaded_file函数：将上传的文件移动到新位置　236\n11.2.19　parse_ini_file函数：解析一个配置文件　237\n11.2.20　readfile函数：输出一个文件的内容　238\n11.2.21　rename函数：重命名一个文件或目录　239\n11.2.22　rewind函数：倒回文件指针　239\n11.2.23　set_file_buffer函数：设置文件缓冲区大小　240\n11.2.24　tempnam函数：在指定目录下建立临时文件　240\n11.2.25　touch函数：修改文件时间　241\n11.2.26　unlink函数：删除文件　242\n11.3　文件信息获取类函数　242\n11.3.1　fileowner函数：获取文件所有者　242\n11.3.2　fileperms函数：获取文件权限　243\n11.3.3　filesize函数：获取文件大小　243\n11.3.4　filetype函数：获取文件类型　244\n11.3.5　fstat函数：获取打开文件的统计信息　244\n11.3.6　ftell函数：返回文件指针读/写的位置　245\n11.3.7　lstat函数：返回文件或符号连接的信息　246\n11.3.8　pathinfo函数：返回文件路径信息　246\n11.3.9　realpath函数：返回规范化的文件绝对路径　247\n11.3.10　stat函数：返回文件的信息　247\n11.4　文件类型判断类函数　249\n11.4.1　is_dir函数：判断指定文件是否是目录　249\n11.4.2　is_executable函数：判断指定文件是否是可执行文件　250\n11.4.3　is_file函数：判断指定文件是否是一个正常的文件　250\n11.4.4　is_link函数：判断指定文件是否是一个符号连接　251\n11.4.5　is_readable函数：判断指定文件是否可读　251\n11.4.6　is_uploaded_file函数：判断指定文件是否是通过POST上传　252\n11.4.7　is_writable函数：判断指定文件是否可写　252\n11.5　文件目录操作类函数　253\n11.5.1　mkdir函数：建立目录　253\n11.5.2　rmdir函数：删除目录　254\n11.5.3　disk_free_space函数：返回指定目录的剩余空间　254\n11.5.4　disk_total_space函数：返回指定目录的磁盘总空间大小　255\n11.6　小结　255\n\n\n\n第12章　Stream函数　256\n12.1　PHP中的Stream函数　256\n12.1.1　stream_bucket_append函数：为队列添加数据　257\n12.1.2　stream_bucket_make_writeable函数：从操作的队列中返回一个数据对象　258\n12.1.3　stream_bucket_new函数：为当前队列创建一个新的数据　258\n12.1.4　stream_bucket_prepend函数：预备数据到队列　258\n12.1.5　stream_context_create函数：创建数据流上下文　259\n12.1.6　stream_context_get_default函数：获取默认的数据流上下文　260\n12.1.7　stream_context_get_options函数：获取数据流的设置　261\n12.1.8　stream_context_set_option函数：对数据流、数据包或者上下文进行设置　261\n12.1.9　stream_context_set_params函数：为数据流、数据包或者上下文设置参数　261\n12.1.10　stream_copy_to_stream函数：在数据流之间进行复制操作　262\n12.1.11　stream_filter_append函数：为数据流添加过滤器　262\n12.1.12　stream_filter_prepend函数：为数据流预备添加过滤器　263\n12.1.13　stream_filter_register函数：注册一个数据流的过滤器并作为PHP类执行　264\n12.1.14　stream_filter_remove函数：从一个数据流中移除过滤器　265\n12.1.15　stream_get_contents函数：读取数据流中的剩余数据到字符串　266\n12.1.16　stream_get_filters函数：返回已经注册的数据流过滤器列表　267\n12.1.17　stream_get_line函数：按照给定的定界符从数据流资源中获取行　267\n12.1.18　stream_get_meta_data函数：从封装协议文件指针中获取报头/元数据　268\n12.1.19　stream_get_transports函数：返回注册的Socket传输列表　269\n12.1.20　stream_get_wrappers函数：返回注册的数据流列表　269\n12.1.21　stream_register_wrapper函数：注册一个用PHP类实现的URL封装协议　270\n12.1.22　stream_select函数：接收数据流数组并等待它们状态的改变　272\n12.1.23　stream_set_blocking函数：将一个数据流设置为堵塞或者非堵塞状态　273\n12.1.24　stream_set_timeout函数：对数据流进行超时设置　274\n12.1.25　stream_set_write_buffer函数：为数据流设置缓冲区　274\n12.1.26　stream_socket_accept函数：接受由函数stream_ socket_server()创建的Socket连接　275\n12.1.27　stream_socket_client函数：打开网络或者UNIX主机的Socket连接　276\n12.1.28　stream_socket_enable_crypto函数：为一个已经连接的Socket打开或者关闭数据加密　277\n12.1.29　stream_socket_get_name函数：获取本地或者网络Socket的名称　278\n12.1.30　stream_socket_pair函数：创建两个无区别的Socket数据流连接　278\n12.1.31　stream_socket_recvfrom函数：从Socket获取数据，不管其连接与否　279\n12.1.32　stream_socket_sendto函数：向Socket发送数据，不管其连接与否　280\n12.1.33　stream_socket_server函数：创建一个网络或者UNIX Socket服务端　281\n12.1.34　stream_wrapper_restore函数：恢复一个事先注销的数据包　281\n12.1.35　stream_wrapper_unregister函数：注销一个URL地址包　282\n12.2　小结　282\n\n第5篇　网络通信篇\n\n第13章　Socket函数　285\n13.1　Socket连接类函数　285\n13.1.1　socket_accept函数：接受一个Socket连接　285\n13.1.2　socket_bind函数：绑定一个Socket连接　286\n13.1.3　socket_close函数：关闭Socket连接　286\n13.1.4　socket_connect函数：在Socket上初始化一个连接　286\n13.1.5　socket_create_pair函数：建立一对Socket，并存储在数组中　287\n13.1.6　Socket_create函数：建立Socket连接　289\n13.1.7　socket_listen函数：监听一个Socket连接　290\n13.2　Socket操作类函数　290\n13.2.1　socket_clear_error函数：清空Socket错误信息或者最后一个错误代码　290\n13.2.2　Socket_create_listen函数：在Socket上打开一个端口接受连接　291\n13.2.3　Socket_get_option函数：获取Socket的设置选项　292\n13.2.4　socket_getpeername函数：获取远程主机的Socket信息　293\n13.2.5　Socket_getsockname函数：获取本地主机的Socket信息　294\n13.2.6　socket_last_error函数：返回Socket最后一个错误代号　294\n13.2.7　Socket_read函数：从连接中读取设置的最大长度的字节数　295\n13.2.8　Socket_recv函数：从一个连接的Socket中接收数据　295\n13.2.9　Socket_recvfrom函数：接收数据，不管连接是否断开　297\n13.2.10　socket_select函数：查询Socket状态　297\n13.2.11　socket_send函数：发送数据　298\n13.2.12　socket_sendto函数：发送一条消息到Socket，不管连接是否断开　299\n13.2.13　socket_set_block函数：锁定Socket　300\n13.2.14　Socket_set_nonblock函数：设置不锁定状态　300\n13.2.15　socket_set_option函数：设置Socket连接选项　301\n13.2.16　socket_shutdown函数：关闭一个Socket连接　302\n13.2.17　socket_strerror函数：返回一个包含Socket错误信息的字符串　302\n13.2.18　socket_write函数：写入一个Socket　303\n13.3　小结　303\n\n第14章　SNMP函数　304\n14.1　PHP中的SNMP函数　304\n14.1.1　snmp_get_quick_print函数：返回UCD库中quick_print设置的当前值　304\n14.1.2　snmp_get_valueretrieval函数：返回SNMP值如何被返回的路径　305\n14.1.3　snmp_read_mib函数：读取并从分析MIB文件到动态的MIB树　305\n14.1.4　snmp_set_enum_print函数：返回所有的枚举值　306\n14.1.5　snmp_set_oid_numeric_print函数：返回所有的对象，包括它们各自的对象ID并指明　306\n14.1.6　snmp_set_quick_print函数：设置UCD SNMP库中quick_print的值　306\n14.1.7　snmp_set_valueretrieval函数：指明SNMP的值的返回路径　307\n14.1.8　snmpget函数：获取一个SNMP对象　307\n14.1.9　snmpgetnext函数：发送一个SNMP对象　308\n14.1.10　snmprealwalk函数：返回指定的所有对象，包括它们各自的对象ID　308\n14.1.11　snmpset函数：设置一个SNMP对象　308\n14.1.12　snmpwalk函数：从代理返回所有的SNMP对象　309\n14.1.13　snmpwalkoid函数：查询关于网络实体的信息树　309\n14.2　小结　310\n\n第15章　Session函数　311\n15.1　PHP中常用的Session函数　311\n15.1.1　session_cache_expire函数：获取或者设置当前Session的过期时间　311\n15.1.2　session_cache_limiter函数：获取或者设置当前的cache限制者　312\n15.1.3　session_commit函数：存储Session中的数据并终止Session　312\n15.1.4　session_decode函数：解密Session数据　313\n15.1.5　session_destroy函数：结束所有已经注册的Session　313\n15.1.6　session_encode函数：将当前Session会话值加密为一个字符串　314\n15.1.7　session_get_cookie_params函数：获取Session Cookie的参数　315\n15.1.8　session_id函数：获取或者设置当前的Session ID值　315\n15.1.9　session_is_registered函数：检查变量是否被注册为Session　316\n15.1.10　session_module_name函数：获取或者设置目前的Session模组　316\n15.1.11　session_name函数：获取或者设置目前的Session名称　317\n15.1.12　session_regenerate_id函数：用一个新值更新当前的Session ID　318\n15.1.13　session_register函数：注册Session为新的全局变量　318\n15.1.14　session_save_path函数：获取或者设置目前的Session保存路径　319\n15.1.15　session_set_cookie_params函数：设置Cookie的参数　319\n15.1.16　session_set_save_handler函数：设置用户级的Session存储函数　320\n15.1.17　session_start函数：初始化Session数据　321\n15.1.18　session_unregister函数：从当前Session中注销一个值　321\n15.1.19　session_unset函数：释放所有的Session变量　322\n15.1.20　session_write_close函数：向Session中写入数据并终止Session　323\n15.2　小结　323\n\n第16章　URL函数　324\n16.1　PHP中的URL函数　324\n16.1.1　base64_decode函数：对使用MIME base64编码的数据进行解码　324\n16.1.2　base64_encode函数：使用MIME base64对数据进行编码　325\n16.1.3　get_headers函数：获取HTTP请求头部信息　325\n16.1.4　get_meta_tags函数：从一个文件中提取所有的meta标签并返回一个数组　326\n16.1.5　http_build_query函数：生成url-encoded之后的请求字符串　327\n16.1.6　parse_url函数：解析URL并返回其组成部分　328\n16.1.7　rawurldecode函数：对已编码的URL字符串进行解码　328\n16.1.8　rawurlencode函数：按照RFC 1738对URL进行编码　328\n16.1.9　urldecode函数：解码已编码的URL字符串　329\n16.1.10　urlencode函数：编码URL字符串　329\n16.2　小结　330\n\n第17章　Mail函数　331\n17.1　PHP中的Mail函数　331\n17.1.1　ezmlm_hash函数：计算EZMLM所需的散列值　331\n17.1.2　mail函数：发送邮件　332\n17.2　小结　333\n\n第18章　HTTP函数　334\n18.1　PHP中的HTTP函数　334\n18.1.1　header函数：发送一个原始HTTP标头　334\n18.1.2　headers_list函数：返回已发送(或准备发送) 的响应标头的列表　335\n18.1.3　headers_sent函数：检查标头是否已被发送以及在哪里被发送　335\n18.1.4　setcookie函数：发送一个Cookie信息　336\n18.1.5　setrawcookie函数：发送一个其值未经urlencode编码的Cookie　337\n18.2　小结　337\n\n第19章　FTP函数　338\n19.1　FTP连接类函数　338\n19.1.1　ftp_close函数：关闭一个活动的FTP连接　338\n19.1.2　ftp_connect函数：建立一个新的FTP连接　339\n19.1.3　ftp_login函数：登录FTP服务器　339\n19.1.4　ftp_ssl_connect函数：通过SSL连接FTP服务器　340\n19.1.5　ftp_quit函数：关闭一个活动的FTP连接　340\n19.2　FTP文件操作类函数　341\n19.2.1　ftp_cdup函数：切换到当前目录的父目录　341\n19.2.2　ftp_chdir函数：在FTP服务器上切换当前目录　341\n19.2.3　ftp_chmod函数：修改FTP服务器文件的访问权限　342\n19.2.4　ftp_delete函数：删除FTP服务器上的一个文件　342\n19.2.5　ftp_fget函数：从FTP服务器上下载一个文件并保存到本地一个已经打开的文件中343\n19.2.6　ftp_fput函数：上传一个已经打开的文件到FTP服务器　344\n19.2.7　ftp_get函数：从FTP服务器上下载一个文件　344\n19.2.8　ftp_mdtm函数：返回指定文件的最后修改时间　345\n19.2.9　ftp_mkdir函数：建立新目录　346\n19.2.10　ftp_nb_continue函数：连续获取/发送文件　346\n19.2.11　ftp_nb_fget函数：下载远程FTP服务器文件　347\n19.2.12　ftp_nb_fput函数：上传文件到FTP服务器　348\n19.2.13　ftp_nb_get函数：从FTP服务器上获取文件并写入本地文件　348\n19.2.14　ftp_nb_put函数：存储一个文件至FTP服务器　349\n19.2.15　ftp_nlist函数：返回给定目录的文件列表　350\n19.2.16　ftp_put函数：上传文件到FTP服务器　350\n19.2.17　ftp_pwd函数：返回当前目录名　351\n19.2.18　ftp_rename函数：更改FTP服务器上指定的文件名　351\n19.2.19　ftp_rmdir函数：删除一个目录　352\n19.2.20　ftp_size函数：返回指定文件的大小　352\n19.3　FTP服务器访问类函数　353\n19.3.1　ftp_get_option函数：返回当前FTP连接的各种不同的选项设置　353\n19.3.2　ftp_pasv函数：设置当前FTP被动模式是否打开　354\n19.3.3　ftp_set_option函数：设置各种FTP运行时选项　354\n19.3.4　ftp_systype函数：返回远程FTP服务器的系统类型　355\n19.4　FTP命令类函数　355\n19.4.1　ftp_alloc函数：发送ALO命令到远程的FTP服务器　355\n19.4.2　ftp_exec函数：请求运行一条FTP命令　356\n19.4.3　ftp_raw函数：发送命令到FTP服务器　357\n19.4.4　ftp_rawlist函数：返回指定目录下文件的详细列表　357\n19.4.5　ftp_site函数：向服务器发送SITE命令　358\n19.5　小结　358\n\n第20章　Network函数　359\n20.1　主机操作类Network函数　359\n20.1.1　checkdnsrr函数：查找主机的域名记录　359\n20.1.2　dns_check_record函数：查找主机的DNS记录　359\n20.1.3　dns_get_mx函数：获取主机的MX记录　360\n20.1.4　dns_get_record函数：获取主机的DNS记录　360\n20.1.5　gethostbyaddr函数：返回主机名称　360\n20.1.6　gethostbyname函数：返回IP地址　361\n20.1.7　gethostbynamel函数：返回IP地址列表　361\n20.1.8　getmxrr函数：根据给出的域名返回MX记录　362\n20.1.9　getprotobyname函数：返回协议名对应的协议号　362\n20.1.10　getprotobynumber函数：返回协议号对应的协议名称　363\n20.1.11　getservbyname函数：获取协议名称对应的端口号　363\n20.1.12　getservbyport函数：获取端口对应的协议名称　364\n20.2　日志操作类Network函数　365\n20.2.1　closelog函数：关闭系统日志　365\n20.2.2　define_syslog_variables函数：初始化所有系统日志的内容　365\n20.2.3　openlog函数：打开到系统日志的连接　366\n20.2.4　syslog函数：产生一个系统日志　367\n20.3　其他操作类Network函数　368\n20.3.1　debugger_off函数：禁用PHP DEBUG功能　368\n20.3.2　debugger_on函数：启用PHP DEBUG功能　368\n20.3.3　fsockopen函数：打开网络Socket连接　368\n20.3.4　inet_ntop函数：把网络IP地址转换为可识别的形式　369\n20.3.5　inet_pton函数：把可识别形式的IP地址转换为网络IP　369\n20.3.6　ip2long函数：把IP地址转换为一个整数　370\n20.3.7　long2ip函数：把一个整数转换为IP地址　370\n20.3.8　pfsockopen函数：打开网络Socket持续连接　371\n20.4　小结　371\n\n第6篇　图像处理篇\n\n第21章　Exif函数　375\n21.1　PHP中的Exif函数　375\n21.1.1　exif_imagetype函数：判断一个图像的类型　375\n21.1.2　exif_read_data函数：从JPEG或TIFF文件中读取Exif头信息　376\n21.1.3　exif_tagname函数：获取图像索引的头信息　377\n21.1.4　exif_thumbnail函数：获取嵌入在TIFF或JPEG图像中的缩略图　377\n21.1.5　read_exif_data函数：从JPEG或TIFF文件中读取Exif头信息　378\n21.2　小结　378\n\n第22章　Image函数　379\n22.1　PHP中的Image函数　379\n22.1.1　gd_info函数：获取当前安装的GD库的信息　379\n22.1.2　getimagesize函数：获取图像的大小　381\n22.1.3　image_type_to_extension函数：获取图像类型的文件后缀　381\n22.1.4　image_type_to_mime_type函数：判断一个IMAGETYPE常量的MIME类型　382\n22.1.5　image2wbmp函数：以WBMP格式将图像输出到浏览器或文件　383\n22.1.6　imagealphablending函数：设定图像的混色模式　383\n22.1.7　imageantialias函数：是否使用antialias(抗锯齿)功能　384\n22.1.8　imagearc函数：画椭圆弧　384\n22.1.9　imagechar函数：水平地画一个字符　386\n22.1.10　imagecharup函数：垂直地画一个字符　386\n22.1.11　imagecolorallocate函数：为一幅图像分配颜色　387\n22.1.12　imagecolorallocatealpha 函数：为一幅图像分配颜色+alpha　388\n22.1.13　imagecolorat函数：获取某像素的颜色索引值　389\n22.1.14　imagecolorclosest函数：获取与指定颜色最接近的颜色的索引值　390\n22.1.15　imagecolorclosestalpha函数：获取与指定颜色加透明度最接近的颜色的索引值390\n22.1.16　imagecolorclosesthwb函数：获取与指定颜色最接近的色度的黑白色的索引　391\n22.1.17　imagecolordeallocate函数：取消图像颜色的分配　391\n22.1.18　imagecolorexact函数：获取指定颜色的索引值　392\n22.1.19　imagecolorexactalpha函数：获取指定颜色加透明度的索引值　393\n22.1.20　imagecolormatch函数：使一个图像中调色板版本的颜色与真彩色版本更能匹配393\n22.1.21　imagecolorresolve函数：获取指定颜色的索引值或有可能得到的最接近的替代值393\n22.1.22　imagecolorresolvealpha函数：获取指定颜色透明度的索引值或有可能得到的最接近的替代值　394\n22.1.23　imagecolorset函数：给指定调色板索引设定颜色　394\n22.1.24　imagecolorsforindex函数：获取某索引的颜色　395\n22.1.25　imagecolorstotal函数：获取一幅图像的调色板中颜色的数目　395\n22.1.26　imagecolortransparent函数：将某个颜色定义为透明色　396\n22.1.27　imageconvolution函数：申请一个3*3的卷积矩阵　396\n22.1.28　imagecopy函数：复制图像的一部分　397\n22.1.29　imagecopymerge函数：复制并合并图像的一部分　397\n22.1.30　imagecopymergegray函数：用灰度复制并合并图像的一部分　398\n22.1.31　imagecopyresampled函数：重采样复制部分图像并调整大小　398\n22.1.32　imagecopyresized函数：复制部分图像并调整大小　399\n22.1.33　imagecreate函数：新建一个基于调色板的图像　400\n22.1.34　imagecreatefromgd2函数：从GD 2文件或URL中新建一个图像　401\n22.1.35　imagecreatefromgd2part函数：从给定的GD 2文件或URL中的一部分新建一个图像　401\n22.1.36　imagecreatefromgd函数：从GD文件或URL中新建一个图像　402\n22.1.37　imagecreatefromgif函数：从GIF文件或URL中新建一个图像　402\n22.1.38　imagecreatefromjpeg函数：从JPEG文件或URL中新建一个图像　402\n22.1.39　imagecreatefrompng函数：从PNG文件或URL中新建一个图像　403\n22.1.40　imagecreatefromstring函数：从字符串中的图像流新建一个图像　403\n22.1.41　imagecreatefromwbmp函数：从WBMP文件或URL中新建一个图像　404\n22.1.42　imagecreatefromxbm函数：从XBM文件或URL中新建一个图像　405\n22.1.43　imagecreatefromxpm函数：从XPM文件或URL中新建一个图像　405\n22.1.44　imagecreatetruecolor函数：新建一个真彩色图像　405\n22.1.45　imagedashedline函数：画一条虚线　406\n22.1.46　imagedestroy函数：销毁一个图像　407\n22.1.47　imageellipse函数：画一个椭圆　408\n22.1.48　imagefill函数：用指定颜色填充一个区域　409\n22.1.49　imagefilledarc函数：画一个椭圆弧并填充　410\n22.1.50　imagefilledellipse函数：画一个椭圆并填充　411\n22.1.51　imagefilledpolygon函数：画一个多边形并填充　412\n22.1.52　imagefilledrectangle函数：画一个矩形并填充　413\n22.1.53　imagefilltoborder函数：区域填充到指定颜色的边界为止　414\n22.1.54　imagefilter函数：对图像使用过滤器　415\n22.1.55　imagefontheight函数：获取字体高度　416\n22.1.56　imagefontwidth函数：获取字体宽度　416\n22.1.57　imageftbbox函数：给出一个使用FreeType2字体的文本框　416\n22.1.58　imagefttext函数：使用FreeType2字体将文本写入图像　417\n22.1.59　imagegammacorrect函数：对GD图像应用gamma修正　417\n22.1.60　imagegd2函数：将GD 2图像输出到浏览器或文件　418\n22.1.61　imagegd函数：将GD图像输出到浏览器或文件　418\n22.1.62　imagegif函数：以GIF格式将图像输出到浏览器或文件　419\n22.1.63　imageinterlace函数：激活或禁止隔行扫描　420\n22.1.64　imageistruecolor函数：检查图像是否为真彩色图像　420\n22.1.65　imagejpeg函数：以JPEG格式将图像输出到浏览器或文件　421\n22.1.66　imagelayereffect函数：设定alpha混色标志以使用绑定的libgd分层效果　421\n22.1.67　imageline函数：画一条线段　422\n22.1.68　imageloadfont函数：载入一个新字体　423\n22.1.69　imagepalettecopy函数：将调色板从一幅图像复制到另一幅　423\n22.1.70　imagepng函数：以PNG格式将图像输出到浏览器或文件　424\n22.1.71　imagepolygon函数：画一个多边形　424\n22.1.72　imagepsbbox函数：给出一个使用PostScript Type1字体的文本框　426\n22.1.73　imagepsencodefont函数：改变字体中的字符编码矢量　426\n22.1.74　imagepsextendfont函数：扩充或精简字体　427\n22.1.75　imagepsfreefont函数：释放一个PostScript Type1字体所占用的内存　427\n22.1.76　imagepsloadfont函数：从文件中加载一个PostScript Type1字体　427\n22.1.77　imagepsslantfont函数：倾斜某字体　428\n22.1.78　imagepstext函数：用PostScript Type1字体把文本字符串画在图像上　428\n22.1.79　imagerectangle函数：画一个矩形　429\n22.1.80　imagerotate函数：用给定角度旋转图像　430\n22.1.81　imagesavealpha函数：设置标记以在保存PNG图像时保存完整的alpha通道信息430\n22.1.82　imagesetbrush 函数：设定画线用的画笔图像　431\n22.1.83　imagesetpixel函数：画一个单一的像素　431\n22.1.84　imagesetstyle函数：设定画线的风格　432\n22.1.85　imagesetthickness函数：设定画线的宽度　434\n22.1.86　imagesettile函数：设定用于填充的贴图　434\n22.1.87　imagestring函数：水平地画一行字符串　434\n22.1.88　imagestringup函数：垂直地画一行字符串　435\n22.1.89　imagesx函数：获取图像宽度　436\n22.1.90　imagesy函数：获取图像高度　436\n22.1.91　imagetruecolortopalette函数：将真彩色图像转换为调色板图像　437\n22.1.92　imagettfbbox函数：取得使用TrueType字体的文本的范围　437\n22.1.93　imagettftext函数：用TrueType字体向图像写入文本　438\n22.1.94　imagetypes函数：返回当前PHP版本所支持的图像类型　439\n22.1.95　imagewbmp函数：以WBMP格式将图像输出到浏览器或文件　439\n22.1.96　imagexbm函数：将XBM图像输出到浏览器或文件　440\n22.1.97　iptcembed函数：将二进制IPTC数据嵌入一幅JPEG图像中　440\n22.1.98　iptcparse函数：将二进制IPTC块解析为单个标记　441\n22.1.99　jpeg2wbmp函数：将JPEG图像文件转换为WBMP图像文件　441\n22.1.100　png2wbmp函数：将PNG图像文件转换为WBMP图像文件　442\n22.2　小结　442\n\n第7篇　Win32函数篇\n\n第23章　Win32API函数　445\n23.1　PHP中的Win32API函数　445\n23.1.1　w32api_deftype函数：为w32api_functions函数定义一个类型　445\n23.1.2　w32api_init_dtype函数：创建了一个数据类型的实例，并且将函数返回值填入实例中　446\n23.1.3　w32api_invoke_function函数：带一个传递参数的执行函数，传递参数在函数名的后面　446\n23.1.4　w32api_register_function函数：从指定函数库中使用PHP注册一个函数　447\n23.1.5　w32api_set_call_method函数：设置调用的方法　447\n23.2　小结　447\n\n第24章　Win32PS函数　448\n24.1　PHP中的Win32PS函数　448\n24.1.1　win32_ps_list_procs函数：列出不同进程的内存使用情况和CPU时间　448\n24.1.2　win32_ps_stat_mem函数：列出当前系统的内存使用情况和CPU时间　449\n24.1.3　win32_ps_stat_proc函数：列出特定进程的内存使用情况和CPU时间　450\n\n\n\n\n第8篇　XML函数篇\n\n第25章　XML解析函数　453\n25.1　PHP中的语法解析函数　453\n25.1.1　utf8_decode函数：将用UTF-8方式编码的ISO-8859-1字符串转换成单字节的ISO-8859-1字符串　453\n25.1.2　utf8_encode函数：将ISO-8859-1编码的字符串转换为UTF-8编码　454\n25.1.3　xml_error_string函数：获取XML解析器的错误字符串　454\n25.1.4　xml_get_current_byte_index函数：获取XML解析器的当前字节索引　455\n25.1.5　xml_get_current_column_number函数：获取XML解析器的当前列号　455\n25.1.6　xml_get_current_line_number函数：获取XML解析器的当前行号　456\n25.1.7　xml_get_error_code函数：获取XML解析器的错误代码　456\n25.1.8　xml_parse_into_struct函数：将XML数据解析到数组中　457\n25.1.9　xml_parse函数：开始解析一个XML文档　458\n25.1.10　xml_parser_create_ns函数：生成一个支持命名空间的XML解析器　458\n25.1.11　xml_parser_create函数：建立一个XML解析器　459\n25.1.12　xml_parser_free函数：释放指定的XML解析器　459\n25.1.13　xml_parser_get_option函数：从XML解析器获取选项设置信息　460\n25.1.14　xml_parser_set_option函数：为指定的XML解析器进行选项设置　460\n25.1.15　xml_set_character_data_handler函数：建立字符数据处理器　461\n25.1.16　xml_set_default_handler函数：建立默认处理器　461\n25.1.17　xml_set_element_handler函数：建立起始和终止元素处理器　462\n25.1.18　xml_set_end_namespace_decl_handler函数：建立终止命名空间声明处理器　464\n25.1.19　xml_set_external_entity_ref_handler函数：建立外部实体指向处理器　464\n25.1.20　xml_set_notation_decl_handler函数：建立注释声明处理器　465\n25.1.21　xml_set_object函数：在对象中使用XML解析器　466\n25.1.22　xml_set_processing_instruction_handler函数：建立处理指令处理器　467\n25.1.23　xml_set_start_namespace_decl_handler函数：建立起始命名空间声明处理器　468\n25.1.24　xml_set_unparsed_entity_decl_handler函数：建立未解析实体定义声明处理器468\n25.2　小结　469\n\n第26章　XMLRPC函数　470\n26.1　PHP中的XMLRPC函数　470\n26.1.1　xmlrpc_decode_request函数：将XML译码为PHP本身的类型　470\n26.1.2　xmlrpc_decode函数：将XML译码为PHP本身的类型　471\n26.1.3　xmlrpc_encode_request函数：为PHP的值生成XML　471\n26.1.4　xmlrpc_encode函数：为PHP的值生成XML　472\n26.1.5　xmlrpc_get_type函数：为PHP值获取XMLRPC的类型　472\n26.1.6　xmlrpc_is_fault函数：检查XMLRPC是否出错　473\n26.1.7　xmlrpc_parse_method_descriptions函数：将XML译码成方法描述的列表　474\n26.1.8　xmlrpc_server_add_introspection_data函数：添加自我描述的文档　474\n26.1.9　xmlrpc_server_call_method函数：解析XML请求同时调用方法　475\n26.1.10　xmlrpc_server_create函数：创建一个XMLRPC服务端　475\n26.1.11　xmlrpc_server_destroy函数：销毁服务端资源　476\n26.1.12　xmlrpc_server_register_introspection_callback函数：注册一个PHP函数用于生成文档　476\n26.1.13　xmlrpc_server_register_method函数：注册一个PHP函数用于匹配XMLRPC方法名　477\n26.1.14　xmlrpc_set_type函数：为一个PHP字符串值设置XMLRPC的类型　478\n26.2　小结　479\n\n第9篇　综合函数篇\n\n第27章　Errors and Logging函数　483\n27.1　PHP中的Errors and Logging函数　483\n27.1.1　debug_backtrace函数：产生一个backtrace　483\n27.1.2　debug_print_backtrace函数：输出一个PHP backtrace　484\n27.1.3　error_log函数：发送一个错误信息到指定位置　484\n27.1.4　error_reporting函数：设置PHP错误报告等级　485\n27.1.5　restore_error_handler函数：恢复错误信息指针　486\n27.1.6　restore_exception_handler函数：恢复事先定义的例外指针　487\n27.1.7　set_error_handler函数：设置一个用户自定义的错误信息函数　487\n27.1.8　set_exception_handler函数：设置一个用户自定义的例外句柄函数　489\n27.1.9　trigger_error函数：产生一个用户级的错误、警告或者注意信息　489\n27.2　小结　490\n\n第28章　Math函数　491\n28.1　数学计算函数　491\n28.1.1　abs函数：求绝对值　491\n28.1.2　ceil函数：进一法取整　492\n28.1.3　floor函数：舍去法取整　492\n28.1.4　fmod函数：返回除法的浮点数余数　492\n28.1.5　log10函数：返回以10为底的对数　493\n28.1.6　log1p函数：返回log(1+number)　494\n28.1.7　log函数：返回指定数值的(自然)　对数494\n28.1.8　pow函数：返回指定数值的n次方　495\n28.1.9　round：对浮点数进行四舍五入运算　495\n28.1.10　sqrt函数：返回指定数值的平方根　496\n28.2　数学三角函数　496\n28.2.1　acos函数：求反余弦　497\n28.2.2　acosh函数：求反双曲余弦　497\n28.2.3　asin函数：求反正弦　497\n28.2.4　asinh函数：求反双曲正弦　498\n28.2.5　atan2函数：计算两个参数的反正切　498\n28.2.6　atan函数：求反正切　499\n28.2.7　atanh函数：求反双曲正切　499\n28.2.8　cos函数：求余弦　499\n28.2.9　cosh函数：求双曲余弦　500\n28.2.10　sin函数：求正弦　500\n28.2.11　sinh函数：求双曲正弦　501\n28.2.12　tan函数：求正切　501\n28.2.13　tanh函数：求双曲正切　501\n28.3　求最值函数　502\n28.3.1　getrandmax函数：显示随机数最大的可能值　502\n28.3.2　max函数：找出最大值　502\n28.3.3　min函数：找出最小值　503\n28.3.4　mt_getrandmax函数：显示随机数的最大可能值　504\n28.4　进制转换函数　504\n28.4.1　base_convert函数：在任意进制之间转换数字　505\n28.4.2　bindec函数：二进制转换为十进制　505\n28.4.3　decbin函数：十进制转换为二进制　506\n28.4.4　dechex函数：十进制转换为十六进制　506\n28.4.5　decoct函数：十进制转换为八进制　507\n28.4.6　hexdec函数：十六进制转换为十进制　507\n28.4.7　octdec函数：八进制转换为十进制　507\n28.5　其他数学函数　508\n28.5.1　deg2rad函数：将角度转换为弧度　508\n28.5.2　exp函数：计算e的指数　508\n28.5.3　expm1函数：返回exp(number)-1　509\n28.5.4　hypot函数：计算直角三角形的斜边长度　509\n28.5.5　is_finite函数：判断是否为有限值　510\n28.5.6　is_infinite函数：判断是否为无限值　510\n28.5.7　is_nan函数：判断是否为合法数值　511\n28.5.8　lcg_value函数：组合线性同余发生器　511\n28.5.9　mt_rand函数：生成更好的随机数　512\n28.5.10　mt_srand函数：播下一个更好的随机数发生器种子　512\n28.5.11　pi函数：获取圆周率值　513\n28.5.12　rad2deg函数：将弧度数转换为相应的角度数　513\n28.5.13　rand函数：产生一个随机整数　514\n28.5.14　srand函数：播下随机数发生器种子　514\n28.6　小结　515\n\n第29章　Output Control函数　516\n29.1　PHP中的输出控制函数　516\n29.1.1　flush函数：刷新输出缓冲　516\n29.1.2　ob_clean函数：清空输出缓冲　517\n29.1.3　ob_end_clean函数：清空缓冲区并且关闭正在进行的输出缓冲　518\n29.1.4　ob_end_flush函数：发送缓冲区数据并且关闭缓冲区　518\n29.1.5　ob_flush函数：发送缓冲区数据　519\n29.1.6　ob_get_clean函数：获取缓冲区内容并且结束缓冲区　519\n29.1.7　ob_get_contents函数：获取缓冲区数据　520\n29.1.8　ob_get_flush函数：刷新缓冲区数据，返回数据并且关闭缓冲区　520\n29.1.9　ob_get_length函数：获取缓冲区长度　521\n29.1.10　ob_get_level函数：获取缓冲区等级　522\n29.1.11　ob_get_status函数：获取缓冲区状态　522\n29.1.12　ob_gzhandler函数：供ob_start使用的回调函数用来压缩输出缓冲区　523\n29.1.13　ob_implicit_flush函数：打开或者关闭原本固有的输出缓冲区　524\n29.1.14　ob_list_handlers函数：列出所有使用的输出句柄　525\n29.1.15　ob_start函数：打开缓冲区　525\n29.1.16　output_add_rewrite_var函数：添加URL rewrite的值　526\n29.1.17　output_reset_rewrite_vars函数：重置URL rewrite的值　526\n29.2　小结　527\n\n第30章　PHP Options/Info函数　528\n30.1　PHP信息获取类函数　528\n30.1.1　assert函数：检查assertion声明是否错误　528\n30.1.2　extension_loaded函数：检查PHP扩展是否加载　529\n30.1.3　get_cfg_var函数：获取PHP配置选项的值　529\n30.1.4　get_current_user函数：获取当前PHP脚本的所有者的名称　530\n30.1.5　get_defined_constants函数：返回一个包含PHP预定义常量信息的数组　531\n30.1.6　get_extension_funcs函数：返回一个包含指定模块中的所有函数名称的数组　532\n30.1.7　get_include_path函数：返回当前配置的文件包含路径的信息　534\n30.1.8　get_included_files函数：返回一个关于文件包含信息的数组　534\n30.1.9　get_loaded_extensions函数：返回一个包含所有装载模块信息的数组　535\n30.1.10　get_magic_quotes_gpc函数：获取magic_quotes_gpc的状态信息　536\n30.1.11　get_magic_quotes_runtime函数：获取magic_quotes_ runtime的状态信息　537\n30.1.12　get_required_files函数：返回一个关于文件包含信息的数组　537\n30.1.13　getenv函数：获取PHP环境变量的值　538\n30.1.14　getlastmod函数：获取当前PHP页面文件的最后修改时间　539\n30.1.15　getmygid函数：获取当前PHP脚本页面所有者的GID号码　539\n30.1.16　getmyinode函数：获取当前PHP脚本页面的INODE号码　540\n30.1.17　getmypid函数：获取PHP的PID　541\n30.1.18　getmyuid函数：获取PHP脚本页面所有者的UID号码　541\n30.1.19　getopt函数：从命令行参数列表获取设置　542\n30.1.20　getrusage函数：获取当前的资源语法　542\n30.1.21　ini_get_all函数：获取所有配置选项　543\n30.1.22　ini_get函数：获取配置选项的值　544\n30.1.23　memory_get_usage函数：返回PHP脚本占用的内存空间　544\n30.1.24　php_ini_scanned_files函数：返回配置文件目录下的配置文件列表　545\n30.1.25　php_logo_guid函数：获取LOGO图片的GUID　546\n30.1.26　php_sapi_name函数：获取PHP和Web服务器之间的接口类型　546\n30.1.27　php_uname函数：获取PHP脚本运行的操作系统信息　547\n30.1.28　phpcredits函数：打印credits列表　548\n30.1.29　phpinfo函数：输出PHP的信息　549\n30.1.30　phpversion函数：获取PHP版本　550\n30.1.31　zend_logo_guid函数：获取ZEND的LOGO图片的GUID　550\n30.1.32　zend_version函数：获取ZEND引擎的版本　551\n30.2　PHP配置类函数　551\n30.2.1　assert_options函数：设置或者获取不同的声明标记　551\n30.2.2　ini_alter函数：设置PHP配置选项的值　552\n30.2.3　ini_restore函数：恢复配置选项的值　564\n30.2.4　ini_set函数：设置PHP配置选项的值　565\n30.2.5　putenv函数：设置环境变量　565\n30.2.6　restore_include_path函数：恢复文件包含路径配置信息　566\n30.2.7　set_include_path函数：设置文件包含路径配置选项　566\n30.2.8　set_magic_quotes_runtime函数：设置magic_quotes运行时间　567\n30.2.9　set_time_limit函数：设置最大执行时间　567\n30.3　其他类函数　568\n30.3.1　dl函数：加载PHP的扩展模块　568\n30.3.2　main函数：只是一个挂名的main()函数　568\n30.3.3　version_compare函数：比较PHP两个版本值　569\n30.4　小结　570\n\n第31章　Program Execution函数　571\n31.1　PHP中的程序执行函数　571\n31.1.1　escapeshellarg函数：过滤用作命令参数的字符串　571\n31.1.2　escapeshellcmd函数：过滤用作命令的字符串中的特殊字符　571\n31.1.3　exec函数：执行命令　572\n31.1.4　passthru函数：执行程序但不输出数据　573\n31.1.5　proc_close函数：关闭一个由函数proc_open()打开的进程，并返回进程的退出\n代码　574\n31.1.6　proc_get_status函数：获取进程的状态信息　574\n31.1.7　proc_nice函数：改变当前进程的优先权　575\n31.1.8　proc_open函数：执行命令并且打开输入输出文件指针　576\n31.1.9　proc_terminate函数：杀死进程　577\n31.1.10　shell_exec函数：执行命令并且将完整的输出结果作为一个字符串返回　578\n31.1.11　system函数：执行程序并输出结果　578\n31.2　小结　579\n\n第32章　Date/Time函数　580\n32.1　PHP中的日期、时间函数　580\n32.1.1　checkdate函数：验证一个格里高里日期　580\n32.1.2　date_default_timezone_get函数：获取一个脚本中所有日期、时间函数所使用的默认时区　581\n32.1.3　date_default_timezone_set函数：设定用于一个脚本中所有日期、时间函数的默认时区　582\n32.1.4　date_sunrise函数：返回给定的日期与地点的日出时间　582\n32.1.5　date_sunset函数：返回给定的日期与地点的日落时间　583\n32.1.6　date函数：格式化一个本地时间/日期　583\n32.1.7　getdate函数：获取日期/时间信息　586\n32.1.8　gettimeofday函数：获取当前时间　587\n32.1.9　gmdate函数：格式化一个GMT/UTC日期/时间　588\n32.1.10　gmmktime函数：获取GMT日期的UNIX时间戳　588\n32.1.11　gmstrftime函数：根据区域设置格式化GMT/UTC时间/日期　589\n32.1.12　idate函数：将本地时间、日期格式化为整数　589\n32.1.13　localtime函数：获取本地时间　590\n32.1.14　microtime函数：返回当前UNIX时间戳和微秒数　591\n32.1.15　mktime函数：获取一个日期的UNIX时间戳　592\n32.1.16　strftime函数：根据区域设置格式化本地时间/日期　593\n32.1.17　strptime函数：解析由strftime生成的日期/时间　595\n32.1.18　strtotime函数：将任何英文文本的日期、时间描述解析为UNIX时间戳　595\n32.1.19　time函数：返回当前的UNIX时间戳　596\n32.2　小结　597\n\n第33章　Classes/Objects函数　598\n33.1　PHP中的类/对象函数　598\n33.1.1　class_exists函数：检查类是否已定义　598\n33.1.2　get_class_methods函数：返回由类的方法名组成的数组　599\n33.1.3　get_class_vars函数：返回由类的默认属性组成的数组　600\n33.1.4　get_class函数：返回对象的类名　601\n33.1.5　get_declared_classes函数：返回由已定义类的名字所组成的数组　602\n33.1.6　get_declared_interfaces函数：返回一个声明接口的数组　604\n33.1.7　get_object_vars函数：返回由对象属性组成的关联数组　604\n33.1.8　get_parent_class函数：返回对象或类的父类名　605\n33.1.9　interface_exists函数：检查接口是否定义　606\n33.1.10　is_a函数：判断对象是否属于某一个类　607\n33.1.11　is_subclass_of函数：判断对象是否属于某一个类的子类　607\n33.1.12　method_exists函数：检查类的方法是否存在　608\n33.1.13　property_exists函数：检查对象或类是否具有指定的属性　609\n33.2　小结　610\n\n第34章　COM函数　611\n34.1　PHP中的COM与.NET函数　611\n34.1.1　COM函数：COM类构造函数，提供了将(D)COM组件整合到PHP脚本中的框架　611\n34.1.2　DOTNET函数：从.NET集合创建类并调用类的方法，使用类的属性　612\n34.1.3　VARIANT函数：将变量封装进VARIANT结构中的简单容器　613\n34.1.4　com_create_guid函数：产生一个全局唯一标识符(GUID)　613\n34.1.5　com_event_sink函数：在COM对象与PHP对象之间建立连接　614\n34.1.6　com_get_active_object函数：返回已经运行的一个COM类的实例的句柄　615\n34.1.7　com_invoke函数：调用COM组件的方法　615\n34.1.8　com_isenum函数：获取一个IenumVariant　616\n34.1.9　com_load_typelib函数：装载一个Typelib　616\n34.1.10　com_load函数：创建新的COM组件的引用　617\n34.1.11　com_message_pump函数：停止运行指定的时间，等待有信息到来　617\n34.1.12　com_print_typeinfo函数：输出一个定义为进程接口的PHP类　617\n34.2　小结　618\n\n第35章　杂项函数　619\n35.1　PHP中的杂项函数　619\n35.1.1　connection_aborted函数：判断客户端的连接状态　619\n35.1.2　connection_status函数：返回客户端的连接状态　620\n35.1.3　connection_timeout函数：判断脚本的运行状态　620\n35.1.4　constant函数：返回常量的值　620\n35.1.5　define函数：定义一个常量的值　621\n35.1.6　defined函数：判断一个常量是否存在　621\n35.1.7　die函数：退出程序　622\n35.1.8　eval函数：将一个字符串作为PHP代码来执行　622\n35.1.9　exit函数：退出并输出信息　623\n35.1.10　get_browser函数：获取客户端浏览器的各项功能　624\n35.1.11　highlight_file函数：对一个文件进行高亮度显示　625\n35.1.12　highlight_string函数：对一个字符串进行高亮度显示　626\n35.1.13　ignore_user_abort函数：设定是否在客户端断开连接时，结束PHP代码的运行　626\n35.1.14　pack函数：将指定数据打包为二进制字符串　627\n35.1.15　php_check_syntax函数：检查PHP文件的语法　628\n35.1.16　php_strip_whitespace函数：去除PHP文件中的注释和空格　628\n35.1.17　show_source函数：对一个文件进行高亮度显示　629\n35.1.18　sleep函数：暂停执行程序　629\n35.1.19　time_nanosleep函数：暂停执行程序　630\n35.1.20　time_sleep_until函数：在指定时间唤醒程序　631\n35.1.21　uniqid函数：生成一个单独的ID　631\n35.1.22　unpack函数：从二进制字符串中解包出数据到数组　631\n35.1.23　usleep函数：以微秒级暂停程序　632', 6, 462, 1, 0, 1, '2021-07-09 01:17:37', '2022-09-11 07:31:19');
INSERT INTO `qin500_articles` (`id`, `uid`, `title`, `text`, `masterpic`, `pure`, `cid`, `views`, `isshow`, `zan`, `bdts`, `created_at`, `updated_at`) VALUES
(1051, 1000, 'js跨源通信postMessage', '<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">1、子页面向父页面发送消息\nvar parentData = {type: \'passDataBack\', data: passData};\nwindow.parent.postMessage(parentData, \'*\');\n \n2、父页面向子页面发送消息\nvar data = {type: \'answerResult\', data: jsonData.data};\n$(\".courseware_h5 iframe\")[0].contentWindow.postMessage(data, \'*\');\n \n3、接收消息方法\nwindow.addEventListener(\'message\', function (e) {\n})</code></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/059.jpg', '1、子页面向父页面发送消息\nvar parentData = {type: \'passDataBack\', data: passData};\nwindow.parent.postMessage(parentData, \'*\');\n \n2、父页面向子页面发送消息\nvar data = {type: \'answerResult\', data: jsonData.data};\n$(\".courseware_h5 iframe\")[0].contentWindow.postMessage(data, \'*\');\n \n3、接收消息方法\nwindow.addEventListener(\'message\', function (e) {\n})', 11, 382, 1, 0, 1, '2021-07-09 01:22:50', '2022-09-11 07:31:18'),
(1052, 1000, 'jq ajax异步请求', '<pre class=\"language-js\"><code class=\"line-numbers language-js\">全局设置\n$.ajaxSetup({\n    async: true,\n    // crossDomain: true,\n    xhrFields: {\n        withCredentials: true\n    },\n    headers: {\n//设置请求头,后面不用每个都设置\n        \'X-CSRF-TOKEN\': $(\'meta[name=\"csrf-token\"]\').attr(\"content\")\n    },\n});\n$.ajax({\n                type: \'post\',\n                url: url,\n                data: data,\n                dataType: \"json\",//数据类型为jsonp\n                async: true,\n                crossDomain: true, //设置跨域为true\n                xhrFields: {\n                    withCredentials: true //默认情况下，标准的跨域请求是不会发送cookie的\n                },\n                complete: function (data, status) {\n                    let r = data.responseJSON;\n                    try {\n                        res(r);\n                    } catch (e) {\n                        alert(\"遇到未知错误,请刷新页面重试!\");\n                    }\n                }\n            });\n$.ajax({ data: myData });\n$.post(\'http://example.com/server/api.php\', {\n    username: \'test\',\n    password: \'test\'\n}, function (d) {\n    $(\'body\').html(d.status);\n}, \'json\');</code></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/096.jpg', '全局设置\n$.ajaxSetup({\n    async: true,\n    // crossDomain: true,\n    xhrFields: {\n        withCredentials: true\n    },\n    headers: {\n//设置请求头,后面不用每个都设置\n        \'X-CSRF-TOKEN\': $(\'meta[name=\"csrf-token\"]\').attr(\"content\")\n    },\n});\n$.ajax({\n                type: \'post\',\n                url: url,\n                data: data,\n                dataType: \"json\",//数据类型为jsonp\n                async: true,\n                crossDomain: true, //设置跨域为true\n                xhrFields: {\n                    withCredentials: true //默认情况下，标准的跨域请求是不会发送cookie的\n                },\n                complete: function (data, status) {\n                    let r = data.responseJSON;\n                    try {\n                        res(r);\n                    } catch (e) {\n                        alert(\"遇到未知错误,请刷新页面重试!\");\n                    }\n                }\n            });\n$.ajax({ data: myData });\n$.post(\'http://example.com/server/api.php\', {\n    username: \'test\',\n    password: \'test\'\n}, function (d) {\n    $(\'body\').html(d.status);\n}, \'json\');', 11, 442, 1, 0, 1, '2021-07-09 01:24:30', '2022-09-11 07:31:18'),
(1053, 1000, '/var/log/mysqld.log 中找不到临时密码', '<p style=\"margin: 0in; font-size: 11.0pt;\"><span style=\"font-family: Calibri;\">centos7</span><span style=\"font-family: \'Microsoft YaHei\';\">通过</span><span style=\"font-family: Calibri;\">yum</span><span style=\"font-family: \'Microsoft YaHei\';\">装完</span><span style=\"font-family: Calibri;\">mysql</span><span style=\"font-family: \'Microsoft YaHei\';\">，找不到</span><span style=\"font-family: Calibri;\">root</span><span style=\"font-family: \'Microsoft YaHei\';\">密码，网上文章都说了一条指令</span></p>\n<p style=\"margin: 0in; font-family: Calibri; font-size: 11.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Calibri; font-size: 11.0pt;\">grep \'temporary password\' /var/log/mysqld.log</p>\n<p style=\"margin: 0in; font-size: 11.0pt;\"><span style=\"font-family: \'Microsoft YaHei\';\">但是我的</span><span style=\"font-family: Calibri;\">mysqld.log</span><span style=\"font-family: \'Microsoft YaHei\';\">中根本没有</span><span style=\"font-family: Calibri;\">temporary password</span><span style=\"font-family: \'Microsoft YaHei\';\">，折腾了半天才找到解决方案，相信有小伙伴会遇到一样的问题，贴出来给大家参考：</span></p>\n<p style=\"margin: 0in; font-family: Calibri; font-size: 11.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-size: 11.0pt;\"><span style=\"font-family: Calibri;\">1.</span><span style=\"font-family: \'Microsoft YaHei\';\">删除原来安装过的</span><span style=\"font-family: Calibri;\">mysql</span><span style=\"font-family: \'Microsoft YaHei\';\">残留的数据（这一步非常重要，问题就出在这）</span></p>\n<p style=\"margin: 0in; font-family: Calibri; font-size: 11.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Calibri; font-size: 11.0pt;\">rm -rf /var/lib/mysql</p>\n<p style=\"margin: 0in; font-size: 11.0pt;\"><span style=\"font-family: Calibri;\">2.</span><span style=\"font-family: \'Microsoft YaHei\';\">重启</span><span style=\"font-family: Calibri;\">mysqld</span><span style=\"font-family: \'Microsoft YaHei\';\">服务</span></p>\n<p style=\"margin: 0in; font-family: Calibri; font-size: 11.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Calibri; font-size: 11.0pt;\">systemctl restart mysqld</p>\n<p style=\"margin: 0in; font-size: 11.0pt;\"><span style=\"font-family: Calibri;\">3.</span><span style=\"font-family: \'Microsoft YaHei\';\">再去找临时密码</span></p>\n<p style=\"margin: 0in; font-family: Calibri; font-size: 11.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Calibri; font-size: 11.0pt;\">grep \'temporary password\' /var/log/mysqld.log</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/049.jpg', 'centos7通过yum装完mysql，找不到root密码，网上文章都说了一条指令\n&nbsp;\ngrep \'temporary password\' /var/log/mysqld.log\n但是我的mysqld.log中根本没有temporary password，折腾了半天才找到解决方案，相信有小伙伴会遇到一样的问题，贴出来给大家参考：\n&nbsp;\n1.删除原来安装过的mysql残留的数据（这一步非常重要，问题就出在这）\n&nbsp;\nrm -rf /var/lib/mysql\n2.重启mysqld服务\n&nbsp;\nsystemctl restart mysqld\n3.再去找临时密码\n&nbsp;\ngrep \'temporary password\' /var/log/mysqld.log', 12, 460, 1, 0, 1, '2021-07-09 01:39:50', '2022-09-11 07:31:19'),
(1054, 1000, 'php常用关键字', '<table style=\"border-collapse: collapse; width: 100%; height: 231px; margin-left: auto; margin-right: auto;\" border=\"1\">\n<tbody>\n<tr style=\"height: 21px;\">\n<td style=\"width: 20%; height: 21px; text-align: center;\">and</td>\n<td style=\"width: 18.6775%; height: 21px; text-align: center;\">or</td>\n<td style=\"width: 15.2187%; height: 21px; text-align: center;\">xor</td>\n<td style=\"width: 17.762%; height: 21px; text-align: center;\">if</td>\n<td style=\"width: 16.5107%; height: 21px; text-align: center;\">else</td>\n<td style=\"width: 11.8311%; height: 21px; text-align: center;\">for</td>\n</tr>\n<tr style=\"height: 21px; text-align: center;\">\n<td style=\"width: 20%; height: 21px;\">foreach</td>\n<td style=\"width: 18.6775%; height: 21px;\">while</td>\n<td style=\"width: 15.2187%; height: 21px;\">do</td>\n<td style=\"width: 17.762%; height: 21px;\">swich</td>\n<td style=\"width: 16.5107%; height: 21px;\">case</td>\n<td style=\"width: 11.8311%; height: 21px;\">break</td>\n</tr>\n<tr style=\"text-align: center;\">\n<td style=\"width: 20%;\">continue</td>\n<td style=\"width: 18.6775%;\">default</td>\n<td style=\"width: 15.2187%;\">as</td>\n<td style=\"width: 17.762%;\">elseif</td>\n<td style=\"width: 16.5107%;\">declare</td>\n<td style=\"width: 11.8311%;\">endif</td>\n</tr>\n<tr style=\"height: 21px; text-align: center;\">\n<td style=\"width: 20%; height: 21px;\">endfor</td>\n<td style=\"width: 18.6775%; height: 21px;\">endforeach</td>\n<td style=\"width: 15.2187%; height: 21px;\">endwhile</td>\n<td style=\"width: 17.762%; height: 21px;\">endswitch</td>\n<td style=\"width: 16.5107%; height: 21px;\">enddeclare</td>\n<td style=\"width: 11.8311%; height: 21px;\">array</td>\n</tr>\n<tr style=\"height: 21px; text-align: center;\">\n<td style=\"width: 20%; height: 21px;\">static</td>\n<td style=\"width: 18.6775%; height: 21px;\">const</td>\n<td style=\"width: 15.2187%; height: 21px;\">class</td>\n<td style=\"width: 17.762%; height: 21px;\">extends</td>\n<td style=\"width: 16.5107%; height: 21px;\">new</td>\n<td style=\"width: 11.8311%; height: 21px;\">exception</td>\n</tr>\n<tr style=\"height: 21px; text-align: center;\">\n<td style=\"width: 20%; height: 21px;\">global</td>\n<td style=\"width: 18.6775%; height: 21px;\">function</td>\n<td style=\"width: 15.2187%; height: 21px;\">exit</td>\n<td style=\"width: 17.762%; height: 21px;\">die</td>\n<td style=\"width: 16.5107%; height: 21px;\">echo</td>\n<td style=\"width: 11.8311%; height: 21px;\">print</td>\n</tr>\n<tr style=\"height: 21px; text-align: center;\">\n<td style=\"width: 20%; height: 21px;\">eval</td>\n<td style=\"width: 18.6775%; height: 21px;\">isset</td>\n<td style=\"width: 15.2187%; height: 21px;\">unset</td>\n<td style=\"width: 17.762%; height: 21px;\">return</td>\n<td style=\"width: 16.5107%; height: 21px;\">define</td>\n<td style=\"width: 11.8311%; height: 21px;\">defined</td>\n</tr>\n<tr style=\"height: 21px; text-align: center;\">\n<td style=\"width: 20%; height: 21px;\">include</td>\n<td style=\"width: 18.6775%; height: 21px;\">include_once</td>\n<td style=\"width: 15.2187%; height: 21px;\">require</td>\n<td style=\"width: 17.762%; height: 21px;\">require_once</td>\n<td style=\"width: 16.5107%; height: 21px;\">cfunction</td>\n<td style=\"width: 11.8311%; height: 21px;\">use</td>\n</tr>\n<tr style=\"height: 21px; text-align: center;\">\n<td style=\"width: 20%; height: 21px;\">var</td>\n<td style=\"width: 18.6775%; height: 21px;\">public</td>\n<td style=\"width: 15.2187%; height: 21px;\">private</td>\n<td style=\"width: 17.762%; height: 21px;\">protected</td>\n<td style=\"width: 16.5107%; height: 21px;\">implements</td>\n<td style=\"width: 11.8311%; height: 21px;\">interface</td>\n</tr>\n<tr style=\"height: 21px; text-align: center;\">\n<td style=\"width: 20%; height: 21px;\">extends</td>\n<td style=\"width: 18.6775%; height: 21px;\">abstract</td>\n<td style=\"width: 15.2187%; height: 21px;\">clone</td>\n<td style=\"width: 17.762%; height: 21px;\">try</td>\n<td style=\"width: 16.5107%; height: 21px;\">catch</td>\n<td style=\"width: 11.8311%; height: 21px;\">throw</td>\n</tr>\n</tbody>\n</table>', 'https://wpcdn.qin500.com/QIN500/SUCAI/076.jpg', '\n\n\nand\nor\nxor\nif\nelse\nfor\n\n\nforeach\nwhile\ndo\nswich\ncase\nbreak\n\n\ncontinue\ndefault\nas\nelseif\ndeclare\nendif\n\n\nendfor\nendforeach\nendwhile\nendswitch\nenddeclare\narray\n\n\nstatic\nconst\nclass\nextends\nnew\nexception\n\n\nglobal\nfunction\nexit\ndie\necho\nprint\n\n\neval\nisset\nunset\nreturn\ndefine\ndefined\n\n\ninclude\ninclude_once\nrequire\nrequire_once\ncfunction\nuse\n\n\nvar\npublic\nprivate\nprotected\nimplements\ninterface\n\n\nextends\nabstract\nclone\ntry\ncatch\nthrow\n\n\n', 1, 438, 1, 0, 1, '2021-07-09 14:39:34', '2022-09-11 07:31:15'),
(1055, 1000, 'php基本语法(一)', '<p>引用变量</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">$a=\'hello world\';\n$b=&amp;$a;\n\necho $a . \"&lt;br&gt;\"; //hello world\necho $b. \"&lt;br&gt;\";//hello world\n\n$b=\"hi\";\n\necho $a. \"&lt;br&gt;\";// hi\necho $b. \"&lt;br&gt;\";//h1</code></pre>\n<p>布尔型,</p>\n<p>除了下面的都为ture</p>\n<pre class=\"language-php\"><code class=\"line-numbers language-php\">&lt;?php\n//以下都为false\nvar_dump((bool)0);0\nvar_dump((bool)\"\");//空字符串\nvar_dump((bool)$b);//未定义的变量\nvar_dump((bool)[]);//没有成员的空数组\n\n$arr=\"1222\";\nunset($arr);//销毁\nvar_dump((bool)$arr);//销毁的变量</code></pre>\n<p>定界符</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">&lt;?php\n//定界符\n$name=\"xiaoli\";\necho &lt;&lt;&lt;EOT\n    MY NAME IS $name. I am printing a \"String\" \\n\n    \\tNow, i am printing some new line \\n\\r.\n    \\t This should print a capital \'A\'\nEOT;\n</code></pre>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">&lt;?php\n//定界符\n$name=\"xiaoli\";\n//在EOT两端加入单引号,里面的变量不解释\necho &lt;&lt;&lt;\'EOT\'\n    MY NAME IS $name. I am printing a \"String\" \\n\n    \\tNow, i am printing some new line \\n\\r.\n    \\t This should print a capital \'A\'\nEOT;\n\n//在EOT两端加入双引号,里面的变量解释\necho &lt;&lt;&lt;\"EOT\"\n    MY NAME IS $name. I am printing a \"String\" \\n\n    \\tNow, i am printing some new line \\n\\r.\n    \\t This should print a capital \'A\'\nEOT;\n</code></pre>\n<p>NULL</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">&lt;?php\n\n//判断是否为null,下列情况都输出为NULL\n\n$arr=NULL;\n$abc=\"hello world\";\nunset($abc);\n\nvar_dump($arr);//被赋值为NULL\nvar_dump($abc);//被销毁的变量\nvar_dump($b);//未定义的变量</code></pre>\n<p>变量类型的测试函数</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">&lt;?php\n\nis_bool();//是否布尔\nis_int(),is_integer(),is_long()//是否整型\nis_float(),is_double(),is_real()//是否浮点\nis_string()//是否字符串\nis_array()//是否数组\nis_object()//对象\nis_resource()//资源\nis_scalar()//是否标量,也就是一个整数,浮点数,布尔型或字符串\nis_numeric()//是否是任何类型的数字或数字字符串\nis_callable()是否有效的函数名</code></pre>\n<p>预定义常量和魔术常量</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">&lt;?php\n//魔术常量\nvar_dump(__FILE__);\nvar_dump(__LINE__);\nvar_dump(__FUNCTION__);\nvar_dump(__CLASS__);\nvar_dump(__METHOD__);\n//预定义常量\nvar_dump(M_PI);\nvar_dump(DIRECTORY_SEPARATOR);\nvar_dump(PHP_OS);//操作系统名称  winnt\nvar_dump(PHP_VERSION);//php版本\nvar_dump(PATH_SEPARATOR);//根据操作系统决定环境变量的目录列表分隔符(;或:)\nvar_dump(E_ERROR);//错误,导致php脚本运行终止\nvar_dump(E_PARSE);//解析错误\nvar_dump(E_NOTICE);//非关键错误\nvar_dump(E_WARNING);//警告,不会导致php脚本运行终止</code></pre>\n<p>php提供四种流程控制语句</p>\n<p>for,foreach,while do...while或者switch</p>\n<p>break;结束当前循环</p>\n<p>continue;跳出本次循环</p>\n<p>&nbsp;</p>\n<p>go语句</p>\n<p>&nbsp;</p>\n<p>全局变量</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">&lt;?php\n\n$arr=[\'name\'=&gt;\'小敏\',\'age\'=&gt;23,\'sex\'=&gt;\'man\',\'height\'=&gt;170];\n\nfunction one(){\n    global $arr;//用global引用全局变量\n    foreach($arr as $k=&gt;$v){\n        $u .= $k . \'=&gt;\' . $v . \"&lt;br&gt;\";\n    }\n    return $u;\n}\necho one();\n\n</code></pre>\n<p>&nbsp;</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/039.jpg', '引用变量\n$a=\'hello world\';\n$b=&amp;$a;\n\necho $a . \"&lt;br&gt;\"; //hello world\necho $b. \"&lt;br&gt;\";//hello world\n\n$b=\"hi\";\n\necho $a. \"&lt;br&gt;\";// hi\necho $b. \"&lt;br&gt;\";//h1\n布尔型,\n除了下面的都为ture\n&lt;?php\n//以下都为false\nvar_dump((bool)0);0\nvar_dump((bool)\"\");//空字符串\nvar_dump((bool)$b);//未定义的变量\nvar_dump((bool)[]);//没有成员的空数组\n\n$arr=\"1222\";\nunset($arr);//销毁\nvar_dump((bool)$arr);//销毁的变量\n定界符\n&lt;?php\n//定界符\n$name=\"xiaoli\";\necho &lt;&lt;&lt;EOT\n    MY NAME IS $name. I am printing a \"String\" \\n\n    \\tNow, i am printing some new line \\n\\r.\n    \\t This should print a capital \'A\'\nEOT;\n\n&lt;?php\n//定界符\n$name=\"xiaoli\";\n//在EOT两端加入单引号,里面的变量不解释\necho &lt;&lt;&lt;\'EOT\'\n    MY NAME IS $name. I am printing a \"String\" \\n\n    \\tNow, i am printing some new line \\n\\r.\n    \\t This should print a capital \'A\'\nEOT;\n\n//在EOT两端加入双引号,里面的变量解释\necho &lt;&lt;&lt;\"EOT\"\n    MY NAME IS $name. I am printing a \"String\" \\n\n    \\tNow, i am printing some new line \\n\\r.\n    \\t This should print a capital \'A\'\nEOT;\n\nNULL\n&lt;?php\n\n//判断是否为null,下列情况都输出为NULL\n\n$arr=NULL;\n$abc=\"hello world\";\nunset($abc);\n\nvar_dump($arr);//被赋值为NULL\nvar_dump($abc);//被销毁的变量\nvar_dump($b);//未定义的变量\n变量类型的测试函数\n&lt;?php\n\nis_bool();//是否布尔\nis_int(),is_integer(),is_long()//是否整型\nis_float(),is_double(),is_real()//是否浮点\nis_string()//是否字符串\nis_array()//是否数组\nis_object()//对象\nis_resource()//资源\nis_scalar()//是否标量,也就是一个整数,浮点数,布尔型或字符串\nis_numeric()//是否是任何类型的数字或数字字符串\nis_callable()是否有效的函数名\n预定义常量和魔术常量\n&lt;?php\n//魔术常量\nvar_dump(__FILE__);\nvar_dump(__LINE__);\nvar_dump(__FUNCTION__);\nvar_dump(__CLASS__);\nvar_dump(__METHOD__);\n//预定义常量\nvar_dump(M_PI);\nvar_dump(DIRECTORY_SEPARATOR);\nvar_dump(PHP_OS);//操作系统名称  winnt\nvar_dump(PHP_VERSION);//php版本\nvar_dump(PATH_SEPARATOR);//根据操作系统决定环境变量的目录列表分隔符(;或:)\nvar_dump(E_ERROR);//错误,导致php脚本运行终止\nvar_dump(E_PARSE);//解析错误\nvar_dump(E_NOTICE);//非关键错误\nvar_dump(E_WARNING);//警告,不会导致php脚本运行终止\nphp提供四种流程控制语句\nfor,foreach,while do...while或者switch\nbreak;结束当前循环\ncontinue;跳出本次循环\n&nbsp;\ngo语句\n&nbsp;\n全局变量\n&lt;?php\n\n$arr=[\'name\'=&gt;\'小敏\',\'age\'=&gt;23,\'sex\'=&gt;\'man\',\'height\'=&gt;170];\n\nfunction one(){\n    global $arr;//用global引用全局变量\n    foreach($arr as $k=&gt;$v){\n        $u .= $k . \'=&gt;\' . $v . \"&lt;br&gt;\";\n    }\n    return $u;\n}\necho one();\n\n\n&nbsp;', 1, 385, 1, 0, 1, '2021-07-10 00:39:31', '2022-09-11 07:31:15'),
(1056, 1000, 'php基本语法(二)', '<p>静态变量</p>\n<pre class=\"language-php\"><code class=\"line-numbers language-php\">&lt;?php\n\nfunction one(){\n    static $num=0;\n    echo $num;\n    $num++;\n}\none();//0\none();//1\none();//2\n?&gt;</code></pre>\n<p>常量</p>\n<pre class=\"language-php\"><code class=\"line-numbers language-php\">&lt;?php\ndefine(\"MI\",3.532353);\ndefine(\'ABC\',\'13RWERF\');//定义一个常量\nconst BCD=3123;\necho constant(\'ABC\');//获取常量的值\n\n//判断常量是否被定义\necho (int)defined(\"pi\");//0\n\n//获取所有的常量,包含系统内置,插件,用户自定义常量输出为数组\n$consts=get_defined_constants();\n\n//判断是否为数值\necho (int)is_numeric(\"35\");//1\n\n?&gt;</code></pre>\n<p>&nbsp;</p>\n<p>变量自动转换</p>\n<p>关于自动转换,含有数字开头的字符串在php5.6版本下可用</p>\n<p>在php7.3版本下,会发出警告提示,所以不建议让它自动转换为数字,应该使用</p>\n<p>int()强制转换为数值类型的数据,再进行运算</p>\n<pre class=\"language-php\"><code class=\"line-numbers language-php\">&lt;?php\n\n$foo = \"1\";  // $foo 是字符串 (ASCII 49)\n$foo *= 2;   // $foo 现在是一个整数 (2)\n$foo = $foo * 1.3;  // $foo 现在是一个浮点数 (2.6)\n//测试发现在php5.6版本可行\n$foo = 5 * \"10 Little Piggies\"; // $foo 是整数 (50)\n$foo = 5 * \"10 Small Pigs\";     // $foo 是整数 (50)\necho $foo;\n\n//强制转换字符串为数值型\n$foo = 5 * (double)\"10 Small Pigs\";     // $foo 是整数 (50)\n?&gt;</code></pre>\n<p>&nbsp;</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/044.jpg', '静态变量\n&lt;?php\n\nfunction one(){\n    static $num=0;\n    echo $num;\n    $num++;\n}\none();//0\none();//1\none();//2\n?&gt;\n常量\n&lt;?php\ndefine(\"MI\",3.532353);\ndefine(\'ABC\',\'13RWERF\');//定义一个常量\nconst BCD=3123;\necho constant(\'ABC\');//获取常量的值\n\n//判断常量是否被定义\necho (int)defined(\"pi\");//0\n\n//获取所有的常量,包含系统内置,插件,用户自定义常量输出为数组\n$consts=get_defined_constants();\n\n//判断是否为数值\necho (int)is_numeric(\"35\");//1\n\n?&gt;\n&nbsp;\n变量自动转换\n关于自动转换,含有数字开头的字符串在php5.6版本下可用\n在php7.3版本下,会发出警告提示,所以不建议让它自动转换为数字,应该使用\nint()强制转换为数值类型的数据,再进行运算\n&lt;?php\n\n$foo = \"1\";  // $foo 是字符串 (ASCII 49)\n$foo *= 2;   // $foo 现在是一个整数 (2)\n$foo = $foo * 1.3;  // $foo 现在是一个浮点数 (2.6)\n//测试发现在php5.6版本可行\n$foo = 5 * \"10 Little Piggies\"; // $foo 是整数 (50)\n$foo = 5 * \"10 Small Pigs\";     // $foo 是整数 (50)\necho $foo;\n\n//强制转换字符串为数值型\n$foo = 5 * (double)\"10 Small Pigs\";     // $foo 是整数 (50)\n?&gt;\n&nbsp;', 1, 485, 1, 0, 1, '2021-07-10 02:17:39', '2022-09-11 07:31:15'),
(1057, 1000, '微信网页版抓包教程', '<p>本文简单的分析一下微信web版登录流程,及抓包原理</p>\n<p><a href=\"https://wx2.qq.com/\">https://wx2.qq.com/</a></p>\n<p>我们打开上面的网址,首先页面显示的是一个二维码</p>\n<p>当我们用手机版微信扫描上面的二维码,再确认,就登陆了网页版微信</p>\n<p>然后,页面会开始自动从服务器下载数据(包括消息,联系人,阅读等等)</p>\n<p>第一步</p>\n<p>打开网页,页面向服务器请求,一个唯一随机字符串,</p>\n<p><a href=\"https://login.wx2.qq.com/jslogin?appid=wx782c26e4c19acffb\">https://login.wx2.qq.com/jslogin?appid=wx782c26e4c19acffb</a></p>\n<p>页面返回如下数据,每次刷新,都会生成不一样的uuid</p>\n<p>window.QRLogin.code = 200; window.QRLogin.uuid = \"wZnFkmjA3B==\";</p>\n<p>其中uuid就是我们生成二维码的数据</p>\n<p>把UUID拼接到下面的URL,就会生成一个二维码,这个二维码就是我们要扫描登录的二维码</p>\n<p>输入错误,页面会显示空白</p>\n<p><a href=\"https://login.weixin.qq.com/qrcode/%E3%80%90uuid%E3%80%91\" target=\"_blank\" rel=\"noopener\">https://login.weixin.qq.com/qrcode/【uuid】</a></p>\n<p>手机扫描完成确认后,</p>\n<p>js就开始向服务器加载页面所需的数据</p>\n<p>js每隔一段时间向下面的网址发送,检测用户是否手机登录或确认登录</p>\n<p>返回值状态码含义：201【已扫描，未登录】200【已扫描，已登录】408【超时】400【未扫描】</p>\n<p><a href=\"https://login.wx2.qq.com/cgi-bin/mmwebwx-bin/login?[--------]\">https://login.wx2.qq.com/cgi-bin/mmwebwx-bin/login?[--------]</a></p>\n<p><img src=\"https://wpcdn.qin500.com/QIN500/1000/202181811381828K64bsTaENEkNW7hiiFeCCDCD.png\" alt=\"\" width=\"755\" height=\"463\" /></p>\n<p>上面是获取的联系人列表,下面是html加载的数据</p>\n<p><img src=\"https://wpcdn.qin500.com/QIN500/1000/2021818113844rW7MGG4MhFGPKr6P5a2Y83JHR6.png\" alt=\"\" width=\"786\" height=\"460\" /></p>\n<p>下面通过post,发送消息给服务器,</p>\n<p><img src=\"https://wpcdn.qin500.com/QIN500/1000/202181811393TYQeZrTdyWQNR8b2kCT2TTYtsP.png\" alt=\"\" width=\"750\" height=\"278\" /></p>\n<p><img src=\"https://wpcdn.qin500.com/QIN500/1000/2021818113950PeDMwGpjFiefT1J7FCZcF5pfAY.png\" alt=\"\" width=\"726\" height=\"373\" /></p>\n<p>我们可以看到发送数据后,服务器给我们返回的结果0,成功了</p>\n<p>测试中发现,返回1200时,数据发送失败了,</p>', 'https://wpcdn.qin500.com/QIN500/1000/202181811381828K64bsTaENEkNW7hiiFeCCDCD.png', '本文简单的分析一下微信web版登录流程,及抓包原理\nhttps://wx2.qq.com/\n我们打开上面的网址,首先页面显示的是一个二维码\n当我们用手机版微信扫描上面的二维码,再确认,就登陆了网页版微信\n然后,页面会开始自动从服务器下载数据(包括消息,联系人,阅读等等)\n第一步\n打开网页,页面向服务器请求,一个唯一随机字符串,\nhttps://login.wx2.qq.com/jslogin?appid=wx782c26e4c19acffb\n页面返回如下数据,每次刷新,都会生成不一样的uuid\nwindow.QRLogin.code = 200; window.QRLogin.uuid = \"wZnFkmjA3B==\";\n其中uuid就是我们生成二维码的数据\n把UUID拼接到下面的URL,就会生成一个二维码,这个二维码就是我们要扫描登录的二维码\n输入错误,页面会显示空白\nhttps://login.weixin.qq.com/qrcode/【uuid】\n手机扫描完成确认后,\njs就开始向服务器加载页面所需的数据\njs每隔一段时间向下面的网址发送,检测用户是否手机登录或确认登录\n返回值状态码含义：201【已扫描，未登录】200【已扫描，已登录】408【超时】400【未扫描】\nhttps://login.wx2.qq.com/cgi-bin/mmwebwx-bin/login?[--------]\n\n上面是获取的联系人列表,下面是html加载的数据\n\n下面通过post,发送消息给服务器,\n\n\n我们可以看到发送数据后,服务器给我们返回的结果0,成功了\n测试中发现,返回1200时,数据发送失败了,', 1, 519, 1, 0, 1, '2021-07-11 21:34:41', '2022-09-11 07:31:16'),
(1060, 1000, 'PHP 将图片转换为 base64 字符串格式', '<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">&lt;?php\n$img=\"1.png\";\n$f=fopen($img,\'r\');\n$b=fread($f,filesize($img));\nfclose($f);\n$image_info=getimagesize($img);获取图片信息\nprint_r($image_info);//Array ( [0] =&gt; 3396 [1] =&gt; 2452 [2] =&gt; 3 [3] =&gt; width=\"3396\" height=\"2452\" [bits] =&gt; 8 [mime] =&gt; image/png )\necho \'&lt;img src=\"data:png;base64,\' . base64_encode($b) .\'\"&gt;\';\n\n\n?&gt;</code></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/061.jpg', '&lt;?php\n$img=\"1.png\";\n$f=fopen($img,\'r\');\n$b=fread($f,filesize($img));\nfclose($f);\n$image_info=getimagesize($img);获取图片信息\nprint_r($image_info);//Array ( [0] =&gt; 3396 [1] =&gt; 2452 [2] =&gt; 3 [3] =&gt; width=\"3396\" height=\"2452\" [bits] =&gt; 8 [mime] =&gt; image/png )\necho \'&lt;img src=\"data:png;base64,\' . base64_encode($b) .\'\"&gt;\';\n\n\n?&gt;', 1, 392, 1, 0, 1, '2021-07-12 00:22:53', '2022-09-11 09:43:01'),
(1061, 1000, 'Wget快速扒网站源码', '<pre class=\"language-html\"><code class=\"line-numbers language-html\">wget -r -p -k -np -e robots=off --no-cookie --no-check-certificate  https://www.baidu.com/ </code></pre>\n<p><br />参数说明：<br />-r &nbsp; ： &nbsp;递归下载<br />-p &nbsp;： &nbsp;下载所有用于显示 HTML 页面的图片之类的元素<br />-k &nbsp;：&nbsp; 把已下载文件中的所有链接都转换为本地引用，不在依赖原始或在线内容<br />-np： &nbsp; 不追溯至父目录</p>\n<p>--no-cookie --no-check-certificate&nbsp; 忽略ssl</p>\n<p>--user-agent =\"\"</p>\n<p>--referer&nbsp;&nbsp;<a href=\"http://www.qin500.com/\">http://www.qin500.com</a>&nbsp;&nbsp;</p>\n<p><span style=\"color: #e03e2d;\">-e robots=off 可以,忽略robots.txt文件</span></p>\n<p><span style=\"color: #e03e2d;\">wget -H --load-cookies ./c.txt --user-agent=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36 Edg/92.0.902.67\" -r -p -k -np -e robots=off&nbsp;</span></p>\n<p>2、<code>wget -r -np -nd http://example.com/</code><br />这条命令可以下载&nbsp;<a href=\"http://example.com/\" target=\"_blank\" rel=\"noopener\">http://example.com</a>网站根目录中的所有文件。其中，-np 的作用是不遍历父目录，-nd 表示不在本机重新创建目录结构。</p>\n<p>3、<code>wget -m -k (-H) http://www.example.com/</code><br />该命令可用来镜像一个网站，wget 将对链接进行转换。如果网站中的图像是放在另外的站点，那么可以使用 -H 选项。</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/048.jpg', 'wget -r -p -k -np -e robots=off --no-cookie --no-check-certificate  https://www.baidu.com/ \n参数说明：-r &nbsp; ： &nbsp;递归下载-p &nbsp;： &nbsp;下载所有用于显示 HTML 页面的图片之类的元素-k &nbsp;：&nbsp; 把已下载文件中的所有链接都转换为本地引用，不在依赖原始或在线内容-np： &nbsp; 不追溯至父目录\n--no-cookie --no-check-certificate&nbsp; 忽略ssl\n--user-agent =\"\"\n--referer&nbsp;&nbsp;http://www.qin500.com&nbsp;&nbsp;\n-e robots=off 可以,忽略robots.txt文件\nwget -H --load-cookies ./c.txt --user-agent=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36 Edg/92.0.902.67\" -r -p -k -np -e robots=off&nbsp;\n2、wget -r -np -nd http://example.com/这条命令可以下载&nbsp;http://example.com网站根目录中的所有文件。其中，-np 的作用是不遍历父目录，-nd 表示不在本机重新创建目录结构。\n3、wget -m -k (-H) http://www.example.com/该命令可用来镜像一个网站，wget 将对链接进行转换。如果网站中的图像是放在另外的站点，那么可以使用 -H 选项。', 12, 465, 1, 0, 1, '2021-07-13 01:00:35', '2022-09-11 09:50:53'),
(1062, 1000, '电脑安全常用命令', '<p>一,使用ping命令查看物理网络</p>\n<pre class=\"line-numbers  language-html\"><code class=\"line-numbers language-html\">ping www.qin500.com</code></pre>\n<p>使用ipconfig查看网络配置文件</p>\n<pre class=\"line-numbers  language-html\"><code class=\"line-numbers language-html\">ipconfig \nipconfig /all</code></pre>\n<p>3 使用net localgroup命令管理本地用户组</p>\n<pre class=\"language-html\"><code class=\"line-numbers language-html\">以管理员方式运行,创建一个用户名xiaobai,密码123的用户\nnet user xiaobai 123 /add\n将创建的xiaobai,提升为系统管理员\nnet localgroup  administrators xiaobai /add\nnet user 查看本地用户\nnet view 显示域列表、计算机列表或指定计算机的共享资源列表\nnet share 查看本地共享的文件夹或驱动器\nnet localgroup 查看本机所有用户组\n\n---------------------------------------------\n查看帐户的属性\nC:\\WINDOWS\\system32&gt;net user xiaobai\n用户名                 xiaobai\n全名\n注释\n用户的注释\n国家/地区代码          000 (系统默认值)\n帐户启用               Yes\n帐户到期               从不\n\n上次设置密码           2021/7/14 8:22:45\n密码到期               2021/8/25 8:22:45\n密码可更改             2021/7/14 8:22:45\n需要密码               Yes\n用户可以更改密码       Yes\n\n允许的工作站           All\n登录脚本\n用户配置文件\n主目录\n上次登录               从不\n\n可允许的登录小时数     All\n\n本地组成员             *Administrators       *Users\n全局组成员             *None\n命令成功完成。\n-----------------------------------------------\n\nnet user guest /active:yes 激活guest用户；</code></pre>\n<p>系统服务相关</p>\n<pre class=\"line-numbers  language-html\"><code class=\"line-numbers language-html\">查看开启了哪些服务；\nnet start \n开启服务名为themes的服务；\nnet start themes\n服务名停止某服务；\nnet stop\n\nC:\\WINDOWS\\system32&gt;net stop themes\nThemes 服务正在停止.\nThemes 服务已成功停止。 </code></pre>\n<p>端口信息</p>\n<pre class=\"line-numbers  language-html\"><code class=\"line-numbers language-html\">查看所有的端口列表\nC:\\Users\\work&gt;netstat -ano\n\n活动连接\n\n  协议  本地地址          外部地址        状态           PID\n  TCP    0.0.0.0:80             0.0.0.0:0              LISTENING       16836\n  TCP    0.0.0.0:135            0.0.0.0:0              LISTENING       1532\n  TCP    0.0.0.0:445            0.0.0.0:0              LISTENING       4\n  TCP    0.0.0.0:808            0.0.0.0:0              LISTENING       5524\n  TCP    0.0.0.0:2179           0.0.0.0:0              LISTENING       3856\n  TCP    0.0.0.0:3306           0.0.0.0:0              LISTENING       19392\n  TCP    0.0.0.0:3307           0.0.0.0:0              LISTENING       12000\n  TCP    0.0.0.0:3389           0.0.0.0:0              LISTENING       1788\n  TCP    0.0.0.0:5040           0.0.0.0:0              LISTENING       11260\n还可以通过管道进行筛选\nnetstat -ano | findstr 5524\n\nC:\\Users\\work&gt;netstat -ano|findstr 5524\n  TCP    0.0.0.0:808            0.0.0.0:0              LISTENING       5524\n  TCP    [::]:808               [::]:0                 LISTENING       5524\n</code></pre>\n<p>进程查看,销毁</p>\n<pre class=\"language-markup\"><code class=\"line-numbers language-markup\">获取进程列表\nC:\\Users\\work&gt;tasklist\n\n映像名称                       PID 会话名              会话#       内存使用\n========================= ======== ================ =========== ============\nSystem Idle Process              0 Services                   0          8 K\nSystem                           4 Services                   0        148 K\nSecure System                  136 Services                   0     41,564 K\n\n结束某个进程\n结束记事本程序\nC:\\Users\\work&gt;taskkill /f /t /im notepad.exe\n成功: 已终止 PID 13616 (属于 PID 28476 子进程)的进程。\n\ntasklist /SVC  它会详细的列出进程,所提供的服务名称</code></pre>\n<p>查看所有已经保存的wifi</p>\n<pre class=\"line-numbers  language-html\"><code class=\"line-numbers language-html\">C:\\Users\\work&gt;netsh wlan show profile\n\n接口 WLAN 上的配置文件:\n\n组策略配置文件(只读)\n---------------------------------\n    &lt;无&gt;\n\n用户配置文件\n-------------\n    所有用户配置文件 : Qin500\n    所有用户配置文件 : CMCC_a\n    所有用户配置文件 : TPGuest_75A4\n\n</code></pre>\n<p>将所有电脑以保存的wifi配置信息,保存到c盘</p>\n<pre class=\"language-html\"><code class=\"line-numbers language-html\">C:\\WINDOWS\\system32&gt;netsh wlan export profile folder=c:\\ key=clear\n\n接口配置文件&ldquo;Qin500&rdquo;已成功保存在文件&ldquo;c:\\WLAN-Qin500.xml&rdquo;中。\n\n接口配置文件&ldquo;CMCC_a&rdquo;已成功保存在文件&ldquo;c:\\WLAN-CMCC_a.xml&rdquo;中。\n\n接口配置文件&ldquo;TPGuest_75A4&rdquo;已成功保存在文件&ldquo;c:\\WLAN-TPGuest_75A4.xml&rdquo;中。\n\n</code></pre>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>查看局域网所有ip</p>\n<pre class=\"language-markup\"><code class=\"line-numbers language-markup\">arp -a</code></pre>\n<p><em>Tracert</em>跟踪路由,可以查询从本机到该IP地址所在的电脑要经过的路由器及其IP地址</p>\n<pre class=\"line-numbers  language-markup\"><code class=\"line-numbers language-markup\">tracert www.qin500.com</code></pre>\n<p><img src=\"https://wpcdn.qin500.com/1000/202199122020FQSxM0f0fmGsTCG2FJrkTEYNGp.png\" width=\"400\" height=\"192\" /></p>\n<p>查看本机所有开放端口</p>\n<p>netstat -ano</p>\n<p><img src=\"https://wpcdn.qin500.com/1000/20219912247KkQe6kZa0HxjNc42KJ130xZTKK.png\" width=\"390\" height=\"253\" /></p>\n<p>查看进程列表</p>\n<p>tasklist</p>\n<p>强制结束某个进程</p>\n<p>taskkill /f /im qq.exe</p>\n<p>&nbsp;</p>', 'https://wpcdn.qin500.com/1000/202199122020FQSxM0f0fmGsTCG2FJrkTEYNGp.png', '一,使用ping命令查看物理网络\nping www.qin500.com\n使用ipconfig查看网络配置文件\nipconfig \nipconfig /all\n3 使用net localgroup命令管理本地用户组\n以管理员方式运行,创建一个用户名xiaobai,密码123的用户\nnet user xiaobai 123 /add\n将创建的xiaobai,提升为系统管理员\nnet localgroup  administrators xiaobai /add\nnet user 查看本地用户\nnet view 显示域列表、计算机列表或指定计算机的共享资源列表\nnet share 查看本地共享的文件夹或驱动器\nnet localgroup 查看本机所有用户组\n\n---------------------------------------------\n查看帐户的属性\nC:\\WINDOWS\\system32&gt;net user xiaobai\n用户名                 xiaobai\n全名\n注释\n用户的注释\n国家/地区代码          000 (系统默认值)\n帐户启用               Yes\n帐户到期               从不\n\n上次设置密码           2021/7/14 8:22:45\n密码到期               2021/8/25 8:22:45\n密码可更改             2021/7/14 8:22:45\n需要密码               Yes\n用户可以更改密码       Yes\n\n允许的工作站           All\n登录脚本\n用户配置文件\n主目录\n上次登录               从不\n\n可允许的登录小时数     All\n\n本地组成员             *Administrators       *Users\n全局组成员             *None\n命令成功完成。\n-----------------------------------------------\n\nnet user guest /active:yes 激活guest用户；\n系统服务相关\n查看开启了哪些服务；\nnet start \n开启服务名为themes的服务；\nnet start themes\n服务名停止某服务；\nnet stop\n\nC:\\WINDOWS\\system32&gt;net stop themes\nThemes 服务正在停止.\nThemes 服务已成功停止。 \n端口信息\n查看所有的端口列表\nC:\\Users\\work&gt;netstat -ano\n\n活动连接\n\n  协议  本地地址          外部地址        状态           PID\n  TCP    0.0.0.0:80             0.0.0.0:0              LISTENING       16836\n  TCP    0.0.0.0:135            0.0.0.0:0              LISTENING       1532\n  TCP    0.0.0.0:445            0.0.0.0:0              LISTENING       4\n  TCP    0.0.0.0:808            0.0.0.0:0              LISTENING       5524\n  TCP    0.0.0.0:2179           0.0.0.0:0              LISTENING       3856\n  TCP    0.0.0.0:3306           0.0.0.0:0              LISTENING       19392\n  TCP    0.0.0.0:3307           0.0.0.0:0              LISTENING       12000\n  TCP    0.0.0.0:3389           0.0.0.0:0              LISTENING       1788\n  TCP    0.0.0.0:5040           0.0.0.0:0              LISTENING       11260\n还可以通过管道进行筛选\nnetstat -ano | findstr 5524\n\nC:\\Users\\work&gt;netstat -ano|findstr 5524\n  TCP    0.0.0.0:808            0.0.0.0:0              LISTENING       5524\n  TCP    [::]:808               [::]:0                 LISTENING       5524\n\n进程查看,销毁\n获取进程列表\nC:\\Users\\work&gt;tasklist\n\n映像名称                       PID 会话名              会话#       内存使用\n========================= ======== ================ =========== ============\nSystem Idle Process              0 Services                   0          8 K\nSystem                           4 Services                   0        148 K\nSecure System                  136 Services                   0     41,564 K\n\n结束某个进程\n结束记事本程序\nC:\\Users\\work&gt;taskkill /f /t /im notepad.exe\n成功: 已终止 PID 13616 (属于 PID 28476 子进程)的进程。\n\ntasklist /SVC  它会详细的列出进程,所提供的服务名称\n查看所有已经保存的wifi\nC:\\Users\\work&gt;netsh wlan show profile\n\n接口 WLAN 上的配置文件:\n\n组策略配置文件(只读)\n---------------------------------\n    &lt;无&gt;\n\n用户配置文件\n-------------\n    所有用户配置文件 : Qin500\n    所有用户配置文件 : CMCC_a\n    所有用户配置文件 : TPGuest_75A4\n\n\n将所有电脑以保存的wifi配置信息,保存到c盘\nC:\\WINDOWS\\system32&gt;netsh wlan export profile folder=c:\\ key=clear\n\n接口配置文件&ldquo;Qin500&rdquo;已成功保存在文件&ldquo;c:\\WLAN-Qin500.xml&rdquo;中。\n\n接口配置文件&ldquo;CMCC_a&rdquo;已成功保存在文件&ldquo;c:\\WLAN-CMCC_a.xml&rdquo;中。\n\n接口配置文件&ldquo;TPGuest_75A4&rdquo;已成功保存在文件&ldquo;c:\\WLAN-TPGuest_75A4.xml&rdquo;中。\n\n\n&nbsp;\n&nbsp;\n查看局域网所有ip\narp -a\nTracert跟踪路由,可以查询从本机到该IP地址所在的电脑要经过的路由器及其IP地址\ntracert www.qin500.com\n\n查看本机所有开放端口\nnetstat -ano\n\n查看进程列表\ntasklist\n强制结束某个进程\ntaskkill /f /im qq.exe\n&nbsp;', 13, 471, 1, 0, 1, '2021-07-14 12:32:40', '2022-09-11 07:31:19'),
(1064, 1000, 'centos安装php+mysql+nginx', '<p>安装nginx</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">yum install nginx</code></pre>\n<p>安装php指定版本,这里以安装php7.4为例</p>\n<p>因为centos默认的源,比较旧,所以我们先要安装epel和remi源</p>\n<pre class=\"line-numbers  language-markup\"><code class=\"line-numbers language-markup\">安装epel-release源\nyum install epel-release\n安装remi-release源\nyum install http://rpms.remirepo.net/enterprise/remi-release-8.rpm</code></pre>\n<pre class=\"line-numbers  language-markup\"><code class=\"line-numbers language-markup\">yum install -y php74-php --enablerepo=remi \nyum install -y php74-php php74-php-gd php74-php-xml php74-php-sockets php74-php-session php74-php-snmp php74-php-mysql --enablerepo=remi</code></pre>\n<p>&nbsp;</p>\n<p>我们找到php的配置文件</p>\n<pre class=\"language-markup\"><code class=\"line-numbers language-markup\">#如果你运行的是nginx而不是apache，修改user,group为nginx\nvi /etc/opt/remi/php74/php-fpm.d/www.conf\nuser = apache\ngroup = apache\n# Replace the values with\nuser = nginx\ngroup = nginx</code></pre>\n<p>在linux中，nginx服务器和php-fpm可以通过tcp socket和unix socket两种方式实现。</p>\n<p>unix socket是一种终端，可以使同一台操作系统上的两个或多个进程进行数据通信。这种方式需要再nginx配置文件中填写php-fpm的pid文件位置，效率要比tcp socket高。</p>\n<p>tcp socket的优点是可以跨服务器，当nginx和php-fpm不在同一台机器上时，只能使用这种方式。</p>\n<p>&nbsp;</p>\n<p>php的配置文件是www.conf</p>\n<p>nginx的配置文件是nginx.conf</p>\n<p>如果在php配置文件www.conf里面配置为ip端口的方式进行连接,那么在nginx.conf也必须以ip和端口进行连接,否则报错</p>\n<p>;listen = /var/opt/remi/php74/run/php-fpm/www.sock<br />listen = 127.0.0.1:9001</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>安装swoole扩展</p>\n<pre class=\"line-numbers  language-markup\"><code class=\"line-numbers language-markup\"> yum install -y php74-php-pecl-swoole4.x86_64</code></pre>\n<p>再php.ini文件添加,重启php即可</p>\n<pre class=\"line-numbers  language-markup\"><code class=\"line-numbers language-markup\">extension=swoole.so\n</code></pre>\n<p>安装MySQL8及对应工具</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">yum install mysql mysql-server\n安装完成后,登录,密码为空\nmysql -uroot -p\n\n//启动MySQL服务\nsystemctl start mysqld\n</code></pre>\n<p>&nbsp;</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/068.jpg', '安装nginx\nyum install nginx\n安装php指定版本,这里以安装php7.4为例\n因为centos默认的源,比较旧,所以我们先要安装epel和remi源\n安装epel-release源\nyum install epel-release\n安装remi-release源\nyum install http://rpms.remirepo.net/enterprise/remi-release-8.rpm\nyum install -y php74-php --enablerepo=remi \nyum install -y php74-php php74-php-gd php74-php-xml php74-php-sockets php74-php-session php74-php-snmp php74-php-mysql --enablerepo=remi\n&nbsp;\n我们找到php的配置文件\n#如果你运行的是nginx而不是apache，修改user,group为nginx\nvi /etc/opt/remi/php74/php-fpm.d/www.conf\nuser = apache\ngroup = apache\n# Replace the values with\nuser = nginx\ngroup = nginx\n在linux中，nginx服务器和php-fpm可以通过tcp socket和unix socket两种方式实现。\nunix socket是一种终端，可以使同一台操作系统上的两个或多个进程进行数据通信。这种方式需要再nginx配置文件中填写php-fpm的pid文件位置，效率要比tcp socket高。\ntcp socket的优点是可以跨服务器，当nginx和php-fpm不在同一台机器上时，只能使用这种方式。\n&nbsp;\nphp的配置文件是www.conf\nnginx的配置文件是nginx.conf\n如果在php配置文件www.conf里面配置为ip端口的方式进行连接,那么在nginx.conf也必须以ip和端口进行连接,否则报错\n;listen = /var/opt/remi/php74/run/php-fpm/www.socklisten = 127.0.0.1:9001\n&nbsp;\n&nbsp;\n安装swoole扩展\n yum install -y php74-php-pecl-swoole4.x86_64\n再php.ini文件添加,重启php即可\nextension=swoole.so\n\n安装MySQL8及对应工具\nyum install mysql mysql-server\n安装完成后,登录,密码为空\nmysql -uroot -p\n\n//启动MySQL服务\nsystemctl start mysqld\n\n&nbsp;', 12, 490, 1, 0, 1, '2021-07-22 15:11:02', '2022-09-10 14:35:39'),
(1065, 1000, 'webpack安装及打包html资源', '<p>webpack安装</p>\n<p>开放模式<br />npm install webpack webpack-cli -D</p>\n<p>//打包用到的两种模式,开发模式和生产模式<br />development | production<br />webpack --mode production &nbsp; &nbsp;// 默认 src目录</p>\n<p>node dist/main.js &nbsp;//运行</p>\n<p>//指定入口文件,和输出目录<br />webpack ./src/index.js -o ./build/build.js --mode development &nbsp; //-o代表输出目录</p>\n<p><br />webpack //一条命令直接打包</p>\n<p>打包html资源<br />安装插件<br />npm i html-webpack-plugin -D</p>\n<p>提取css为单独文件<br />npm i mini-css-extract-plugin -D</p>\n<p>//处理浏览器css兼容问题<br />npm i post-loader postcss-preset-env -D</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/024.jpg', 'webpack安装\n开放模式npm install webpack webpack-cli -D\n//打包用到的两种模式,开发模式和生产模式development | productionwebpack --mode production &nbsp; &nbsp;// 默认 src目录\nnode dist/main.js &nbsp;//运行\n//指定入口文件,和输出目录webpack ./src/index.js -o ./build/build.js --mode development &nbsp; //-o代表输出目录\nwebpack //一条命令直接打包\n打包html资源安装插件npm i html-webpack-plugin -D\n提取css为单独文件npm i mini-css-extract-plugin -D\n//处理浏览器css兼容问题npm i post-loader postcss-preset-env -D\n&nbsp;\n&nbsp;', 10, 406, 1, 0, 1, '2021-07-31 02:02:18', '2022-09-11 07:31:20'),
(1066, 1000, 'axios全局配置和基本操作', '<pre class=\"language-js\"><code class=\"line-numbers language-js\">import axios from \"axios\";\n\n// axios.get(\"http://localhost/qianduan/getapi.php\",{\n//     params:{\n//         name:\'xiali\',\n//         age:22\n//     }\n// }).then((res)=&gt;{\n//     console.log(res)\n// })\n\n//字符串拼接也是可以的\n// axios.post(\"http://localhost/qianduan/getapi.php\",\"name=xiaoli&amp;age=32\").then((res)=&gt;{\n//     console.log(res.data)\n// })\n\n//请求多个页面\n// axios.all([\n//     axios.get(\"http://localhost/qianduan/getapi.php?name=xiali&amp;age=33\"),\n//     axios.get(\"http://localhost/qianduan/getapi.php?name=张扬&amp;age=22\")\n// ]).then(value=&gt;{\n//\n//     console.log(value)\n// }).catch(reason =&gt; {\n//\n// })\n\n//分开接收\n// axios.all([\n//     axios.get(\"http://localhost/qianduan/getapi.php?name=xiali&amp;age=33\"),\n//     axios.get(\"http://localhost/qianduan/getapi.php?name=张扬&amp;age=22\")\n// ]).then(\n//     axios.spread((res1,res2)=&gt;{\n//         console.log(res1,\"分开接收\")\n//         console.log(res2,\"分开接收\")\n//     })\n// ).catch(reason =&gt; {\n//\n// })\n\n//全局配置\n\naxios.defaults.baseURL=\"http://localhost/qianduan\"\naxios.defaults.timeout=3000\naxios.defaults.headers={\"Authorization\":\"qin500\"}\naxios.defaults.crossDomain=true\naxios.get(\"getapi.php?name=xiali&amp;age=20\").then(value=&gt;{\n    console.log(value)\n})\n\nconst local=axios.create({\n    baseURL:\"http://localhost/qianduan\"\n})\n\nconst github=axios.create({\n    baseURL:\"https://api.github.com\"\n})\n\n\n//拦截器分为请求拦截和响应拦截\n//请求拦截\nlocal.interceptors.request.use(config=&gt;{\n    config.headers={\'ASK\':\"HAHH\"}//设置一个请求头\n    console.log(\"拦截\")\n    return config //放行\n},err=&gt;{\n    console.log(\"错误\")\n})\n\n//响应拦截\nlocal.interceptors.response.use(config=&gt;{\n    console.log(\"响应拦截\")\n    return config.data //放行 取出返回的数据\n},err=&gt;{\n    console.log(\"错误\")\n})\n\n//两种方式使用\nlocal({\n    method:\'get\',\n    url:\'getapi.php?site=qin500&amp;right=1\'\n}).then(value =&gt; {\n    console.log(value)\n})\n// github.get(\"users/qin500\").then(value=&gt;{\n//     console.log(value)\n// })\n\n\n//整理数据\naxios.defaults.transformRequest=function(data){\ndata=JSON.stringify(data);\nreturn data;\n}\n</code></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/096.jpg', 'import axios from \"axios\";\n\n// axios.get(\"http://localhost/qianduan/getapi.php\",{\n//     params:{\n//         name:\'xiali\',\n//         age:22\n//     }\n// }).then((res)=&gt;{\n//     console.log(res)\n// })\n\n//字符串拼接也是可以的\n// axios.post(\"http://localhost/qianduan/getapi.php\",\"name=xiaoli&amp;age=32\").then((res)=&gt;{\n//     console.log(res.data)\n// })\n\n//请求多个页面\n// axios.all([\n//     axios.get(\"http://localhost/qianduan/getapi.php?name=xiali&amp;age=33\"),\n//     axios.get(\"http://localhost/qianduan/getapi.php?name=张扬&amp;age=22\")\n// ]).then(value=&gt;{\n//\n//     console.log(value)\n// }).catch(reason =&gt; {\n//\n// })\n\n//分开接收\n// axios.all([\n//     axios.get(\"http://localhost/qianduan/getapi.php?name=xiali&amp;age=33\"),\n//     axios.get(\"http://localhost/qianduan/getapi.php?name=张扬&amp;age=22\")\n// ]).then(\n//     axios.spread((res1,res2)=&gt;{\n//         console.log(res1,\"分开接收\")\n//         console.log(res2,\"分开接收\")\n//     })\n// ).catch(reason =&gt; {\n//\n// })\n\n//全局配置\n\naxios.defaults.baseURL=\"http://localhost/qianduan\"\naxios.defaults.timeout=3000\naxios.defaults.headers={\"Authorization\":\"qin500\"}\naxios.defaults.crossDomain=true\naxios.get(\"getapi.php?name=xiali&amp;age=20\").then(value=&gt;{\n    console.log(value)\n})\n\nconst local=axios.create({\n    baseURL:\"http://localhost/qianduan\"\n})\n\nconst github=axios.create({\n    baseURL:\"https://api.github.com\"\n})\n\n\n//拦截器分为请求拦截和响应拦截\n//请求拦截\nlocal.interceptors.request.use(config=&gt;{\n    config.headers={\'ASK\':\"HAHH\"}//设置一个请求头\n    console.log(\"拦截\")\n    return config //放行\n},err=&gt;{\n    console.log(\"错误\")\n})\n\n//响应拦截\nlocal.interceptors.response.use(config=&gt;{\n    console.log(\"响应拦截\")\n    return config.data //放行 取出返回的数据\n},err=&gt;{\n    console.log(\"错误\")\n})\n\n//两种方式使用\nlocal({\n    method:\'get\',\n    url:\'getapi.php?site=qin500&amp;right=1\'\n}).then(value =&gt; {\n    console.log(value)\n})\n// github.get(\"users/qin500\").then(value=&gt;{\n//     console.log(value)\n// })\n\n\n//整理数据\naxios.defaults.transformRequest=function(data){\ndata=JSON.stringify(data);\nreturn data;\n}\n', 10, 301, 1, 0, 1, '2021-08-03 03:37:33', '2022-09-11 16:57:36'),
(1067, 1000, 'javascript基础知识(三)', '<p>阻止鼠标右键菜单</p>\n<pre class=\"language-js\"><code class=\"line-numbers language-js\">let body=document.body\nbody.oncontextmenu=function(e){\n       e.preventDefault();\n       console.log(e)\n  }</code></pre>\n<p>iframe获取源码</p>\n<pre class=\"language-js\"><code class=\"line-numbers language-js\">let iframe=document.createElement(\"iframe\")\nlet body=document.body\niframe.src=\"http://www.qin500.com\"\niframe.src=\"about:blank\"\nbody.appendChild(iframe)\niframe.onload=function(){\n        console.log(iframe.contentWindow.document.documentElement.outerHTML)  //获取iframe内容\n}</code></pre>\n<p>&nbsp;</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/085.jpg', '阻止鼠标右键菜单\nlet body=document.body\nbody.oncontextmenu=function(e){\n       e.preventDefault();\n       console.log(e)\n  }\niframe获取源码\nlet iframe=document.createElement(\"iframe\")\nlet body=document.body\niframe.src=\"http://www.qin500.com\"\niframe.src=\"about:blank\"\nbody.appendChild(iframe)\niframe.onload=function(){\n        console.log(iframe.contentWindow.document.documentElement.outerHTML)  //获取iframe内容\n}\n&nbsp;', 11, 292, 1, 0, 1, '2021-08-04 12:59:17', '2022-09-11 07:31:18'),
(1068, 1000, 'js Document 对象属性和方法', '<p>document.writeln() 等同于 write() 方法，不同的是在每个表达式之后写一个换行符。<br />document.scripts 返回页面中所有脚本的集合。<br />document.title 返回当前文档的标题。<br />document.URL 返回文档完整的URL<br />document.referrer 返回载入当前文档的文档的 URL。<br />document.querySelector() 返回文档中匹配指定的CSS选择器的第一元素<br />document.querySelectorAll() document.querySelectorAll() 是 HTML5中引入的新方法，返回文档中匹配的CSS选择器的所有元素节点列表<br />document.readyState 返回文档状态 (载入中&hellip;&hellip;)<br />document.normalize() 删除空文本节点，并连接相邻节点<br />document.links 返回对文档中所有 Area 和 Link 对象引用。links 集合计算 &lt;a href=\"\"&gt; 标签和 &lt;area&gt; 标签。<br />document.inputEncoding 返回用于文档的编码方式（在解析时）。(ie8不支持)<br />document.lastModified 返回文档被最后修改的日期和时间。<br />document.importNode(node,deep) 把一个节点从另一个文档复制到该文档以便应用。（ie8不支持）<br />document.images 返回对文档中所有 Image 对象引用。<br />document.forms 返回对文档中所有 Form 对象引用。<br />document.getElementsByClassName() 返回文档中所有指定类名的元素集合，作为 NodeList 对象。（ie8不支持<br />document.documentElement 返回文档的根节点<br />document.documentMode 返回用于通过浏览器渲染文档的模式,只支持ie<br />document.domain 返回当前文档的域名。）<br />document.cookie 设置或返回与当前文档有关的所有 cookie。<br />document.createAttribute() 创建一个属性节点<br />document.createComment() createComment() 方法可创建注释节点。<br />document.createElement() 创建元素节点。<br />document.createTextNode() 创建文本节点。<br />document.doctype 返回与文档相关的文档类型声明 (DTD)。<br />document.adoptNode(node) 从另外一个文档返回 adapded 节点到当前文档。adoptNode() 方法用于从另外一个文档中获取一个节点。<br />节点可以是任何节点类型。<br />注意: 节点下的所有子节点都会获取到。<br />注意: 节点及其子节点会再源文档中删除。<br />提示: 使用 document.importNode() 方法来拷贝节点，但原文档中的节点不删除。.<br />提示: 使用 element.cloneNode() 方法来拷贝当前文档的节点，且节点不会被删除。<br />document.anchors 返回对文档中所有 Anchor 对象的引用。a标签包括name属性<br />document.activeElement 返回当前获取焦点元素<br /><br /></p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/021.jpg', 'document.writeln() 等同于 write() 方法，不同的是在每个表达式之后写一个换行符。document.scripts 返回页面中所有脚本的集合。document.title 返回当前文档的标题。document.URL 返回文档完整的URLdocument.referrer 返回载入当前文档的文档的 URL。document.querySelector() 返回文档中匹配指定的CSS选择器的第一元素document.querySelectorAll() document.querySelectorAll() 是 HTML5中引入的新方法，返回文档中匹配的CSS选择器的所有元素节点列表document.readyState 返回文档状态 (载入中&hellip;&hellip;)document.normalize() 删除空文本节点，并连接相邻节点document.links 返回对文档中所有 Area 和 Link 对象引用。links 集合计算 &lt;a href=\"\"&gt; 标签和 &lt;area&gt; 标签。document.inputEncoding 返回用于文档的编码方式（在解析时）。(ie8不支持)document.lastModified 返回文档被最后修改的日期和时间。document.importNode(node,deep) 把一个节点从另一个文档复制到该文档以便应用。（ie8不支持）document.images 返回对文档中所有 Image 对象引用。document.forms 返回对文档中所有 Form 对象引用。document.getElementsByClassName() 返回文档中所有指定类名的元素集合，作为 NodeList 对象。（ie8不支持document.documentElement 返回文档的根节点document.documentMode 返回用于通过浏览器渲染文档的模式,只支持iedocument.domain 返回当前文档的域名。）document.cookie 设置或返回与当前文档有关的所有 cookie。document.createAttribute() 创建一个属性节点document.createComment() createComment() 方法可创建注释节点。document.createElement() 创建元素节点。document.createTextNode() 创建文本节点。document.doctype 返回与文档相关的文档类型声明 (DTD)。document.adoptNode(node) 从另外一个文档返回 adapded 节点到当前文档。adoptNode() 方法用于从另外一个文档中获取一个节点。节点可以是任何节点类型。注意: 节点下的所有子节点都会获取到。注意: 节点及其子节点会再源文档中删除。提示: 使用 document.importNode() 方法来拷贝节点，但原文档中的节点不删除。.提示: 使用 element.cloneNode() 方法来拷贝当前文档的节点，且节点不会被删除。document.anchors 返回对文档中所有 Anchor 对象的引用。a标签包括name属性document.activeElement 返回当前获取焦点元素', 11, 283, 1, 0, 1, '2021-08-05 01:33:05', '2022-09-11 10:17:28');
INSERT INTO `qin500_articles` (`id`, `uid`, `title`, `text`, `masterpic`, `pure`, `cid`, `views`, `isshow`, `zan`, `bdts`, `created_at`, `updated_at`) VALUES
(1069, 1000, 'vue父子组件间的相互通信', '<p><strong><span style=\"font-size: 24px;\">父传子props</span></strong></p>\n<p>父组件</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\"> //将articles变量传递给子组件\n&lt;MySection :articles=\"articles\"&gt;&lt;/MySection&gt;</code></pre>\n<p>子组件</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">  &lt;template&gt;\n{{ articles }}\n&lt;/template&gt;\n\n\n//两种写法,都可以接受\n  // props:[\n  //     \'articles\'\n  // ],\n  props:{\n    articles:{\n      type:Array,\n      default:[\'计算器\'],\n      required:true\n    }\n  },</code></pre>\n<p><span style=\"font-size: 24px;\"><strong>子传父$emit</strong></span></p>\n<p><span style=\"font-size: 14px;\">子组件</span></p>\n<pre class=\"language-js\"><code class=\"line-numbers language-js\">&lt;template&gt;\n//定义一个单击事件,changenum(num),changednum是我们自定义的事件名称,num需要传递给父组件的参数\n&lt;button @click=\"changenum(num)\"&gt;改变父组件的值&lt;/button&gt;\n&lt;/template&gt;\n\nexport default {\n  name: \"MyList\",\n  data(){\n    return {\n      num:3\n    }\n  },\n  emits:[\'mycountevent\'],//写上自定义事件名称,不然有警告\n  methods:{\n//调用这个方法\n    changenum(num){\n      this.$emit(\'mycountevent\',num)\n    }\n  }\n}</code></pre>\n<p>父组件</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">&lt;template&gt;\n  &lt;p&gt;我是父组件的值 {{ count }}&lt;/p&gt;\n&lt;MyList :articles=\"articles\"  @mycountevent=\"mydemo\"&gt;&lt;/MyList&gt; //接受来自子组件的方法mycountevent调用当前组件mydemo方法\n&lt;MyList :articles=\"articles\"  @mycountevent=\"mydemo\"&gt;&lt;/MyList&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport MyList from \"@/components/comp/MyList\";\nexport default {\n  name: \"MySection\",\n  data(){\n    return{\n      count:0\n    }\n  },\n  //两种写法\n  // props:[\n  //     \'articles\'\n  // ],\n  props:{\n    articles:{\n      type:Array,\n      default:[\'计算器\'],\n      required:true\n    }\n  },\n  components:{\n    MyList\n  },\n  methods:{\n    mydemo(num){\n      this.count=this.count + num\n    }\n  }\n}\n&lt;/script&gt;</code></pre>\n<p>&nbsp;</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/033.jpg', '父传子props\n父组件\n //将articles变量传递给子组件\n&lt;MySection :articles=\"articles\"&gt;&lt;/MySection&gt;\n子组件\n  &lt;template&gt;\n{{ articles }}\n&lt;/template&gt;\n\n\n//两种写法,都可以接受\n  // props:[\n  //     \'articles\'\n  // ],\n  props:{\n    articles:{\n      type:Array,\n      default:[\'计算器\'],\n      required:true\n    }\n  },\n子传父$emit\n子组件\n&lt;template&gt;\n//定义一个单击事件,changenum(num),changednum是我们自定义的事件名称,num需要传递给父组件的参数\n&lt;button @click=\"changenum(num)\"&gt;改变父组件的值&lt;/button&gt;\n&lt;/template&gt;\n\nexport default {\n  name: \"MyList\",\n  data(){\n    return {\n      num:3\n    }\n  },\n  emits:[\'mycountevent\'],//写上自定义事件名称,不然有警告\n  methods:{\n//调用这个方法\n    changenum(num){\n      this.$emit(\'mycountevent\',num)\n    }\n  }\n}\n父组件\n&lt;template&gt;\n  &lt;p&gt;我是父组件的值 {{ count }}&lt;/p&gt;\n&lt;MyList :articles=\"articles\"  @mycountevent=\"mydemo\"&gt;&lt;/MyList&gt; //接受来自子组件的方法mycountevent调用当前组件mydemo方法\n&lt;MyList :articles=\"articles\"  @mycountevent=\"mydemo\"&gt;&lt;/MyList&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport MyList from \"@/components/comp/MyList\";\nexport default {\n  name: \"MySection\",\n  data(){\n    return{\n      count:0\n    }\n  },\n  //两种写法\n  // props:[\n  //     \'articles\'\n  // ],\n  props:{\n    articles:{\n      type:Array,\n      default:[\'计算器\'],\n      required:true\n    }\n  },\n  components:{\n    MyList\n  },\n  methods:{\n    mydemo(num){\n      this.count=this.count + num\n    }\n  }\n}\n&lt;/script&gt;\n&nbsp;', 15, 264, 1, 0, 1, '2021-08-05 22:50:01', '2022-09-11 07:31:20'),
(1070, 1000, 'vue父子组件间的相互访问方式', '<p>假如我们需要从子组件,去调用父组件的方法,或者数据(数据可以修改)</p>\n<p><span style=\"color: #e03e2d;\"><strong>子组件访问父组件的方法,数据</strong></span></p>\n<p>我们在父组件定义一个方法</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">export default {\n  name: \"App\",\n  data(){\n    return {\n      title:\'父传递到子页面\',\n      articles:[\n          \'1111111111\',\n          \'2222222222\',\n          \'3333333333\'\n      ]\n    }\n  },\n  methods:{\n//这里定义方法\n    appOne(p){\n      console.log(\'this is a APP\' + p)\n    }\n  },\n  components:{\n    MyHeader,\n    MySection,\n    MyAside,\n    MyFooter\n  }\n}</code></pre>\n<p>然后子组件去调用父组件的方法</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">export default {\n  name: \"MyAside\",\n  components:{\n    MyList\n  },\n  methods:{\n    one(){\n    //用this.$parent.appOne(\"1111\"),调用父组件的方法\n//也可以用this.$root.直接调用根节点的方法\n      this.$parent.appOne(\"1111\")\n      console.log(this.$parent.articles); //访问父组件的数据,当然也可以修改父组件的数据\n    }\n  }\n}</code></pre>\n<p>&nbsp;</p>\n<p><span style=\"color: #e03e2d;\"><strong>父组件访问子组件的方法及数据</strong></span></p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">//我们在子组件定义一个one()方法,用来被父组件访问\nexport default {\n  name: \"MyHeader\",\n  props:[\'msg\',\'title\'],\n  methods:{\n    one(){\n      return \"我是子组件里面的方法\"\n    }\n  }\n}</code></pre>\n<p>父组件</p>\n<pre class=\"language-js\"><code class=\"line-numbers language-js\">&lt;template&gt;\n    &lt;header&gt;\n//这里定义一个one,two用来区别是哪个组件\n      &lt;MyHeader ref=\"one\" msg=\"this is msg\" :title=\"title\" &gt;&lt;/MyHeader&gt;\n      &lt;MyHeader ref=\"two\" msg=\"this is msg\" :title=\"title\" &gt;&lt;/MyHeader&gt;\n      &lt;button @click=\"childOne\"&gt;调用子组件方法&lt;/button&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n    &lt;section&gt;\n    &lt;MySection :articles=\"articles\"&gt;&lt;/MySection&gt;\n    &lt;/section&gt;\n      &lt;aside&gt;\n        &lt;MyAside&gt;&lt;/MyAside&gt;\n      &lt;/aside&gt;\n    &lt;/main&gt;\n  &lt;footer&gt;\n    &lt;my-footer &gt;&lt;/my-footer&gt;\n  &lt;/footer&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport MyHeader from \"@/components/MyHeader\";\nimport MySection from \"@/components/MySection\";\nimport MyAside from \"@/components/MyAside\";\nimport MyFooter from \"@/components/MyFooter\";\nexport default {\n  name: \"App\",\n  data(){\n    return {\n      title:\'父传递到子页面\',\n      articles:[\n          \'1111111111\',\n          \'2222222222\',\n          \'3333333333\'\n      ]\n    }\n  },\n  methods:{\n    appOne(p){\n      console.log(\'this is a APP\' + p)\n    },\n    childOne(){\n//this.$refs[\'\']里面写需要访问哪个子组件的别名\n      //通过 this.$refs[\'one\'].one(),访问子组件one方法\n     //也可以 this.$refs.one.one();\n      console.log(this.$refs[\'one\'].one())\n    }\n  },\n  components:{\n    MyHeader,\n    MySection,\n    MyAside,\n    MyFooter\n  }\n}\n&lt;/script&gt;</code></pre>\n<p>&nbsp;</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/002.jpg', '假如我们需要从子组件,去调用父组件的方法,或者数据(数据可以修改)\n子组件访问父组件的方法,数据\n我们在父组件定义一个方法\nexport default {\n  name: \"App\",\n  data(){\n    return {\n      title:\'父传递到子页面\',\n      articles:[\n          \'1111111111\',\n          \'2222222222\',\n          \'3333333333\'\n      ]\n    }\n  },\n  methods:{\n//这里定义方法\n    appOne(p){\n      console.log(\'this is a APP\' + p)\n    }\n  },\n  components:{\n    MyHeader,\n    MySection,\n    MyAside,\n    MyFooter\n  }\n}\n然后子组件去调用父组件的方法\nexport default {\n  name: \"MyAside\",\n  components:{\n    MyList\n  },\n  methods:{\n    one(){\n    //用this.$parent.appOne(\"1111\"),调用父组件的方法\n//也可以用this.$root.直接调用根节点的方法\n      this.$parent.appOne(\"1111\")\n      console.log(this.$parent.articles); //访问父组件的数据,当然也可以修改父组件的数据\n    }\n  }\n}\n&nbsp;\n父组件访问子组件的方法及数据\n//我们在子组件定义一个one()方法,用来被父组件访问\nexport default {\n  name: \"MyHeader\",\n  props:[\'msg\',\'title\'],\n  methods:{\n    one(){\n      return \"我是子组件里面的方法\"\n    }\n  }\n}\n父组件\n&lt;template&gt;\n    &lt;header&gt;\n//这里定义一个one,two用来区别是哪个组件\n      &lt;MyHeader ref=\"one\" msg=\"this is msg\" :title=\"title\" &gt;&lt;/MyHeader&gt;\n      &lt;MyHeader ref=\"two\" msg=\"this is msg\" :title=\"title\" &gt;&lt;/MyHeader&gt;\n      &lt;button @click=\"childOne\"&gt;调用子组件方法&lt;/button&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n    &lt;section&gt;\n    &lt;MySection :articles=\"articles\"&gt;&lt;/MySection&gt;\n    &lt;/section&gt;\n      &lt;aside&gt;\n        &lt;MyAside&gt;&lt;/MyAside&gt;\n      &lt;/aside&gt;\n    &lt;/main&gt;\n  &lt;footer&gt;\n    &lt;my-footer &gt;&lt;/my-footer&gt;\n  &lt;/footer&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport MyHeader from \"@/components/MyHeader\";\nimport MySection from \"@/components/MySection\";\nimport MyAside from \"@/components/MyAside\";\nimport MyFooter from \"@/components/MyFooter\";\nexport default {\n  name: \"App\",\n  data(){\n    return {\n      title:\'父传递到子页面\',\n      articles:[\n          \'1111111111\',\n          \'2222222222\',\n          \'3333333333\'\n      ]\n    }\n  },\n  methods:{\n    appOne(p){\n      console.log(\'this is a APP\' + p)\n    },\n    childOne(){\n//this.$refs[\'\']里面写需要访问哪个子组件的别名\n      //通过 this.$refs[\'one\'].one(),访问子组件one方法\n     //也可以 this.$refs.one.one();\n      console.log(this.$refs[\'one\'].one())\n    }\n  },\n  components:{\n    MyHeader,\n    MySection,\n    MyAside,\n    MyFooter\n  }\n}\n&lt;/script&gt;\n&nbsp;', 15, 305, 1, 0, 1, '2021-08-06 06:12:24', '2022-09-11 07:31:20'),
(1071, 1000, 'php缓冲区操作', '<p>缓冲区操作</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">ob_start();\nphpinfo();\n$string = ob_get_contents();\nfile_put_contents(\'a.html\', $string);\nob_flush();//将数据从php的buffer中释放出来\nflush(); //将释放出来的数据发送给浏览器</code></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/013.jpg', '缓冲区操作\nob_start();\nphpinfo();\n$string = ob_get_contents();\nfile_put_contents(\'a.html\', $string);\nob_flush();//将数据从php的buffer中释放出来\nflush(); //将释放出来的数据发送给浏览器', 1, 303, 1, 0, 1, '2021-08-07 00:35:04', '2022-09-11 14:22:05'),
(1072, 1000, '前端 POST/PUT/PATCH 给后端的数据方式', '<p>前端 POST/PUT/PATCH 给后端的数据，主要有三类数据方式：</p>\n<p>1、application/ x-www-form-urlencoded<br />2、multipart/form-data<br />3、application/json</p>\n<p>第 1 类，原生 form 默认的提交方式，所有表单(扁平)数据会被处理成键值对形式(key1=value1&amp;key2=value2)发送给后端，其中 key/value 字符前端需要通过 encodeURIComponent 转码，后端接收后需要解码，不建议前端直接发送和后端直接接收使用，前后端要进行字符编码处理；</p>\n<p>第 2 类，好理解，用于提交文件，将其处理成二进制数据提交给后端；</p>\n<p>第 3 类，传递 JSON 给后端，适合传递结构复杂的数据对象，这种方式，会触发 HTTP CORS 机制，会有两次请求：</p>\n<p>i. 浏览器首先使用 OPTIONS 方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求，<br />ii. 需要后端解决跨域问题，允许前端该跨域请求，浏览器发起实际请求；<br /><br /></p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/040.jpg', '前端 POST/PUT/PATCH 给后端的数据，主要有三类数据方式：\n1、application/ x-www-form-urlencoded2、multipart/form-data3、application/json\n第 1 类，原生 form 默认的提交方式，所有表单(扁平)数据会被处理成键值对形式(key1=value1&amp;key2=value2)发送给后端，其中 key/value 字符前端需要通过 encodeURIComponent 转码，后端接收后需要解码，不建议前端直接发送和后端直接接收使用，前后端要进行字符编码处理；\n第 2 类，好理解，用于提交文件，将其处理成二进制数据提交给后端；\n第 3 类，传递 JSON 给后端，适合传递结构复杂的数据对象，这种方式，会触发 HTTP CORS 机制，会有两次请求：\ni. 浏览器首先使用 OPTIONS 方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求，ii. 需要后端解决跨域问题，允许前端该跨域请求，浏览器发起实际请求；', 11, 317, 1, 0, 1, '2021-08-07 02:02:43', '2022-09-11 07:31:18'),
(1073, 1000, 'php如何接收put patch delete的请求', '<p>查询请求的方法</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">$_SERVER[\'REQUEST_METHOD\']</code></pre>\n<p>第一种方法</p>\n<p>可以用file_get_contents</p>\n<pre class=\"language-php\"><code class=\"line-numbers language-php\"> $input=file_get_contents(\'php://input\');\n    parse_str($input,$r);\nprint_r($r);</code></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/041.jpg', '查询请求的方法\n$_SERVER[\'REQUEST_METHOD\']\n第一种方法\n可以用file_get_contents\n $input=file_get_contents(\'php://input\');\n    parse_str($input,$r);\nprint_r($r);', 1, 291, 1, 0, 1, '2021-08-07 02:54:43', '2022-09-11 07:31:16'),
(1074, 1000, 'http请求头header', '<p>请求头</p>\n<p>Access-Control-Allow-Headers</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">header(\"Access-Control-Allow-Headers:*\");\nheader(\"Access-Control-Allow-Headers:authorization,qin500\");</code></pre>\n<p>可以接受的请求方法</p>\n<pre class=\"language-js\"><code class=\"line-numbers language-js\">Access-Control-Allow-Methods: POST, GET, OPTIONS,PUT,PARTCH,DELETE</code></pre>\n<p>跨域 (*,允许所有URL跨域)</p>\n<pre class=\"prism-token token  language-javascript\"><code class=\"line-numbers language-javascript\">Access-Control-Allow-Origin: *</code></pre>\n<p>Access-Control-Allow-Origin<br />指示请求的资源能共享给哪些域。</p>\n<p>Access-Control-Allow-Credentials<br />指示当请求的凭证标记为 true 时，是否响应该请求。</p>\n<p>Access-Control-Allow-Headers<br />用在对预请求的响应中，指示实际的请求中可以使用哪些 HTTP 头。</p>\n<p>Access-Control-Allow-Methods<br />指定对预请求的响应中，哪些 HTTP 方法允许访问请求的资源。</p>\n<p>Access-Control-Expose-Headers<br />指示哪些 HTTP 头的名称能在响应中列出。</p>\n<p>Access-Control-Max-Age<br />指示预请求的结果能被缓存多久。指<span style=\"color: #e03e2d;\">预检请求,超时了,他会重新进行预检</span></p>\n<p>Access-Control-Request-Headers<br />用于发起一个预请求，告知服务器正式请求会使用那些 HTTP 头。</p>\n<p>Access-Control-Request-Method<br />用于发起一个预请求，告知服务器正式请求会使用哪一种 HTTP 请求方法。<br /><br /></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #169179;\">什么时候,会出现预检请求呢,</span></p>\n<p><span style=\"color: #169179;\">当我们指定请求头content-type非下面三种情况</span></p>\n<p><span style=\"color: #169179;\">text/plain&nbsp; 指定类型为文本</span></p>\n<p><span style=\"color: #169179;\">mltipart/form-data&nbsp; &nbsp;一般上传文件的时候,表单会自动设置该值</span></p>\n<p><span style=\"color: #169179;\">application/x-w-form-urlencoded&nbsp; 表单提交的时间&nbsp; 它是k:v</span></p>\n<p><span style=\"color: #169179;\">和请求方法非GET,POST,HEAD方法请求时,都需要进行预检</span></p>\n<pre class=\"language-js\"><code class=\"line-numbers language-js\">//Content-Type的值仅限于下列三者之一：\ntext/plain\nmultipart/form-data\napplication/x-www-form-urlencoded</code></pre>\n<p><img src=\"https://wpcdn.qin500.com/QIN500/1000/2021818113647pp0HK5c2r5t4DxNyPpwaAQSnJt.png\" alt=\"\" width=\"866\" height=\"204\" /></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>', 'https://wpcdn.qin500.com/QIN500/1000/2021818113647pp0HK5c2r5t4DxNyPpwaAQSnJt.png', '请求头\nAccess-Control-Allow-Headers\nheader(\"Access-Control-Allow-Headers:*\");\nheader(\"Access-Control-Allow-Headers:authorization,qin500\");\n可以接受的请求方法\nAccess-Control-Allow-Methods: POST, GET, OPTIONS,PUT,PARTCH,DELETE\n跨域 (*,允许所有URL跨域)\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Origin指示请求的资源能共享给哪些域。\nAccess-Control-Allow-Credentials指示当请求的凭证标记为 true 时，是否响应该请求。\nAccess-Control-Allow-Headers用在对预请求的响应中，指示实际的请求中可以使用哪些 HTTP 头。\nAccess-Control-Allow-Methods指定对预请求的响应中，哪些 HTTP 方法允许访问请求的资源。\nAccess-Control-Expose-Headers指示哪些 HTTP 头的名称能在响应中列出。\nAccess-Control-Max-Age指示预请求的结果能被缓存多久。指预检请求,超时了,他会重新进行预检\nAccess-Control-Request-Headers用于发起一个预请求，告知服务器正式请求会使用那些 HTTP 头。\nAccess-Control-Request-Method用于发起一个预请求，告知服务器正式请求会使用哪一种 HTTP 请求方法。\n&nbsp;\n什么时候,会出现预检请求呢,\n当我们指定请求头content-type非下面三种情况\ntext/plain&nbsp; 指定类型为文本\nmltipart/form-data&nbsp; &nbsp;一般上传文件的时候,表单会自动设置该值\napplication/x-w-form-urlencoded&nbsp; 表单提交的时间&nbsp; 它是k:v\n和请求方法非GET,POST,HEAD方法请求时,都需要进行预检\n//Content-Type的值仅限于下列三者之一：\ntext/plain\nmultipart/form-data\napplication/x-www-form-urlencoded\n\n&nbsp;\n&nbsp;', 10, 344, 1, 0, 1, '2021-08-07 07:17:44', '2022-09-11 07:31:16'),
(1075, 1000, '判断是否为ajax请求', '<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">var xmlhttp = new XMLHttpRequest();\nxmlhttp.open(\"GET\",\"test.php\",true);\nxmlhttp.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\nxmlhttp.send();\n</code></pre>\n<p><br />php可以通过$_SERVER[\"HTTP_X_REQUESTED_WITH\"]==&rdquo;XMLHttpRequest&rdquo;</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/065.jpg', 'var xmlhttp = new XMLHttpRequest();\nxmlhttp.open(\"GET\",\"test.php\",true);\nxmlhttp.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\nxmlhttp.send();\n\nphp可以通过$_SERVER[\"HTTP_X_REQUESTED_WITH\"]==&rdquo;XMLHttpRequest&rdquo;', 11, 309, 1, 0, 1, '2021-08-07 08:56:36', '2022-09-11 07:31:16'),
(1076, 1000, 'vue插槽slot,用法及作用', '<p>Vue插槽的作用就是存放内容</p>\n<p>当我们在子组件内没有书写slot标签时,父组件内书写&lt;One&gt;&lt;/One&gt;里面的内容是无效的</p>\n<p>v-slot写在template标签上,新语法</p>\n<p><span style=\"color: #e03e2d;\"><strong>一 </strong></span>:当父组件v-slot后面定义的名字在子组件内name属性后面的名字找不到时,父组件template标签内的内容默认不显示</p>\n<p><img src=\"https://wpcdn.qin500.com/QIN500/1000/202181811353Hx73hSA3XRAdxftS6S3hke0Mzw.png\" alt=\"\" width=\"949\" height=\"343\" /></p>\n<p>二: 当父组件v-slot后面没有定义名字时,系统默认定义为<span style=\"color: #ba372a;\">default (即 v-slot:defalut) ,<span style=\"color: #000000;\">他会去匹配子组件slot标签没有名字的</span></span></p>\n<p><span style=\"color: #ba372a;\"><span style=\"color: #000000;\">三 : v-slot可以用#代替,作用是一样的</span></span></p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">&lt;template #two&gt;\n      &lt;a href=\"#\"&gt;提交啦&lt;/a&gt;\n&lt;/template&gt;</code></pre>\n<p>四: 子组件的数据传递到父组件内容</p>\n<p>v-slot:four,和子组件的&lt;slot name=\"four\"&gt;&lt;/slot&gt;要相同</p>\n<p>父组件</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">  &lt;One&gt;\n//我们定义一个subdata变量,(变量名随意),用来接收子组件内传递过来的数据\n    &lt;template v-slot:four=\"subdata\"&gt;\n//users为子组件内的变量名\n      &lt;a href=\"#\"&gt;{{  subdata.users.name }}&lt;/a&gt;\n    &lt;/template&gt;\n  &lt;/One&gt;</code></pre>\n<p>子组件</p>\n<pre class=\"language-js\"><code class=\"line-numbers language-js\">&lt;template&gt;\n  &lt;h6&gt;{{ title }}&lt;/h6&gt;\n//这里的:users为定义的变量名,父组件接收时要用到\n  &lt;slot name=\"four\" :users=\"users\"&gt;&lt;/slot&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: \"One\",\n  data:()=&gt;{\n    return {\n      title:\"我是ONE组件的标题\",\n      users:{\n        name:\'提交吧\'\n      }\n    }\n  }\n}\n&lt;/script&gt;</code></pre>\n<p>总结</p>\n<p>template&nbsp; v-slot =后面定义的名字和slot标签name定义的值,如果没有找到,优先显示&lt;slot&gt;&lt;/slot&gt;标签的内容,如何找到就显示template里面的内容</p>', 'https://wpcdn.qin500.com/QIN500/1000/202181811353Hx73hSA3XRAdxftS6S3hke0Mzw.png', 'Vue插槽的作用就是存放内容\n当我们在子组件内没有书写slot标签时,父组件内书写&lt;One&gt;&lt;/One&gt;里面的内容是无效的\nv-slot写在template标签上,新语法\n一 :当父组件v-slot后面定义的名字在子组件内name属性后面的名字找不到时,父组件template标签内的内容默认不显示\n\n二: 当父组件v-slot后面没有定义名字时,系统默认定义为default (即 v-slot:defalut) ,他会去匹配子组件slot标签没有名字的\n三 : v-slot可以用#代替,作用是一样的\n&lt;template #two&gt;\n      &lt;a href=\"#\"&gt;提交啦&lt;/a&gt;\n&lt;/template&gt;\n四: 子组件的数据传递到父组件内容\nv-slot:four,和子组件的&lt;slot name=\"four\"&gt;&lt;/slot&gt;要相同\n父组件\n  &lt;One&gt;\n//我们定义一个subdata变量,(变量名随意),用来接收子组件内传递过来的数据\n    &lt;template v-slot:four=\"subdata\"&gt;\n//users为子组件内的变量名\n      &lt;a href=\"#\"&gt;{{  subdata.users.name }}&lt;/a&gt;\n    &lt;/template&gt;\n  &lt;/One&gt;\n子组件\n&lt;template&gt;\n  &lt;h6&gt;{{ title }}&lt;/h6&gt;\n//这里的:users为定义的变量名,父组件接收时要用到\n  &lt;slot name=\"four\" :users=\"users\"&gt;&lt;/slot&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: \"One\",\n  data:()=&gt;{\n    return {\n      title:\"我是ONE组件的标题\",\n      users:{\n        name:\'提交吧\'\n      }\n    }\n  }\n}\n&lt;/script&gt;\n总结\ntemplate&nbsp; v-slot =后面定义的名字和slot标签name定义的值,如果没有找到,优先显示&lt;slot&gt;&lt;/slot&gt;标签的内容,如何找到就显示template里面的内容', 15, 335, 1, 0, 1, '2021-08-08 13:14:49', '2022-09-11 07:31:20'),
(1077, 1000, 'pdo操作数据库', '<p>查询,只需三步</p>\n<ol>\n<li>预处理sql语句</li>\n<li>execute()</li>\n<li>返回结果集</li>\n</ol>\n<pre class=\"language-php\"><code class=\"line-numbers language-php\">&lt;?php\n//pdo操作数据库\ntry{\n    $pdo=new PDO(\"mysql:dbname=demo;host=localhost;port=3306\",\'root\',\'\');\n}catch (Exception $e){\n    exit ($e-&gt;getMessage());\n}\n$PDOstatement=$pdo-&gt;prepare(\"desc user\");\n$PDOstatement-&gt;execute();\nwhile($list=$PDOstatement-&gt;fetch(PDO::FETCH_ASSOC)){\n    print_r($list);\n}\n这个和上面一样\n//print_r($PDOstatement-&gt;fetchAll(PDO::FETCH_ASSOC));</code></pre>\n<p>PDO::FETCH_ASSOC 返回一个包含键值的数组 [\'id\'=&gt;1]</p>\n<p>PDO::FETCH_NUM&nbsp; 与上面一个不同的是,没有键名,只是用数字代替,也是返回一数组&nbsp; [0=&gt;1]</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/031.jpg', '查询,只需三步\n\n预处理sql语句\nexecute()\n返回结果集\n\n&lt;?php\n//pdo操作数据库\ntry{\n    $pdo=new PDO(\"mysql:dbname=demo;host=localhost;port=3306\",\'root\',\'\');\n}catch (Exception $e){\n    exit ($e-&gt;getMessage());\n}\n$PDOstatement=$pdo-&gt;prepare(\"desc user\");\n$PDOstatement-&gt;execute();\nwhile($list=$PDOstatement-&gt;fetch(PDO::FETCH_ASSOC)){\n    print_r($list);\n}\n这个和上面一样\n//print_r($PDOstatement-&gt;fetchAll(PDO::FETCH_ASSOC));\nPDO::FETCH_ASSOC 返回一个包含键值的数组 [\'id\'=&gt;1]\nPDO::FETCH_NUM&nbsp; 与上面一个不同的是,没有键名,只是用数字代替,也是返回一数组&nbsp; [0=&gt;1]', 16, 332, 1, 0, 1, '2021-08-09 02:04:32', '2022-09-11 09:50:49'),
(1078, 1000, 'mysql常用命令', '<p>显示的数据库</p>\n<p>show databases;</p>\n<p>显示所有的表</p>\n<p>show tables;</p>\n<p>创建数据库</p>\n<p>create database <span style=\"color: #e03e2d;\">new_demo</span>;</p>\n<p>删除数据库</p>\n<p>drop database <span style=\"color: #e03e2d;\">new_demo;</span></p>\n<p>创建表</p>\n<p>create table <span style=\"color: #e03e2d;\">new_demo&nbsp;<span style=\"color: #000000;\">id int(11) ,name varchar(25);</span></span></p>\n<p><span style=\"color: #e03e2d;\"><span style=\"color: #000000;\">修改表名</span></span></p>\n<p><span style=\"color: #e03e2d;\"><span style=\"color: #000000;\">alter table <span style=\"color: #e03e2d;\">old_demo</span> rename to <span style=\"color: #e03e2d;\">new_demo</span>;</span></span></p>\n<p>删除表</p>\n<p>drop table new_demo;</p>\n<p>&nbsp;</p>\n<p>插入</p>\n<p>insert into <span style=\"background-color: #ffffff; color: #e03e2d;\">表名 </span>(`id`,`name`,`sex`)values(100,\'夏利\',\'男\');</p>\n<p>更新</p>\n<p>update <span style=\"color: #e03e2d;\">表名</span> set `name`=\"夏利\" where id=1;</p>\n<p>删除</p>\n<p>delete from <span style=\"color: #e03e2d;\">表名</span> where id=1;</p>\n<p>查询</p>\n<p>select * from demo;</p>\n<p>select * from demo where id=1;</p>\n<p>select * from demo where id&gt;100 and id&lt;200;</p>\n<p>select * from demo where id between 100 and 200</p>\n<p>select * from demo where id not between 100 and 200</p>\n<p>select * from demo where id in (1,2,4,5,6)</p>\n<p>select * from demo where id not in (1,2,4,5,6)</p>\n<h2 id=\"笛卡尔积cross-join\" data-anchor-id=\"o4rx\">笛卡尔积：CROSS JOIN</h2>\n<p>假如第一表5条数据,第二张表10条数据,查询后返回5*10=50条数据</p>\n<p>select * from first_table join two_table;</p>\n<p>SELECT * FROM first_table ,two_table;</p>\n<p>select * from first_table where id&gt;1 or&nbsp; name=\"夏利\";</p>\n<p>查询总数,他会返回一个字段</p>\n<p>select count(*) from first_table ;</p>\n<p>select count(id) from first_table ;</p>\n<p>请平均数,求当前pricle列的平均价格</p>\n<p>select avg(pricle) as curr_pricle from study;</p>\n<p>去除重复的数据,<span style=\"color: #e03e2d;\">但是这样有个缺点,它只返回一个name字段</span></p>\n<p>select distinct name from user;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/011.jpg', '显示的数据库\nshow databases;\n显示所有的表\nshow tables;\n创建数据库\ncreate database new_demo;\n删除数据库\ndrop database new_demo;\n创建表\ncreate table new_demo&nbsp;id int(11) ,name varchar(25);\n修改表名\nalter table old_demo rename to new_demo;\n删除表\ndrop table new_demo;\n&nbsp;\n插入\ninsert into 表名 (`id`,`name`,`sex`)values(100,\'夏利\',\'男\');\n更新\nupdate 表名 set `name`=\"夏利\" where id=1;\n删除\ndelete from 表名 where id=1;\n查询\nselect * from demo;\nselect * from demo where id=1;\nselect * from demo where id&gt;100 and id&lt;200;\nselect * from demo where id between 100 and 200\nselect * from demo where id not between 100 and 200\nselect * from demo where id in (1,2,4,5,6)\nselect * from demo where id not in (1,2,4,5,6)\n笛卡尔积：CROSS JOIN\n假如第一表5条数据,第二张表10条数据,查询后返回5*10=50条数据\nselect * from first_table join two_table;\nSELECT * FROM first_table ,two_table;\nselect * from first_table where id&gt;1 or&nbsp; name=\"夏利\";\n查询总数,他会返回一个字段\nselect count(*) from first_table ;\nselect count(id) from first_table ;\n请平均数,求当前pricle列的平均价格\nselect avg(pricle) as curr_pricle from study;\n去除重复的数据,但是这样有个缺点,它只返回一个name字段\nselect distinct name from user;\n&nbsp;\n&nbsp;', 16, 316, 1, 0, 1, '2021-08-09 02:27:10', '2022-09-12 01:26:11'),
(1079, 1000, 'PHP接口的使用', '<p>接口的用途,就是定义一些空的方法,让子类去实现它,定义的方法,子类必须去一一实现</p>\n<pre class=\"language-php\"><code class=\"line-numbers language-php\">&lt;?php\n    //这里定义两个方法,一个发送和接收方法,子类继承必须去实现这两个方法,这个方法默认就是abstract抽象,不用加abstract\n    interface Message{\n        function send(string $msg);\n        function received(string $msg);\n    }\n\n    class one implements Message{\n        function send(string $msg)\n        {\n            // TODO: Implement send() method.\n            return \"one接口:$msg\";\n        }\n        function received(string $msg)\n        {\n            // TODO: Implement received() method.\n            return \"one收到对方发来的信息: $msg\";\n        }\n    }\n    class  two implements Message{\n        function send(string $msg)\n        {\n            // TODO: Implement send() method.\n            return \"two接口:$msg\";\n        }\n        function received(string $msg){\n            return \"two收到对方发来的信息: $msg\";\n        }\n    }\n    //消息工厂类\n    class MessageFactory{\n        public static function createFactory($type){\n            switch ($type){\n                case \'one\':\n                    return new one();\n                    break;\n                case \'two\':\n                    return new two();\n                    break;\n            }\n        }\n    }\n\n    echo MessageFactory::createFactory(\"two\")-&gt;send(\"哈哈\");\n\n\n\n</code></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/065.jpg', '接口的用途,就是定义一些空的方法,让子类去实现它,定义的方法,子类必须去一一实现\n&lt;?php\n    //这里定义两个方法,一个发送和接收方法,子类继承必须去实现这两个方法,这个方法默认就是abstract抽象,不用加abstract\n    interface Message{\n        function send(string $msg);\n        function received(string $msg);\n    }\n\n    class one implements Message{\n        function send(string $msg)\n        {\n            // TODO: Implement send() method.\n            return \"one接口:$msg\";\n        }\n        function received(string $msg)\n        {\n            // TODO: Implement received() method.\n            return \"one收到对方发来的信息: $msg\";\n        }\n    }\n    class  two implements Message{\n        function send(string $msg)\n        {\n            // TODO: Implement send() method.\n            return \"two接口:$msg\";\n        }\n        function received(string $msg){\n            return \"two收到对方发来的信息: $msg\";\n        }\n    }\n    //消息工厂类\n    class MessageFactory{\n        public static function createFactory($type){\n            switch ($type){\n                case \'one\':\n                    return new one();\n                    break;\n                case \'two\':\n                    return new two();\n                    break;\n            }\n        }\n    }\n\n    echo MessageFactory::createFactory(\"two\")-&gt;send(\"哈哈\");\n\n\n\n', 9, 316, 1, 0, 1, '2021-08-09 03:50:55', '2022-09-11 07:31:17'),
(1080, 1000, 'php进行http认证', '<p><img src=\"https://wpcdn.qin500.com/QIN500/1000/2021818113416RcwG02Dad4e8dEhyAN9Ks3jw6z.png\" alt=\"\" width=\"548\" height=\"225\" /></p>\n<p>&nbsp;</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">&lt;?php\nheader(\"Access-Control-Allow-Headers:*\");\nheader(\"Content-type: text/html; charset=utf-8\");\n\n$user=$_SERVER[\'PHP_AUTH_USER\'] ?? null;\n$pwd=$_SERVER[\'PHP_AUTH_PW\'] ?? null;\nif($user == \"admin\" and $pwd ==\"123\"){\n    echo \"验证成功\";\n    var_dump($user);\n    var_dump($pwd);\n}else{\n    http_response_code(401);\n    header(\'WWW-Authenticate:Basic realm=\"My website\"\');\n    echo \"验证失败\";\n}\n</code></pre>', 'https://wpcdn.qin500.com/QIN500/1000/2021818113416RcwG02Dad4e8dEhyAN9Ks3jw6z.png', '\n&nbsp;\n&lt;?php\nheader(\"Access-Control-Allow-Headers:*\");\nheader(\"Content-type: text/html; charset=utf-8\");\n\n$user=$_SERVER[\'PHP_AUTH_USER\'] ?? null;\n$pwd=$_SERVER[\'PHP_AUTH_PW\'] ?? null;\nif($user == \"admin\" and $pwd ==\"123\"){\n    echo \"验证成功\";\n    var_dump($user);\n    var_dump($pwd);\n}else{\n    http_response_code(401);\n    header(\'WWW-Authenticate:Basic realm=\"My website\"\');\n    echo \"验证失败\";\n}\n', 1, 343, 1, 0, 1, '2021-08-11 11:46:20', '2022-09-11 07:31:22'),
(1081, 1000, 'js事件大全', '<p>DOMContentLoaded //DOM树加载完成</p>\n<table class=\"dataintable\" style=\"height: 462px; width: 345px;\">\n<tbody>\n<tr style=\"height: 22px;\">\n<td style=\"height: 22px; width: 105px;\">onabort</td>\n<td style=\"height: 22px; width: 240px;\">图像加载被中断</td>\n</tr>\n<tr style=\"height: 22px;\">\n<td style=\"height: 22px; width: 105px;\">onblur</td>\n<td style=\"height: 22px; width: 240px;\">元素失去焦点</td>\n</tr>\n<tr style=\"height: 22px;\">\n<td style=\"height: 22px; width: 105px;\">onchange</td>\n<td style=\"height: 22px; width: 240px;\">用户改变域的内容</td>\n</tr>\n<tr style=\"height: 22px;\">\n<td style=\"height: 22px; width: 105px;\">onclick</td>\n<td style=\"height: 22px; width: 240px;\">鼠标点击某个对象</td>\n</tr>\n<tr style=\"height: 22px;\">\n<td style=\"height: 22px; width: 105px;\">ondblclick</td>\n<td style=\"height: 22px; width: 240px;\">鼠标双击某个对象</td>\n</tr>\n<tr style=\"height: 22px;\">\n<td style=\"height: 22px; width: 105px;\">onerror</td>\n<td style=\"height: 22px; width: 240px;\">当加载文档或图像时发生某个错误</td>\n</tr>\n<tr style=\"height: 22px;\">\n<td style=\"height: 22px; width: 105px;\">onfocus</td>\n<td style=\"height: 22px; width: 240px;\">元素获得焦点</td>\n</tr>\n<tr style=\"height: 22px;\">\n<td style=\"height: 22px; width: 105px;\">onkeydown</td>\n<td style=\"height: 22px; width: 240px;\">某个键盘的键被按下</td>\n</tr>\n<tr style=\"height: 22px;\">\n<td style=\"height: 22px; width: 105px;\">onkeypress</td>\n<td style=\"height: 22px; width: 240px;\">某个键盘的键被按下或按住</td>\n</tr>\n<tr style=\"height: 22px;\">\n<td style=\"height: 22px; width: 105px;\">onkeyup</td>\n<td style=\"height: 22px; width: 240px;\">某个键盘的键被松开</td>\n</tr>\n<tr style=\"height: 22px;\">\n<td style=\"height: 22px; width: 105px;\">onload</td>\n<td style=\"height: 22px; width: 240px;\">某个页面或图像被完成加载</td>\n</tr>\n<tr style=\"height: 22px;\">\n<td style=\"height: 22px; width: 105px;\">onmousedown</td>\n<td style=\"height: 22px; width: 240px;\">某个鼠标按键被按下</td>\n</tr>\n<tr style=\"height: 22px;\">\n<td style=\"height: 22px; width: 105px;\">onmousemove</td>\n<td style=\"height: 22px; width: 240px;\">鼠标被移动</td>\n</tr>\n<tr style=\"height: 22px;\">\n<td style=\"height: 22px; width: 105px;\">onmouseout</td>\n<td style=\"height: 22px; width: 240px;\">鼠标从某元素移开</td>\n</tr>\n<tr style=\"height: 22px;\">\n<td style=\"height: 22px; width: 105px;\">onmouseover</td>\n<td style=\"height: 22px; width: 240px;\">鼠标被移到某元素之上</td>\n</tr>\n<tr style=\"height: 22px;\">\n<td style=\"height: 22px; width: 105px;\">onmouseup</td>\n<td style=\"height: 22px; width: 240px;\">某个鼠标按键被松开</td>\n</tr>\n<tr style=\"height: 22px;\">\n<td style=\"height: 22px; width: 105px;\">onreset</td>\n<td style=\"height: 22px; width: 240px;\">重置按钮被点击</td>\n</tr>\n<tr style=\"height: 22px;\">\n<td style=\"height: 22px; width: 105px;\">onresize</td>\n<td style=\"height: 22px; width: 240px;\">窗口或框架被调整尺寸</td>\n</tr>\n<tr style=\"height: 22px;\">\n<td style=\"height: 22px; width: 105px;\">onselect</td>\n<td style=\"height: 22px; width: 240px;\">文本被选定</td>\n</tr>\n<tr style=\"height: 22px;\">\n<td style=\"height: 22px; width: 105px;\">onsubmit</td>\n<td style=\"height: 22px; width: 240px;\">提交按钮被点击</td>\n</tr>\n<tr style=\"height: 22px;\">\n<td style=\"height: 22px; width: 105px;\">onunload</td>\n<td style=\"height: 22px; width: 240px;\">用户退出页面</td>\n</tr>\n</tbody>\n</table>', 'https://wpcdn.qin500.com/QIN500/SUCAI/075.jpg', 'DOMContentLoaded //DOM树加载完成\n\n\n\nonabort\n图像加载被中断\n\n\nonblur\n元素失去焦点\n\n\nonchange\n用户改变域的内容\n\n\nonclick\n鼠标点击某个对象\n\n\nondblclick\n鼠标双击某个对象\n\n\nonerror\n当加载文档或图像时发生某个错误\n\n\nonfocus\n元素获得焦点\n\n\nonkeydown\n某个键盘的键被按下\n\n\nonkeypress\n某个键盘的键被按下或按住\n\n\nonkeyup\n某个键盘的键被松开\n\n\nonload\n某个页面或图像被完成加载\n\n\nonmousedown\n某个鼠标按键被按下\n\n\nonmousemove\n鼠标被移动\n\n\nonmouseout\n鼠标从某元素移开\n\n\nonmouseover\n鼠标被移到某元素之上\n\n\nonmouseup\n某个鼠标按键被松开\n\n\nonreset\n重置按钮被点击\n\n\nonresize\n窗口或框架被调整尺寸\n\n\nonselect\n文本被选定\n\n\nonsubmit\n提交按钮被点击\n\n\nonunload\n用户退出页面\n\n\n', 11, 269, 1, 0, 1, '2021-08-12 09:23:30', '2022-09-11 07:31:18'),
(1082, 1000, '网易云音乐直链解析', '<p><a href=\"http://music.163.com/song/media/outer/url?id=[歌\">http://music.163.com/song/media/outer/url?id=[歌</a>曲ID].mp3</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/060.jpg', 'http://music.163.com/song/media/outer/url?id=[歌曲ID].mp3\n&nbsp;\n&nbsp;', 1, 336, 1, 0, 1, '2021-08-12 13:43:55', '2022-09-11 07:31:17'),
(1083, 1000, 'cmd合并文件', '<p>合并当前的mp3文件到一个文件</p>\n<p>/b 二进制方式&nbsp;&nbsp;</p>\n<p>/a ASCII文本方式</p>\n<pre class=\"line-numbers  language-markup\"><code class=\"line-numbers language-markup\">copy *.mp3 /b 3.mp3</code></pre>\n<p>合并指定文件</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">copy 1.mp3 /b + 2.mp3 /b &gt;&gt; 3.mp3</code></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/050.jpg', '合并当前的mp3文件到一个文件\n/b 二进制方式&nbsp;&nbsp;\n/a ASCII文本方式\ncopy *.mp3 /b 3.mp3\n合并指定文件\ncopy 1.mp3 /b + 2.mp3 /b &gt;&gt; 3.mp3', 19, 313, 1, 0, 1, '2021-08-14 02:39:14', '2022-09-11 16:57:21'),
(1084, 1000, 'postman设置环境变量', '<p>将响应的内容设置为变量</p>\n<pre class=\"language-js\"><code class=\"line-numbers language-js\">var token=pm.response.json().access_token;   //获取返回的json数据\npm.environment.set(\"Authorization\", token);</code></pre>\n<p>获取响应的文本和响应头信息</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">console.log(pm.response.text())\nconsole.log(pm.response.headers)</code></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/046.jpg', '将响应的内容设置为变量\nvar token=pm.response.json().access_token;   //获取返回的json数据\npm.environment.set(\"Authorization\", token);\n获取响应的文本和响应头信息\nconsole.log(pm.response.text())\nconsole.log(pm.response.headers)', 1, 381, 1, 0, 1, '2021-08-14 03:14:52', '2022-09-11 07:31:19'),
(1100, 1000, 'php屏蔽X-Powered-By', '<p>将 php.ini 中，将</p>\n<p>&ldquo;expose_php = On&rdquo;</p>\n<p>改为</p>\n<p>&ldquo;expose_php = Off&rdquo;</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/067.jpg', '将 php.ini 中，将\n&ldquo;expose_php = On&rdquo;\n改为\n&ldquo;expose_php = Off&rdquo;', 1, 504, 1, 0, 1, '2021-09-06 01:57:22', '2022-09-11 07:09:35'),
(1091, 1000, 'vuex中的状态管理器中的计算属性', '<p>先看看vue中的计算属性</p>\n<p><img src=\"https://wpcdn.qin500.com/1000/20218211731Pw0K1zF3hBjGZeQjdRb9yzaaPn.png\" width=\"335\" height=\"370\" /></p>\n<p>vuex中的计算属性(getters),不带参数,带参数,和应用兄弟间的函数</p>\n<pre class=\"language-js\"><code class=\"line-numbers language-js\">export default createStore({\n  state: {\n    num:10,\n    dnum:5\n  },\n  getters:{\n    //不带参数的写法\n    mepow(state){\n      return state.num * state.num ;\n    },\n    //带参数写法\n    fpow(state){\n      return function (bb){\n        return state.dnum * state.dnum * bb;\n      }\n    },\n    //第二个参数getters引用上一个方法\n    mpow(state,getters){\n      return getters.fpow(9);\n    }\n  },\n})</code></pre>\n<p>显示</p>\n<pre class=\"language-markup\"><code class=\"line-numbers language-markup\">&lt;template&gt;\n  &lt;h3&gt;在About组件中应用vuex&lt;/h3&gt;\n  {{ $store.state.num }}\n  &lt;h3&gt;在About组件中应用vuex&lt;/h3&gt;\n  {{ $store.state.dnum }}\n  &lt;h3&gt;计算属性&lt;/h3&gt;\n  {{ mypow }}\n  &lt;h3&gt;vuex中的计算属性&lt;/h3&gt;\n  {{ $store.getters.mepow }}\n  &lt;h3&gt;vuex中的计算属性带参数&lt;/h3&gt;\n  {{ $store.getters.fpow(2) }}\n  &lt;h3&gt;vuex中的计算属性带参数&lt;/h3&gt;\n  {{ $store.getters.mpow }}\n&lt;/template&gt;</code></pre>\n<p><img src=\"https://wpcdn.qin500.com/1000/202182117199wimTakrC56tXaKJEYFP4X92m8S.png\" width=\"434\" height=\"431\" /></p>', 'https://wpcdn.qin500.com/1000/20218211731Pw0K1zF3hBjGZeQjdRb9yzaaPn.png', '先看看vue中的计算属性\n\nvuex中的计算属性(getters),不带参数,带参数,和应用兄弟间的函数\nexport default createStore({\n  state: {\n    num:10,\n    dnum:5\n  },\n  getters:{\n    //不带参数的写法\n    mepow(state){\n      return state.num * state.num ;\n    },\n    //带参数写法\n    fpow(state){\n      return function (bb){\n        return state.dnum * state.dnum * bb;\n      }\n    },\n    //第二个参数getters引用上一个方法\n    mpow(state,getters){\n      return getters.fpow(9);\n    }\n  },\n})\n显示\n&lt;template&gt;\n  &lt;h3&gt;在About组件中应用vuex&lt;/h3&gt;\n  {{ $store.state.num }}\n  &lt;h3&gt;在About组件中应用vuex&lt;/h3&gt;\n  {{ $store.state.dnum }}\n  &lt;h3&gt;计算属性&lt;/h3&gt;\n  {{ mypow }}\n  &lt;h3&gt;vuex中的计算属性&lt;/h3&gt;\n  {{ $store.getters.mepow }}\n  &lt;h3&gt;vuex中的计算属性带参数&lt;/h3&gt;\n  {{ $store.getters.fpow(2) }}\n  &lt;h3&gt;vuex中的计算属性带参数&lt;/h3&gt;\n  {{ $store.getters.mpow }}\n&lt;/template&gt;\n', 15, 305, 1, 0, 1, '2021-08-21 07:25:13', '2022-09-11 07:31:20'),
(1092, 1000, 'actions异步处理操作', '<p><img src=\"https://wpcdn.qin500.com/1000/2021822918427rFByQYMWP5MF38aZysZdwYMZC.png\" width=\"451\" height=\"442\" /></p>\n<p>&nbsp;</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">actions: {\n        //content是上下文的意思\n        demo(content) {\n            console.log(content)\n            setTimeout(function (e) {\n                //直接修改状态的值\n                content.state.mnum = \"9999\";\n                //通过修改计算属性方法来间接修改状态的值\n                // content.commit(\"sum\")\n            }, 30)\n        },\n        //第二种写法\n        /* 因为content是一个对象,里面包含,state,getter,commit\n        所以我们可以展开对象来写,第二个参数为自定义参数(payload)\n         */\n        fun({state, commit, getter}, payload) {\n            state.mnum = 11111\n            console.log(\"接收的值\", payload)\n        }\n    },</code></pre>\n<p>&nbsp;</p>\n<p>在模板中调用</p>\n<pre class=\"line-numbers  language-html\"><code class=\"line-numbers language-html\">  &lt;h3&gt;vuex actions&lt;/h3&gt;\n  &lt;button @click=\"cnum\"&gt;actions&lt;/button&gt;\n  {{ $store.state.mnum }}\n  &lt;button @click=\"$store.dispatch(\'fun\',{name:\'xiaoli\'})\"&gt;修改状态的值&lt;/button&gt;</code></pre>', 'https://wpcdn.qin500.com/1000/2021822918427rFByQYMWP5MF38aZysZdwYMZC.png', '\n&nbsp;\nactions: {\n        //content是上下文的意思\n        demo(content) {\n            console.log(content)\n            setTimeout(function (e) {\n                //直接修改状态的值\n                content.state.mnum = \"9999\";\n                //通过修改计算属性方法来间接修改状态的值\n                // content.commit(\"sum\")\n            }, 30)\n        },\n        //第二种写法\n        /* 因为content是一个对象,里面包含,state,getter,commit\n        所以我们可以展开对象来写,第二个参数为自定义参数(payload)\n         */\n        fun({state, commit, getter}, payload) {\n            state.mnum = 11111\n            console.log(\"接收的值\", payload)\n        }\n    },\n&nbsp;\n在模板中调用\n  &lt;h3&gt;vuex actions&lt;/h3&gt;\n  &lt;button @click=\"cnum\"&gt;actions&lt;/button&gt;\n  {{ $store.state.mnum }}\n  &lt;button @click=\"$store.dispatch(\'fun\',{name:\'xiaoli\'})\"&gt;修改状态的值&lt;/button&gt;', 15, 386, 1, 0, 1, '2021-08-22 01:20:14', '2022-09-11 07:31:20'),
(1093, 1000, '浅谈vuex中的actions,getter,mutations,state的使用', '<p>state 数据</p>\n<p>getter 计算属性</p>\n<p>mutations 方法</p>\n<p>actions 异步</p>\n<p>modules 模块</p>\n<p>state的使用</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">state: {\n        num: 10,\n        dnum: 5,\n        mnum: 0\n    },</code></pre>\n<p>在视图中调用</p>\n<pre class=\"language-markup\"><code class=\"line-numbers language-markup\">  &lt;h3&gt;在About组件中应用vuex&lt;/h3&gt;\n  {{ $store.state.num }}\n  &lt;h3&gt;在About组件中应用vuex&lt;/h3&gt;\n  {{ $store.state.dnum }}</code></pre>\n<p>getters的使用</p>\n<p>这里的第一个参数state是state里面的值</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">getters: {\n        //计算属性\n        //不带参数的写法\n        mepow(state) {\n            return state.num * state.num;\n        },\n        //带参数写法\n        fpow(state) {\n            return function (bb) {\n                return state.dnum * state.dnum * bb;\n            }\n        },\n        //引用上一个方法\n        mpow(state, getters) {\n            return getters.fpow(9);\n        }\n    },</code></pre>\n<p>视图中</p>\n<pre class=\"line-numbers  language-html\"><code class=\"line-numbers language-html\">  &lt;h3&gt;vuex中的计算属性&lt;/h3&gt;\n  {{ $store.getters.mepow }}\n  &lt;h3&gt;vuex中的计算属性带参数&lt;/h3&gt;\n  {{ $store.getters.fpow(2) }}</code></pre>\n<p>mutations 的使用</p>\n<p>这里的count是自定义参数</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">mutations: {\n        //方法\n        sub1(state) {\n            state.dnum--\n        },\n        add1(state) {\n            state.dnum++\n        },\n        sub2(state, count) {\n            state.dnum -= count\n        },\n        add2(state, count) {\n            state.dnum += count\n        },\n        sum(state) {\n            state.mnum++\n        }\n    },</code></pre>\n<p>视图调用</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">    sub1(){\n      this.$store.commit(\'sub1\')\n    },\n    add1(){\n      this.$store.commit(\'add1\')\n    },\n    sub2(){\n      this.$store.commit(\'sub2\',this.count)\n    },\n    add2(){\n      this.$store.commit(\'add2\',this.count)\n    }</code></pre>\n<p>但我们的应用比较复杂的时候,我们可以使用module来处理</p>\n<pre class=\"language-js\"><code class=\"line-numbers language-js\">const moduleA = {\n  state: () =&gt; ({ ... }),\n  mutations: { ... },\n  actions: { ... },\n  getters: { ... }\n}\n\nconst store = new Vuex.Store({\n  modules: {\n    a: moduleA,\n    b: moduleB\n  }\n})</code></pre>\n<p>state的调用</p>\n<p>这里定义一个user module</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">const user={\n    state:{\n        name:\'xiaozhang\'\n    },\n    mutations:{\n        setname(state,payload){\n            state.name=payload.name\n        }\n    }\n}\n</code></pre>\n<p>$store.state.user user为刚才定义的名称,后面接属性名</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">  {{ $store.state.user.name }}</code></pre>\n<p>getters&nbsp; 和全局的getters调用方法是相同的</p>\n<p>如果在子user里面定义了和全局相同的方法,那么它就会两个都调用</p>\n<p><img src=\"https://wpcdn.qin500.com/1000/20218221710238BcieaptfXMYZjRp4FG8N4S3f4.png\" width=\"610\" height=\"561\" /></p>\n<p>视图中显示</p>\n<p>相同函数名,最终获取的结果为全局的</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">  {{ $store.getters.mepow }}</code></pre>\n<p>&nbsp;</p>\n<p>使用命名空间</p>\n<pre class=\"language-js\"><code class=\"line-numbers language-js\">namespaced: true,</code></pre>\n<p>getters&nbsp;调用&nbsp;</p>\n<pre class=\"language-js\"><code class=\"line-numbers language-js\"> getters[\'account/isAdmin\']</code></pre>\n<p>actions 调用</p>\n<pre class=\"language-js\"><code class=\"line-numbers language-js\">dispatch(\'account/login\')</code></pre>\n<p>mutations调用</p>\n<pre class=\"language-js\"><code class=\"line-numbers language-js\">commit(\'account/login\')</code></pre>', 'https://wpcdn.qin500.com/1000/20218221710238BcieaptfXMYZjRp4FG8N4S3f4.png', 'state 数据\ngetter 计算属性\nmutations 方法\nactions 异步\nmodules 模块\nstate的使用\nstate: {\n        num: 10,\n        dnum: 5,\n        mnum: 0\n    },\n在视图中调用\n  &lt;h3&gt;在About组件中应用vuex&lt;/h3&gt;\n  {{ $store.state.num }}\n  &lt;h3&gt;在About组件中应用vuex&lt;/h3&gt;\n  {{ $store.state.dnum }}\ngetters的使用\n这里的第一个参数state是state里面的值\ngetters: {\n        //计算属性\n        //不带参数的写法\n        mepow(state) {\n            return state.num * state.num;\n        },\n        //带参数写法\n        fpow(state) {\n            return function (bb) {\n                return state.dnum * state.dnum * bb;\n            }\n        },\n        //引用上一个方法\n        mpow(state, getters) {\n            return getters.fpow(9);\n        }\n    },\n视图中\n  &lt;h3&gt;vuex中的计算属性&lt;/h3&gt;\n  {{ $store.getters.mepow }}\n  &lt;h3&gt;vuex中的计算属性带参数&lt;/h3&gt;\n  {{ $store.getters.fpow(2) }}\nmutations 的使用\n这里的count是自定义参数\nmutations: {\n        //方法\n        sub1(state) {\n            state.dnum--\n        },\n        add1(state) {\n            state.dnum++\n        },\n        sub2(state, count) {\n            state.dnum -= count\n        },\n        add2(state, count) {\n            state.dnum += count\n        },\n        sum(state) {\n            state.mnum++\n        }\n    },\n视图调用\n    sub1(){\n      this.$store.commit(\'sub1\')\n    },\n    add1(){\n      this.$store.commit(\'add1\')\n    },\n    sub2(){\n      this.$store.commit(\'sub2\',this.count)\n    },\n    add2(){\n      this.$store.commit(\'add2\',this.count)\n    }\n但我们的应用比较复杂的时候,我们可以使用module来处理\nconst moduleA = {\n  state: () =&gt; ({ ... }),\n  mutations: { ... },\n  actions: { ... },\n  getters: { ... }\n}\n\nconst store = new Vuex.Store({\n  modules: {\n    a: moduleA,\n    b: moduleB\n  }\n})\nstate的调用\n这里定义一个user module\nconst user={\n    state:{\n        name:\'xiaozhang\'\n    },\n    mutations:{\n        setname(state,payload){\n            state.name=payload.name\n        }\n    }\n}\n\n$store.state.user user为刚才定义的名称,后面接属性名\n  {{ $store.state.user.name }}\ngetters&nbsp; 和全局的getters调用方法是相同的\n如果在子user里面定义了和全局相同的方法,那么它就会两个都调用\n\n视图中显示\n相同函数名,最终获取的结果为全局的\n  {{ $store.getters.mepow }}\n&nbsp;\n使用命名空间\nnamespaced: true,\ngetters&nbsp;调用&nbsp;\n getters[\'account/isAdmin\']\nactions 调用\ndispatch(\'account/login\')\nmutations调用\ncommit(\'account/login\')', 15, 292, 1, 0, 1, '2021-08-22 08:19:34', '2022-09-11 07:31:20');
INSERT INTO `qin500_articles` (`id`, `uid`, `title`, `text`, `masterpic`, `pure`, `cid`, `views`, `isshow`, `zan`, `bdts`, `created_at`, `updated_at`) VALUES
(1094, 1000, 'curl常用选项及使用实例并发请求', '<p>CURL函数库里最重要的函数是<strong>curl_setopt()</strong>,它可以通过设定CURL函数库定义的选项来定制HTTP请求<br /><br />使用方法：<br />bool curl_setopt (int ch, string option, mixed value)&nbsp;<br />curl_setopt()函数将为一个CURL会话设置选项。option参数是你想要的设置，value是这个选项给定的值。<br />&nbsp;</p>\n<p>下列选项的值将被作为长整形使用(在option参数中指定)：<br /><br /><strong>CURLOPT_INFILESIZE:</strong>&nbsp;//当你上传一个文件到远程站点，这个选项告诉PHP你上传文件的大小。<br /><br /><strong>CURLOPT_VERBOSE:</strong>&nbsp;//如果你想CURL报告每一件意外的事情，设置这个选项为一个非零值。<br /><br /><strong>CURLOPT_HEADER:</strong>&nbsp;//如果你想把一个头包含在输出中，设置这个选项为一个非零值。<br /><br /><strong>CURLOPT_NOPROGRESS:</strong>&nbsp;//如果你不会PHP为CURL传输显示一个进程条，设置这个选项为一个非零值。<br />注意：PHP自动设置这个选项为非零值，你应该仅仅为了调试的目的来改变这个选项。<br /><br /><strong>CURLOPT_NOBODY:</strong>&nbsp;//如果你不想在输出中包含body部分，设置这个选项为一个非零值。<br /><br /><strong>CURLOPT_FAILONERROR:</strong>&nbsp;//如果你想让PHP在发生错误(HTTP代码返回大于等于300)时，不显示，设置这个选项为一人非零值。默认行为是返回一个正常页，忽略代码。<br /><br /><strong>CURLOPT_UPLOAD:</strong>&nbsp;//如果你想让PHP为上传做准备，设置这个选项为一个非零值。<br /><br /><strong>CURLOPT_POST:</strong>&nbsp;//如果你想PHP去做一个正规的HTTP POST，设置这个选项为一个非零值。这个POST是普通的 application/x-www-from-urlencoded 类型，多数被HTML表单使用<br /><br /><strong>CURLOPT_FTPLISTONLY:&nbsp;</strong>//设置这个选项为非零值，PHP将列出FTP的目录名列表。<br /><br /><strong>CURLOPT_FTPAPPEND:</strong><strong>&nbsp;</strong>//设置这个选项为一个非零值，PHP将应用远程文件代替覆盖它。<br /><br /><strong>CURLOPT_NETRC:</strong>&nbsp;//设置这个选项为一个非零值，PHP将在你的 ~./netrc 文件中查找你要建立连接的远程站点的用户名及密码。<br /><br /><strong>CURLOPT_FOLLOWLOCATION:&nbsp;//</strong>设置这个选项为一个非零值(象 \'Location: \')的头，服务器会把它当做HTTP头的一部分发送(注意这是递归的，PHP将发送形如 \'Location: \'的头)。<br /><br /><strong>CURLOPT_PUT:</strong>&nbsp;//设置这个选项为一个非零值去用HTTP上传一个文件。要上传这个文件必须设置CURLOPT_INFILE和CURLOPT_INFILESIZE选项.<br /><br /><strong>CURLOPT_MUTE:&nbsp;//</strong>设置这个选项为一个非零值，PHP对于CURL函数将完全沉默。<br /><strong>CURLOPT_TIMEOUT:</strong>&nbsp;//设置一个长整形数，作为最大延续多少秒。<br /><strong>CURLOPT_LOW_SPEED_LIMIT:&nbsp;//</strong>设置一个长整形数，控制传送多少字节。<br /><strong>CURLOPT_LOW_SPEED_TIME:&nbsp;</strong>//设置一个长整形数，控制多少秒传送CURLOPT_LOW_SPEED_LIMIT规定的字节数。<br /><br /><strong>CURLOPT_RESUME_FROM:</strong>&nbsp;//传递一个包含字节偏移地址的长整形参数，(你想转移到的开始表单)。<br /><br /><strong>CURLOPT_SSLVERSION:</strong>&nbsp;//传递一个包含SSL版本的长参数。默认PHP将被它自己努力的确定，在更多的安全中你必须手工设置。<br /><br /><strong>CURLOPT_TIMECONDITION:&nbsp;//</strong>传递一个长参数，指定怎么处理CURLOPT_TIMEVALUE参数。你可以设置这个参数为TIMECOND_IFMODSINCE 或 TIMECOND_ISUNMODSINCE。这仅用于HTTP。<br /><br /><strong>CURLOPT_TIMEVALUE:</strong>&nbsp;//传递一个从1970-1-1开始到现在的秒数。这个时间将被CURLOPT_TIMEVALUE选项作为指定值使用，或被默认TIMECOND_IFMODSINCE使用。<br /><br />下列选项的值将被作为字符串：<br /><br /><strong>CURLOPT_URL:</strong>&nbsp;//这是你想用PHP取回的URL地址。你也可以在用curl_init()函数初始化时设置这个选项。<br /><br /><strong>CURLOPT_USERPWD:&nbsp;//</strong>传递一个形如[username]:[password]风格的字符串,作用PHP去连接。<br /><br /><strong>CURLOPT_PROXYUSERPWD:</strong>&nbsp;//传递一个形如[username]:[password] 格式的字符串去连接HTTP代理。<br /><br /><strong>CURLOPT_RANGE:</strong>&nbsp;//传递一个你想指定的范围。它应该是\'X-Y\'格式，X或Y是被除外的。HTTP传送同样支持几个间隔，用逗句来分隔(X-Y,N-M)。<br /><br /><strong>CURLOPT_POSTFIELDS:&nbsp;//</strong>传递一个作为HTTP &ldquo;POST&rdquo;操作的所有数据的字符串。<br /><br /><strong>CURLOPT_REFERER:</strong>&nbsp;//在HTTP请求中包含一个\'referer\'头的字符串。<br /><br /><strong>CURLOPT_USERAGENT:&nbsp;//</strong>在HTTP请求中包含一个\'user-agent\'头的字符串。<br /><br /><strong>CURLOPT_FTPPORT:&nbsp;//</strong>传递一个包含被ftp \'POST\'指令使用的IP地址。这个POST指令告诉远程服务器去连接我们指定的IP地址。 这个字符串可以是一个IP地址，一个主机名，一个网络界面名(在UNIX下)，或是&lsquo;-\'(使用系统默认IP地址)。<br /><br /><strong>CURLOPT_COOKIE:&nbsp;//</strong>传递一个包含HTTP cookie的头连接。<br /><br /><strong>CURLOPT_SSLCERT:</strong>&nbsp;//传递一个包含PEM格式证书的字符串。<br /><br /><strong>CURLOPT_SSLCERTPASSWD:</strong>&nbsp;//传递一个包含使用CURLOPT_SSLCERT证书必需的密码。<br /><br /><strong>CURLOPT_COOKIEFILE:&nbsp;//</strong>传递一个包含cookie数据的文件的名字的字符串。这个cookie文件可以是Netscape格式，或是堆存在文件中的HTTP风格的头。<br /><br /><strong>CURLOPT_CUSTOMREQUEST:</strong>&nbsp;//当进行HTTP请求时，传递一个字符被GET或HEAD使用。为进行DELETE或其它操作是有益的<br /><br />注意: 在确认你的服务器支持命令先不要去这样做。<br /><br />下列的选项要求一个文件描述(通过使用fopen()函数获得)：<br /><br /><strong>CURLOPT_FILE:</strong>&nbsp;//这个文件将是你放置传送的输出文件，默认是STDOUT.<br /><br /><strong>CURLOPT_INFILE:&nbsp;//</strong>这个文件是你传送过来的输入文件。<br /><br /><strong>CURLOPT_WRITEHEADER:&nbsp;//</strong>这个文件写有你输出的头部分。<br /><br /><strong>CURLOPT_STDERR://&nbsp;</strong>这个文件写有错误而不是stderr。</p>\n<div class=\"h10\">四部曲</div>\n<div class=\"h10\">init初始化,</div>\n<div class=\"h10\">设置可选项,</div>\n<div class=\"h10\">执行,</div>\n<div class=\"h10\">最后关闭</div>\n<div class=\"h10\">\n<pre class=\"language-php\"><code class=\"line-numbers language-php\">&lt;?php\n\n$ch=curl_init();\ncurl_setopt($ch,CURLOPT_URL,\"http://www.qin500.com\");\ncurl_setopt($ch,CURLOPT_RETURNTRANSFER,1);\ncurl_setopt($ch, CURLOPT_MAXREDIRS,20);        //设置最大的重定向次数\ncurl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);  //跟随重定向\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);//关闭ssl\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n$res=curl_exec($ch);\ncurl_close($ch);\necho $res;\n\n?&gt;\n</code></pre>\n<p>&nbsp;</p>\n<p>并发请求</p>\n<pre class=\"language-php\"><code class=\"line-numbers language-php\">&lt;?php\n\n\n$chArr = [];\nfor ($i = 0; $i &lt; 10; $i++) {\n    $chArr[$i] = curl_init(\"\");\n    curl_setopt($chArr[$i], CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($chArr[$i], CURLOPT_SSL_VERIFYPEER, 0);\n    curl_setopt($chArr[$i], CURLOPT_SSL_VERIFYHOST, 0);\n    curl_setopt($chArr[$i], CURLOPT_USERAGENT, \"user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 Edg/92.0.902.78\");\n}\n\n$mh = curl_multi_init(); //1\nforeach ($chArr as $k =&gt; $ch) {\n    curl_multi_add_handle($mh, $ch); //2\n}\n$running = null;\n\ndo {\n    //$running,一个用来判断操作是否仍在执行的标识的引用。\n    curl_multi_exec($mh, $running); //3\n} while ($running &gt; 0); //4\n\n$code=[];\n$errstr=[];\nforeach ($chArr as $k =&gt; $ch) {\n    $result[$k] = curl_multi_getcontent($ch); //5\n    $errstr[] = curl_error($ch);\n    $code[]=curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_multi_remove_handle($mh, $ch);//6\n\n}\nprint_r($code);\nprint_r($errstr);\nprint_r($result);//输出结果\ncurl_multi_close($mh); //7\n\n?&gt;</code></pre>\n<p>&nbsp;</p>\n<p>文件上传</p>\n<pre class=\"language-php\"><code class=\"line-numbers language-php\">  &lt;?php\n$ch=curl_init();\n    curl_setopt($ch,CURLOPT_URL,\'http://localhost/demo/demo/file/accept.php\');\n    curl_setopt($ch,CURLOPT_RETURNTRANSFER,1);\n    curl_setopt($ch,CURLOPT_POSTFIELDS,[\'file\'=&gt;new CURLFile(__DIR__ . \"../conn2.php\"),\'name\'=&gt;\'xuyao\']);\n    echo curl_exec($ch);\n    print_r(curl_error($ch));</code></pre>\n<p>&nbsp;</p>\n</div>', 'https://wpcdn.qin500.com/QIN500/SUCAI/090.jpg', 'CURL函数库里最重要的函数是curl_setopt(),它可以通过设定CURL函数库定义的选项来定制HTTP请求使用方法：bool curl_setopt (int ch, string option, mixed value)&nbsp;curl_setopt()函数将为一个CURL会话设置选项。option参数是你想要的设置，value是这个选项给定的值。&nbsp;\n下列选项的值将被作为长整形使用(在option参数中指定)：CURLOPT_INFILESIZE:&nbsp;//当你上传一个文件到远程站点，这个选项告诉PHP你上传文件的大小。CURLOPT_VERBOSE:&nbsp;//如果你想CURL报告每一件意外的事情，设置这个选项为一个非零值。CURLOPT_HEADER:&nbsp;//如果你想把一个头包含在输出中，设置这个选项为一个非零值。CURLOPT_NOPROGRESS:&nbsp;//如果你不会PHP为CURL传输显示一个进程条，设置这个选项为一个非零值。注意：PHP自动设置这个选项为非零值，你应该仅仅为了调试的目的来改变这个选项。CURLOPT_NOBODY:&nbsp;//如果你不想在输出中包含body部分，设置这个选项为一个非零值。CURLOPT_FAILONERROR:&nbsp;//如果你想让PHP在发生错误(HTTP代码返回大于等于300)时，不显示，设置这个选项为一人非零值。默认行为是返回一个正常页，忽略代码。CURLOPT_UPLOAD:&nbsp;//如果你想让PHP为上传做准备，设置这个选项为一个非零值。CURLOPT_POST:&nbsp;//如果你想PHP去做一个正规的HTTP POST，设置这个选项为一个非零值。这个POST是普通的 application/x-www-from-urlencoded 类型，多数被HTML表单使用CURLOPT_FTPLISTONLY:&nbsp;//设置这个选项为非零值，PHP将列出FTP的目录名列表。CURLOPT_FTPAPPEND:&nbsp;//设置这个选项为一个非零值，PHP将应用远程文件代替覆盖它。CURLOPT_NETRC:&nbsp;//设置这个选项为一个非零值，PHP将在你的 ~./netrc 文件中查找你要建立连接的远程站点的用户名及密码。CURLOPT_FOLLOWLOCATION:&nbsp;//设置这个选项为一个非零值(象 \'Location: \')的头，服务器会把它当做HTTP头的一部分发送(注意这是递归的，PHP将发送形如 \'Location: \'的头)。CURLOPT_PUT:&nbsp;//设置这个选项为一个非零值去用HTTP上传一个文件。要上传这个文件必须设置CURLOPT_INFILE和CURLOPT_INFILESIZE选项.CURLOPT_MUTE:&nbsp;//设置这个选项为一个非零值，PHP对于CURL函数将完全沉默。CURLOPT_TIMEOUT:&nbsp;//设置一个长整形数，作为最大延续多少秒。CURLOPT_LOW_SPEED_LIMIT:&nbsp;//设置一个长整形数，控制传送多少字节。CURLOPT_LOW_SPEED_TIME:&nbsp;//设置一个长整形数，控制多少秒传送CURLOPT_LOW_SPEED_LIMIT规定的字节数。CURLOPT_RESUME_FROM:&nbsp;//传递一个包含字节偏移地址的长整形参数，(你想转移到的开始表单)。CURLOPT_SSLVERSION:&nbsp;//传递一个包含SSL版本的长参数。默认PHP将被它自己努力的确定，在更多的安全中你必须手工设置。CURLOPT_TIMECONDITION:&nbsp;//传递一个长参数，指定怎么处理CURLOPT_TIMEVALUE参数。你可以设置这个参数为TIMECOND_IFMODSINCE 或 TIMECOND_ISUNMODSINCE。这仅用于HTTP。CURLOPT_TIMEVALUE:&nbsp;//传递一个从1970-1-1开始到现在的秒数。这个时间将被CURLOPT_TIMEVALUE选项作为指定值使用，或被默认TIMECOND_IFMODSINCE使用。下列选项的值将被作为字符串：CURLOPT_URL:&nbsp;//这是你想用PHP取回的URL地址。你也可以在用curl_init()函数初始化时设置这个选项。CURLOPT_USERPWD:&nbsp;//传递一个形如[username]:[password]风格的字符串,作用PHP去连接。CURLOPT_PROXYUSERPWD:&nbsp;//传递一个形如[username]:[password] 格式的字符串去连接HTTP代理。CURLOPT_RANGE:&nbsp;//传递一个你想指定的范围。它应该是\'X-Y\'格式，X或Y是被除外的。HTTP传送同样支持几个间隔，用逗句来分隔(X-Y,N-M)。CURLOPT_POSTFIELDS:&nbsp;//传递一个作为HTTP &ldquo;POST&rdquo;操作的所有数据的字符串。CURLOPT_REFERER:&nbsp;//在HTTP请求中包含一个\'referer\'头的字符串。CURLOPT_USERAGENT:&nbsp;//在HTTP请求中包含一个\'user-agent\'头的字符串。CURLOPT_FTPPORT:&nbsp;//传递一个包含被ftp \'POST\'指令使用的IP地址。这个POST指令告诉远程服务器去连接我们指定的IP地址。 这个字符串可以是一个IP地址，一个主机名，一个网络界面名(在UNIX下)，或是&lsquo;-\'(使用系统默认IP地址)。CURLOPT_COOKIE:&nbsp;//传递一个包含HTTP cookie的头连接。CURLOPT_SSLCERT:&nbsp;//传递一个包含PEM格式证书的字符串。CURLOPT_SSLCERTPASSWD:&nbsp;//传递一个包含使用CURLOPT_SSLCERT证书必需的密码。CURLOPT_COOKIEFILE:&nbsp;//传递一个包含cookie数据的文件的名字的字符串。这个cookie文件可以是Netscape格式，或是堆存在文件中的HTTP风格的头。CURLOPT_CUSTOMREQUEST:&nbsp;//当进行HTTP请求时，传递一个字符被GET或HEAD使用。为进行DELETE或其它操作是有益的注意: 在确认你的服务器支持命令先不要去这样做。下列的选项要求一个文件描述(通过使用fopen()函数获得)：CURLOPT_FILE:&nbsp;//这个文件将是你放置传送的输出文件，默认是STDOUT.CURLOPT_INFILE:&nbsp;//这个文件是你传送过来的输入文件。CURLOPT_WRITEHEADER:&nbsp;//这个文件写有你输出的头部分。CURLOPT_STDERR://&nbsp;这个文件写有错误而不是stderr。\n四部曲\ninit初始化,\n设置可选项,\n执行,\n最后关闭\n\n&lt;?php\n\n$ch=curl_init();\ncurl_setopt($ch,CURLOPT_URL,\"http://www.qin500.com\");\ncurl_setopt($ch,CURLOPT_RETURNTRANSFER,1);\ncurl_setopt($ch, CURLOPT_MAXREDIRS,20);        //设置最大的重定向次数\ncurl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);  //跟随重定向\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);//关闭ssl\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n$res=curl_exec($ch);\ncurl_close($ch);\necho $res;\n\n?&gt;\n\n&nbsp;\n并发请求\n&lt;?php\n\n\n$chArr = [];\nfor ($i = 0; $i &lt; 10; $i++) {\n    $chArr[$i] = curl_init(\"\");\n    curl_setopt($chArr[$i], CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($chArr[$i], CURLOPT_SSL_VERIFYPEER, 0);\n    curl_setopt($chArr[$i], CURLOPT_SSL_VERIFYHOST, 0);\n    curl_setopt($chArr[$i], CURLOPT_USERAGENT, \"user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 Edg/92.0.902.78\");\n}\n\n$mh = curl_multi_init(); //1\nforeach ($chArr as $k =&gt; $ch) {\n    curl_multi_add_handle($mh, $ch); //2\n}\n$running = null;\n\ndo {\n    //$running,一个用来判断操作是否仍在执行的标识的引用。\n    curl_multi_exec($mh, $running); //3\n} while ($running &gt; 0); //4\n\n$code=[];\n$errstr=[];\nforeach ($chArr as $k =&gt; $ch) {\n    $result[$k] = curl_multi_getcontent($ch); //5\n    $errstr[] = curl_error($ch);\n    $code[]=curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_multi_remove_handle($mh, $ch);//6\n\n}\nprint_r($code);\nprint_r($errstr);\nprint_r($result);//输出结果\ncurl_multi_close($mh); //7\n\n?&gt;\n&nbsp;\n文件上传\n  &lt;?php\n$ch=curl_init();\n    curl_setopt($ch,CURLOPT_URL,\'http://localhost/demo/demo/file/accept.php\');\n    curl_setopt($ch,CURLOPT_RETURNTRANSFER,1);\n    curl_setopt($ch,CURLOPT_POSTFIELDS,[\'file\'=&gt;new CURLFile(__DIR__ . \"../conn2.php\"),\'name\'=&gt;\'xuyao\']);\n    echo curl_exec($ch);\n    print_r(curl_error($ch));\n&nbsp;\n', 1, 372, 1, 0, 1, '2021-08-24 00:59:47', '2022-09-11 07:31:17'),
(1096, 1000, 'php用gd库生成验证码图片', '<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">&lt;?php\n    header(\"content-Type: image/png\");\n    $img = imagecreatetruecolor(100, 100);\n    //   $img= imagecreate(100,100);\n    $red = imagecolorallocate($img, 255, 0, 0);\n    $white = imagecolorallocate($img, 255, 255, 255);\n    imagefill($img, 0, 0,$red);\n    imagechar($img,5,10,10,\"a\",$white);\n//    imageline() //画线\n    imagestring($img,10,20,20,\'ab\',$white);\n//    imagettftext($img,15,30,10,10,$white,\'Arial\',\"哈哈\");\n    imagepng($img);\n    imagedestroy($img);\n</code></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/031.jpg', '&lt;?php\n    header(\"content-Type: image/png\");\n    $img = imagecreatetruecolor(100, 100);\n    //   $img= imagecreate(100,100);\n    $red = imagecolorallocate($img, 255, 0, 0);\n    $white = imagecolorallocate($img, 255, 255, 255);\n    imagefill($img, 0, 0,$red);\n    imagechar($img,5,10,10,\"a\",$white);\n//    imageline() //画线\n    imagestring($img,10,20,20,\'ab\',$white);\n//    imagettftext($img,15,30,10,10,$white,\'Arial\',\"哈哈\");\n    imagepng($img);\n    imagedestroy($img);\n', 1, 308, 1, 0, 1, '2021-08-24 09:35:05', '2022-09-11 07:31:14'),
(1095, 1000, 'php文件上传', '<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">&lt;?php\n    //接收文件\n\n    print_r($_FILES);\n    $file=$_FILES[\'file\'];\n    $filename=pathinfo($file[\'name\'],PATHINFO_FILENAME);\n    $ext=pathinfo($file[\'name\'],PATHINFO_EXTENSION);\n    if(is_uploaded_file($file[\'tmp_name\'])){\n        move_uploaded_file($file[\'tmp_name\'],\'./\' . $file[\'name\']   );\n    }\n    echo \"ok\";</code></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/008.jpg', '&lt;?php\n    //接收文件\n\n    print_r($_FILES);\n    $file=$_FILES[\'file\'];\n    $filename=pathinfo($file[\'name\'],PATHINFO_FILENAME);\n    $ext=pathinfo($file[\'name\'],PATHINFO_EXTENSION);\n    if(is_uploaded_file($file[\'tmp_name\'])){\n        move_uploaded_file($file[\'tmp_name\'],\'./\' . $file[\'name\']   );\n    }\n    echo \"ok\";', 1, 345, 1, 0, 1, '2021-08-24 08:05:55', '2022-09-11 07:31:17'),
(1097, 1000, 'php替换换行回车符textarea', '<p><img src=\"https://wpcdn.qin500.com/1000/2021824203744nJ85tW6ard7TE7frK4wjp9eB1H.png\" width=\"384\" height=\"327\" /></p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">&lt;?php\nif ($_SERVER[\'REQUEST_METHOD\'] == \"POST\") {\n    echo \"&lt;pre&gt;\";\n    $p = $_POST[\'text\'];\n//    $c = explode(chr(13) . chr(10), $p);\n    $c = explode(\"\\r\\n\", $p);\n    $c = explode(PHP_EOL, $p);\n    $c = array_filter($c);//过滤空数据\n//        print_r($c);\n//    $res = array_map(function ($item) {\n//        //替换回车或者换行符为空\n//        return str_replace([chr(13) . chr(10), chr(10), chr(13)], \"\", $item);\n//    }, $c);\n    print_r($c);\n\n    echo \"&lt;/pre&gt;\";\n}\n\n?&gt;\n\n&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\"\n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;form action=\"\" method=\"post\" enctype=\"application/x-www-form-urlencoded\"&gt;\n    &lt;textarea name=\"text\" id=\"\" cols=\"30\" rows=\"10\"&gt;a\nb\nc\nd\ne\nf\ng&lt;/textarea&gt;\n    &lt;button type=\"submit\"&gt;提交&lt;/button&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>', 'https://wpcdn.qin500.com/1000/2021824203744nJ85tW6ard7TE7frK4wjp9eB1H.png', '\n&lt;?php\nif ($_SERVER[\'REQUEST_METHOD\'] == \"POST\") {\n    echo \"&lt;pre&gt;\";\n    $p = $_POST[\'text\'];\n//    $c = explode(chr(13) . chr(10), $p);\n    $c = explode(\"\\r\\n\", $p);\n    $c = explode(PHP_EOL, $p);\n    $c = array_filter($c);//过滤空数据\n//        print_r($c);\n//    $res = array_map(function ($item) {\n//        //替换回车或者换行符为空\n//        return str_replace([chr(13) . chr(10), chr(10), chr(13)], \"\", $item);\n//    }, $c);\n    print_r($c);\n\n    echo \"&lt;/pre&gt;\";\n}\n\n?&gt;\n\n&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\"\n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;form action=\"\" method=\"post\" enctype=\"application/x-www-form-urlencoded\"&gt;\n    &lt;textarea name=\"text\" id=\"\" cols=\"30\" rows=\"10\"&gt;a\nb\nc\nd\ne\nf\ng&lt;/textarea&gt;\n    &lt;button type=\"submit\"&gt;提交&lt;/button&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n', 1, 562, 1, 0, 1, '2021-08-24 12:38:17', '2022-09-11 09:24:14'),
(1098, 1000, '数组array_map和array_walk的区别', '<p>array_map 和array_walk 都是对数组内每个元素进行一一处理</p>\n<p>array_walk 没有return,只有引用(&amp;),返回值为TRUE 或 FALSE,</p>\n<p>它能获取$value,和$key</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">&lt;?php\n//&amp;为可选,加上&amp;,每次处理完都改变原有数组内元素的值\nfunction myfunction(&amp;$value, $key)\n{\n     $value .= \"9\";\n}\n\n$a1 = array(\"a\" =&gt; \"red\", \"b\" =&gt; \"green\");\n$a2 = array($a1, \"1\" =&gt; \"blue\", \"2\" =&gt; \"yellow\");\n\narray_walk($a1,\'myfunction\');\nprint_r($a1);</code></pre>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">//这个函数内递归的去处理\narray_walk_recursive($a2,\"myfunction\");</code></pre>\n<p><img src=\"https://wpcdn.qin500.com/1000/2021824211741HAdEerAG9BhB4TQfjZk7Ks7rmG.png\" width=\"734\" height=\"335\" /></p>\n<p>&nbsp;</p>\n<p>array_map 不能获取key值,后面接一个数组,函数就传递一个参数,它有return,它不改变原有数组的值,而是返回一个新的数组</p>\n<p><img src=\"https://wpcdn.qin500.com/1000/2021824212553XDf8283defH4yfG3hE1YjPRTwB.png\" width=\"693\" height=\"343\" /></p>', 'https://wpcdn.qin500.com/1000/2021824211741HAdEerAG9BhB4TQfjZk7Ks7rmG.png', 'array_map 和array_walk 都是对数组内每个元素进行一一处理\narray_walk 没有return,只有引用(&amp;),返回值为TRUE 或 FALSE,\n它能获取$value,和$key\n&lt;?php\n//&amp;为可选,加上&amp;,每次处理完都改变原有数组内元素的值\nfunction myfunction(&amp;$value, $key)\n{\n     $value .= \"9\";\n}\n\n$a1 = array(\"a\" =&gt; \"red\", \"b\" =&gt; \"green\");\n$a2 = array($a1, \"1\" =&gt; \"blue\", \"2\" =&gt; \"yellow\");\n\narray_walk($a1,\'myfunction\');\nprint_r($a1);\n//这个函数内递归的去处理\narray_walk_recursive($a2,\"myfunction\");\n\n&nbsp;\narray_map 不能获取key值,后面接一个数组,函数就传递一个参数,它有return,它不改变原有数组的值,而是返回一个新的数组\n', 4, 539, 1, 0, 1, '2021-08-24 13:26:11', '2022-09-11 10:24:00'),
(1099, 1000, 'dns反查和正向查找', '<p>php</p>\n<pre class=\"language-php\"><code class=\"line-numbers language-php\">//查找ip\n$a=gethostbyname(\"localhost\");\n//通过ip查找主机\n$b=gethostbyaddr(\"127.0.0.1\");</code></pre>\n<p>&nbsp;</p>\n<p><img src=\"https://wpcdn.qin500.com/1000/2021825103118ydYf5PQZipD5y2b5T1WSYm9Ks9.png\" width=\"518\" height=\"281\" /></p>\n<p>&nbsp;</p>', 'https://wpcdn.qin500.com/1000/2021825103118ydYf5PQZipD5y2b5T1WSYm9Ks9.png', 'php\n//查找ip\n$a=gethostbyname(\"localhost\");\n//通过ip查找主机\n$b=gethostbyaddr(\"127.0.0.1\");\n&nbsp;\n\n&nbsp;', 1, 559, 1, 0, 1, '2021-08-25 02:31:42', '2022-09-11 07:09:35'),
(1103, 1000, 'javascript语句逻辑与或非和标签语句', '<p>逻辑与或非最常用不过了,学了才发现,js里面的逻辑与或非不仅可以判断两个值的真假,还可以进行返回</p>\n<p>&amp;&amp;&nbsp; &nbsp;相同即为真　　　　//优先返回假值,同为真,返回第二个</p>\n<p>||&nbsp; &nbsp; 　一真一假即为真　　//优先返回为真,同为假,返回第二个</p>\n<p>！　取反</p>\n<div>\n<div>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">a＝0；\nb＝false;\nc=1\nd=2\nconsole.log(a &amp;&amp; b); //0\nconsole.log(c &amp;&amp; d); //2\n\nconsole.log(a || b); //false\nconsole.log(c || d); //1</code></pre>\n<p>&nbsp;</p>\n<p>标签语句<br />标签语句用于给语句加标签，语法如下：<br />label: statement&nbsp;<br />下面是一个例子：</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">start: for (let i = 0; i &lt; count; i++) { \n console.log(i); \n} </code></pre>\n</div>\n<div>&nbsp;</div>\n<div>如果i,j等于5,直接跳出所有循环</div>\n<div>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">let num = 0; \noutermost: \nfor (let i = 0; i &lt; 10; i++) { \n for (let j = 0; j &lt; 10; j++) { \n     console.log(i,j);\n if (i == 5 &amp;&amp; j == 5) { \n     \n break outermost; \n } \n num++; \n } \n} \nconsole.log(num); // 55 </code></pre>\n<p>&nbsp;</p>\n<p>如果i,j等于5,直接跳出内部循环</p>\n<pre class=\"language-js\"><code class=\"line-numbers language-js\">let num = 0; \noutermost: \nfor (let i = 0; i &lt; 10; i++) { \n for (let j = 0; j &lt; 10; j++) { \n     console.log(i,j);\n if (i == 5 &amp;&amp; j == 5) { \n     \n continue outermost; \n } \n num++; \n } \n} \nconsole.log(num); // 95 </code></pre>\n</div>\n</div>', 'https://wpcdn.qin500.com/QIN500/SUCAI/068.jpg', '逻辑与或非最常用不过了,学了才发现,js里面的逻辑与或非不仅可以判断两个值的真假,还可以进行返回\n&amp;&amp;&nbsp; &nbsp;相同即为真　　　　//优先返回假值,同为真,返回第二个\n||&nbsp; &nbsp; 　一真一假即为真　　//优先返回为真,同为假,返回第二个\n！　取反\n\n\na＝0；\nb＝false;\nc=1\nd=2\nconsole.log(a &amp;&amp; b); //0\nconsole.log(c &amp;&amp; d); //2\n\nconsole.log(a || b); //false\nconsole.log(c || d); //1\n&nbsp;\n标签语句标签语句用于给语句加标签，语法如下：label: statement&nbsp;下面是一个例子：\nstart: for (let i = 0; i &lt; count; i++) { \n console.log(i); \n} \n\n&nbsp;\n如果i,j等于5,直接跳出所有循环\n\nlet num = 0; \noutermost: \nfor (let i = 0; i &lt; 10; i++) { \n for (let j = 0; j &lt; 10; j++) { \n     console.log(i,j);\n if (i == 5 &amp;&amp; j == 5) { \n     \n break outermost; \n } \n num++; \n } \n} \nconsole.log(num); // 55 \n&nbsp;\n如果i,j等于5,直接跳出内部循环\nlet num = 0; \noutermost: \nfor (let i = 0; i &lt; 10; i++) { \n for (let j = 0; j &lt; 10; j++) { \n     console.log(i,j);\n if (i == 5 &amp;&amp; j == 5) { \n     \n continue outermost; \n } \n num++; \n } \n} \nconsole.log(num); // 95 \n\n', 21, 553, 1, 0, 1, '2021-09-11 00:52:59', '2022-09-11 07:09:35'),
(1106, 1000, 'webstorm调试当前文件', '<p>如何在webstorm中调试当前打开的文件</p>\n<p><img src=\"https://wpcdn.qin500.com/1000/20211014153431AkN2Kb1275Y2MwfQy7rYmNc1Ra.png\" width=\"472\" height=\"380\" /></p>\n<p>在要调试的文本框中输入</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">$ProjectName$/$FilePathRelativeToProjectRoot$</code></pre>\n<p>&nbsp;</p>', 'https://wpcdn.qin500.com/1000/20211014153431AkN2Kb1275Y2MwfQy7rYmNc1Ra.png', '如何在webstorm中调试当前打开的文件\n\n在要调试的文本框中输入\n$ProjectName$/$FilePathRelativeToProjectRoot$\n&nbsp;', 10, 517, 1, 0, 1, '2021-10-14 07:36:06', '2022-09-11 14:53:42'),
(1107, 1000, 'js在线播放视频blob方式', '<h2>一般的xhr请求</h2>\n<p>xhr.responseType一般情况下,我们可以不写,最近在做视频播放的时候,发现视频播放不了</p>\n<p>经过摸索发现一定要设置xhr.responseType,可以设置为blob或者arraybuffer</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">    let xhr=new XMLHttpRequest()\n    xhr.responseType=\"arraybuffer\"\n    xhr.onreadystatechange=function () {\n        if(xhr.readyState == 4 &amp;&amp; xhr.status ==200){\n            // let blob=new Blob([xhr.response],{type:\'video/mpeg4\'})\n            let blob=new Blob([this.response,{type:\'video/mp4\'}])\n\n            let video=document.querySelector(\'video\')\n            video.onload=function (e) {\n                window.URL.revokeObjectURL(video.src)\n            }\n            video.src=URL.createObjectURL(blob)\n        }\n    }\n    xhr.open(\"GET\",\"001.mp4\")\n    xhr.send(null)</code></pre>\n<p>&nbsp;</p>\n<p>下面用fetch方法请求,和上面实现一样的功能</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">fetch(\'./001.mp4\').then((res)=&gt; res.blob()).then((data)=&gt;{\n        let blob=new Blob([data],{type:\'video/mpeg4\'})\n        let url=URL.createObjectURL(data)\n        let video=document.querySelector(\'video\')\n        video.src=url\n    })</code></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/026.jpg', '一般的xhr请求\nxhr.responseType一般情况下,我们可以不写,最近在做视频播放的时候,发现视频播放不了\n经过摸索发现一定要设置xhr.responseType,可以设置为blob或者arraybuffer\n    let xhr=new XMLHttpRequest()\n    xhr.responseType=\"arraybuffer\"\n    xhr.onreadystatechange=function () {\n        if(xhr.readyState == 4 &amp;&amp; xhr.status ==200){\n            // let blob=new Blob([xhr.response],{type:\'video/mpeg4\'})\n            let blob=new Blob([this.response,{type:\'video/mp4\'}])\n\n            let video=document.querySelector(\'video\')\n            video.onload=function (e) {\n                window.URL.revokeObjectURL(video.src)\n            }\n            video.src=URL.createObjectURL(blob)\n        }\n    }\n    xhr.open(\"GET\",\"001.mp4\")\n    xhr.send(null)\n&nbsp;\n下面用fetch方法请求,和上面实现一样的功能\nfetch(\'./001.mp4\').then((res)=&gt; res.blob()).then((data)=&gt;{\n        let blob=new Blob([data],{type:\'video/mpeg4\'})\n        let url=URL.createObjectURL(data)\n        let video=document.querySelector(\'video\')\n        video.src=url\n    })', 11, 584, 0, 0, 1, '2021-11-01 08:07:32', '2022-09-11 07:09:33'),
(1108, 1000, 'php操作利用内置函数写入和读取csv文件', '<p>php输出流</p>\n<p>php://output 是一个只写的数据流， 允许你以 print 和 echo 一样的方式 写入到输出缓冲区。</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">header(\'Content-Type: application/csv\');\nheader(\'Content-Disposition: attachment; filename=\"test.csv\"\');\n$output = fopen(\'php://output\',\'w\') or die(\"Can\'t open php://output\");\n//UTF8 csv文件头前需添加BOM，不然会是乱码\nfwrite($output, chr(0xEF).chr(0xBB).chr(0xBF));\n// 输出标题行\nfputcsv($output, array(\'站点名\', \'域名\', \'行业\'));\n//数据内容\n$rows = array(\n    array(\'天猫\', \'http://tmall.com\', \'电子商务\')\n,array(\'爱E族\', \'http://aiezu.com\', \'互联网技术\')\n,array(\'腾讯\', \'http://qq.com\', \'社交网络\')\n);\nforeach($rows as $row) {\n    fputcsv($output, $row);\n}\nfclose($output) or die(\"Can\'t close php://output\");</code></pre>\n<p>&nbsp;</p>\n<p>将文件保存到服务器</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">$output = fopen(\'demo.csv\',\'w\') or die(\"Can\'t open php://output\");\n//UTF8 csv文件头前需添加BOM，不然会是乱码\nfwrite($output, chr(0xEF).chr(0xBB).chr(0xBF));\n// 输出标题行\nfputcsv($output, array(\'站点名\', \'域名\', \'行业\'));\n//数据内容\n$rows = array(\n    array(\'天猫\', \'http://tmall.com\', \'电子商务\')\n,array(\'爱E族\', \'http://aiezu.com\', \'互联网技术\')\n,array(\'腾讯\', \'http://qq.com\', \'社交网络\')\n);\nforeach($rows as $row) {\n    fputcsv($output, $row);\n}\n\n\nfclose($output) or die(\"Can\'t close php://output\");</code></pre>\n<p>&nbsp;</p>\n<p>读取csv文件</p>\n<p>fgetcsv文件每次读取一行,反复调用,即可遍历读取整个tab表</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">$handle = fopen(\'demo.csv\', \'r\') or die(\"Can\'t open php://output\");\n\n$data=fgetcsv($handle);\n$data =iconv(\'gbk\',\'utf-8\',var_export($data,true));\nvar_dump($data);\n\n$data=fgetcsv($handle);\n$data =iconv(\'gbk\',\'utf-8\',var_export($data,true));\nvar_dump($data);\n\n$row=0;\nwhile (($data = fgetcsv($handle, 1000, \",\")) !== FALSE) {\n    $num = count($data);\n    echo \"&lt;p&gt; $num fields in line $row: &lt;br /&gt;&lt;/p&gt;\\n\";\n    $row++;\n    for ($c = 0; $c &lt; $num; $c++) {\n        echo iconv(\'gbk\',\'utf-8\',$data[$c] ). \"&lt;br /&gt;\";\n    }\n}</code></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/040.jpg', 'php输出流\nphp://output 是一个只写的数据流， 允许你以 print 和 echo 一样的方式 写入到输出缓冲区。\nheader(\'Content-Type: application/csv\');\nheader(\'Content-Disposition: attachment; filename=\"test.csv\"\');\n$output = fopen(\'php://output\',\'w\') or die(\"Can\'t open php://output\");\n//UTF8 csv文件头前需添加BOM，不然会是乱码\nfwrite($output, chr(0xEF).chr(0xBB).chr(0xBF));\n// 输出标题行\nfputcsv($output, array(\'站点名\', \'域名\', \'行业\'));\n//数据内容\n$rows = array(\n    array(\'天猫\', \'http://tmall.com\', \'电子商务\')\n,array(\'爱E族\', \'http://aiezu.com\', \'互联网技术\')\n,array(\'腾讯\', \'http://qq.com\', \'社交网络\')\n);\nforeach($rows as $row) {\n    fputcsv($output, $row);\n}\nfclose($output) or die(\"Can\'t close php://output\");\n&nbsp;\n将文件保存到服务器\n$output = fopen(\'demo.csv\',\'w\') or die(\"Can\'t open php://output\");\n//UTF8 csv文件头前需添加BOM，不然会是乱码\nfwrite($output, chr(0xEF).chr(0xBB).chr(0xBF));\n// 输出标题行\nfputcsv($output, array(\'站点名\', \'域名\', \'行业\'));\n//数据内容\n$rows = array(\n    array(\'天猫\', \'http://tmall.com\', \'电子商务\')\n,array(\'爱E族\', \'http://aiezu.com\', \'互联网技术\')\n,array(\'腾讯\', \'http://qq.com\', \'社交网络\')\n);\nforeach($rows as $row) {\n    fputcsv($output, $row);\n}\n\n\nfclose($output) or die(\"Can\'t close php://output\");\n&nbsp;\n读取csv文件\nfgetcsv文件每次读取一行,反复调用,即可遍历读取整个tab表\n$handle = fopen(\'demo.csv\', \'r\') or die(\"Can\'t open php://output\");\n\n$data=fgetcsv($handle);\n$data =iconv(\'gbk\',\'utf-8\',var_export($data,true));\nvar_dump($data);\n\n$data=fgetcsv($handle);\n$data =iconv(\'gbk\',\'utf-8\',var_export($data,true));\nvar_dump($data);\n\n$row=0;\nwhile (($data = fgetcsv($handle, 1000, \",\")) !== FALSE) {\n    $num = count($data);\n    echo \"&lt;p&gt; $num fields in line $row: &lt;br /&gt;&lt;/p&gt;\\n\";\n    $row++;\n    for ($c = 0; $c &lt; $num; $c++) {\n        echo iconv(\'gbk\',\'utf-8\',$data[$c] ). \"&lt;br /&gt;\";\n    }\n}', 1, 477, 1, 0, 1, '2021-11-02 12:53:13', '2022-09-11 07:09:32'),
(1109, 1000, 'js实现摄像头拍照录像预览', '<p>&nbsp;</p>\n<p>使用js实现简单的拍照,录像</p>\n<pre class=\"\"><code class=\"line-numbers \">MediaRecorder用于记录视频</code></pre>\n<pre class=\"line-numbers  language-markup\"><code class=\"line-numbers language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\"&gt;\n    &lt;title&gt;pz&lt;/title&gt;\n    &lt;style&gt;\n        * {\n            padding: 0;\n            margin: 2px;\n        }\n\n        video, canvas, img {\n            border: 1px solid #ddd;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;video id=\"video\" width=\"400\" height=\"300\"&gt;&lt;/video&gt;\n&lt;video id=\"video2\" width=\"400\" height=\"300\"&gt;&lt;/video&gt;\n&lt;canvas id=\"canvas\" width=\"400\" height=\"300\"&gt;&lt;/canvas&gt;\n&lt;img id=\"img\" width=\"400\" height=\"300\"&gt;\n&lt;br&gt;\n&lt;button id=\"tack\"&gt;拍照&lt;/button&gt;\n&lt;button id=\"start_record\"&gt;开始录像&lt;/button&gt;\n&lt;button id=\"stop_record\"&gt;停止录像&lt;/button&gt;\n&lt;button id=\"closeCamera\"&gt;关闭摄像头&lt;/button&gt;\n&lt;script&gt;\n\n    var video = document.getElementById(\'video\'),\n        video2 = document.getElementById(\'video2\'),\n        tack = document.getElementById(\'tack\'),\n        start_record = document.getElementById(\'start_record\'),\n        closeCamera = document.getElementById(\'closeCamera\'),\n        stop_record = document.getElementById(\'stop_record\'),\n        canvas = document.getElementById(\'canvas\'),\n        img = document.getElementById(\'img\'),\n        ctx = canvas.getContext(\'2d\'),\n        mediaRecorder=null,\n        streamTrack\n    //媒体对象\n    let container = {video: true, audio: false}\n    navigator.mediaDevices.enumerateDevices().then((res) =&gt; {\n        for (const x of res) {\n            // console.log(x.label)//遍历设备\n        }\n    })\n\n    navigator.mediaDevices.getUserMedia(container)\n        .then((stream) =&gt; {\n            video.srcObject = stream\n            video.onloadeddata = function () {\n                this.play()\n                setInterval(()=&gt;{\n                    //将video绘制到canvas上\n                    ctx.drawImage(video, 0, 0, video.width, video.height)\n                    let url=canvas.toDataURL(\"image/png\")\n                    img.src=url;\n                },200)\n            }\n            //录像保存\n            mediaRecorder=new MediaRecorder(stream)\n            let chunks=[],startTime=0\n            streamTrack = typeof stream.stop === \'function\' ? stream : stream.getTracks()[0];\n            console.log(streamTrack)\n\n            //停止录像的时候,才会发生这个事件\n            mediaRecorder.ondataavailable=function (e) {\n                console.log(e)\n                console.log(mediaRecorder.mimeType)\n                chunks.push(e.data)\n            }\n\n            mediaRecorder.onstop=function (e) {\n                // recorderFile=new Blob(chunks,{type:mediaRecorder.mimeType})\n                recorderFile=new Blob(chunks,{type:\'video/mp4\'})\n                let url=URL.createObjectURL(recorderFile)\n                console.log(url)\n                video2.src=url\n                video2.onloadeddata=function () {\n                    this.play()\n                }\n                chunks=[]\n            }\n            mediaRecorder.start()\n            setTimeout(function () {\n                mediaRecorder.stop()\n            },10000)\n\n        }).catch((error) =&gt; {\n        console.log(error,\"请确保浏览器允许获取音视频权限\")\n    })\n\n    stop_record.onclick=function () {\n        navigator.mediaDevices\n    }\n    stop_record.onclick=function (e) {\n        mediaRecorder.stop()\n    }\n    closeCamera.onclick=function (e) {\n        streamTrack &amp;&amp; streamTrack.stop()\n    }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/018.jpg', '&nbsp;\n使用js实现简单的拍照,录像\nMediaRecorder用于记录视频\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\"&gt;\n    &lt;title&gt;pz&lt;/title&gt;\n    &lt;style&gt;\n        * {\n            padding: 0;\n            margin: 2px;\n        }\n\n        video, canvas, img {\n            border: 1px solid #ddd;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;video id=\"video\" width=\"400\" height=\"300\"&gt;&lt;/video&gt;\n&lt;video id=\"video2\" width=\"400\" height=\"300\"&gt;&lt;/video&gt;\n&lt;canvas id=\"canvas\" width=\"400\" height=\"300\"&gt;&lt;/canvas&gt;\n&lt;img id=\"img\" width=\"400\" height=\"300\"&gt;\n&lt;br&gt;\n&lt;button id=\"tack\"&gt;拍照&lt;/button&gt;\n&lt;button id=\"start_record\"&gt;开始录像&lt;/button&gt;\n&lt;button id=\"stop_record\"&gt;停止录像&lt;/button&gt;\n&lt;button id=\"closeCamera\"&gt;关闭摄像头&lt;/button&gt;\n&lt;script&gt;\n\n    var video = document.getElementById(\'video\'),\n        video2 = document.getElementById(\'video2\'),\n        tack = document.getElementById(\'tack\'),\n        start_record = document.getElementById(\'start_record\'),\n        closeCamera = document.getElementById(\'closeCamera\'),\n        stop_record = document.getElementById(\'stop_record\'),\n        canvas = document.getElementById(\'canvas\'),\n        img = document.getElementById(\'img\'),\n        ctx = canvas.getContext(\'2d\'),\n        mediaRecorder=null,\n        streamTrack\n    //媒体对象\n    let container = {video: true, audio: false}\n    navigator.mediaDevices.enumerateDevices().then((res) =&gt; {\n        for (const x of res) {\n            // console.log(x.label)//遍历设备\n        }\n    })\n\n    navigator.mediaDevices.getUserMedia(container)\n        .then((stream) =&gt; {\n            video.srcObject = stream\n            video.onloadeddata = function () {\n                this.play()\n                setInterval(()=&gt;{\n                    //将video绘制到canvas上\n                    ctx.drawImage(video, 0, 0, video.width, video.height)\n                    let url=canvas.toDataURL(\"image/png\")\n                    img.src=url;\n                },200)\n            }\n            //录像保存\n            mediaRecorder=new MediaRecorder(stream)\n            let chunks=[],startTime=0\n            streamTrack = typeof stream.stop === \'function\' ? stream : stream.getTracks()[0];\n            console.log(streamTrack)\n\n            //停止录像的时候,才会发生这个事件\n            mediaRecorder.ondataavailable=function (e) {\n                console.log(e)\n                console.log(mediaRecorder.mimeType)\n                chunks.push(e.data)\n            }\n\n            mediaRecorder.onstop=function (e) {\n                // recorderFile=new Blob(chunks,{type:mediaRecorder.mimeType})\n                recorderFile=new Blob(chunks,{type:\'video/mp4\'})\n                let url=URL.createObjectURL(recorderFile)\n                console.log(url)\n                video2.src=url\n                video2.onloadeddata=function () {\n                    this.play()\n                }\n                chunks=[]\n            }\n            mediaRecorder.start()\n            setTimeout(function () {\n                mediaRecorder.stop()\n            },10000)\n\n        }).catch((error) =&gt; {\n        console.log(error,\"请确保浏览器允许获取音视频权限\")\n    })\n\n    stop_record.onclick=function () {\n        navigator.mediaDevices\n    }\n    stop_record.onclick=function (e) {\n        mediaRecorder.stop()\n    }\n    closeCamera.onclick=function (e) {\n        streamTrack &amp;&amp; streamTrack.stop()\n    }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;', 11, 570, 1, 0, 1, '2021-11-03 02:11:14', '2022-09-11 22:16:40'),
(1110, 1000, 'Vue3.0的新语法糖-script setup', '<p>这个提案的主要目标是通过直接向模板公开&nbsp;<code>&lt;script setup&gt;</code>&nbsp;的上下文，减少在单文件组件（SFC）中使用 Composition API 的繁琐程度。</p>\n<p>之前有一个关于&nbsp;<code>&lt;script setup&gt;</code> ，目前已经实现（但被标记为实验性）。旧的提议选择了导出语法，这样代码就能与未使用的变量配合得很好。</p>\n<p>这个提议采取了一个不同的方向，基于我们可以在 eslint-plugin-vue 中提供定制的 linter 规则的前提下。这使我们能够以最简洁的语法为目标。</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">&lt;script setup&gt;\n  //syntax enabled\n&lt;/script&gt;\n</code></pre>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">&lt;script setup&gt;\n  import Foo from \'./Foo.vue\'\n  import MyComponent from \'./MyComponent.vue\'\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;Foo /&gt;\n  &lt;!-- kebab-case also works --&gt;\n  &lt;my-component /&gt;\n&lt;/template&gt;\n</code></pre>\n<p>props和emit的使用</p>\n<pre class=\"line-numbers  language-js\"><code class=\"line-numbers language-js\">&lt;script setup&gt;\nimport {defineProps,defineEmits} from \"vue\";\n\nconst props=defineProps({\n  foo:String\n})\nconst emit=defineEmits(\'update\',\'delete\')\n&lt;/script&gt;</code></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/097.jpg', '这个提案的主要目标是通过直接向模板公开&nbsp;&lt;script setup&gt;&nbsp;的上下文，减少在单文件组件（SFC）中使用 Composition API 的繁琐程度。\n之前有一个关于&nbsp;&lt;script setup&gt; ，目前已经实现（但被标记为实验性）。旧的提议选择了导出语法，这样代码就能与未使用的变量配合得很好。\n这个提议采取了一个不同的方向，基于我们可以在 eslint-plugin-vue 中提供定制的 linter 规则的前提下。这使我们能够以最简洁的语法为目标。\n&lt;script setup&gt;\n  //syntax enabled\n&lt;/script&gt;\n\n&lt;script setup&gt;\n  import Foo from \'./Foo.vue\'\n  import MyComponent from \'./MyComponent.vue\'\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;Foo /&gt;\n  &lt;!-- kebab-case also works --&gt;\n  &lt;my-component /&gt;\n&lt;/template&gt;\n\nprops和emit的使用\n&lt;script setup&gt;\nimport {defineProps,defineEmits} from \"vue\";\n\nconst props=defineProps({\n  foo:String\n})\nconst emit=defineEmits(\'update\',\'delete\')\n&lt;/script&gt;', 15, 515, 1, 0, 1, '2021-12-10 11:24:25', '2022-09-11 07:09:34'),
(1111, 1000, 'laravel利用工厂函数快速大量测试数据', '<p>先在配置文件设置,支持生成中文字符串</p>\n<p><img src=\"https://wpcdn.qin500.com/1000/20211212132916YmJk2WNFwSjz6xQmW4N9kHE6im.png\" width=\"684\" height=\"224\" /></p>\n<p>&nbsp;</p>\n<p>生成模型工厂文件</p>\n<pre class=\"language-php\"><code class=\"line-numbers language-php\">php artisan make:factory 工厂名,工厂名一般是模型名称+Factory,大驼峰命名,如PostFactory\nphp artisan make:factory PostFactory</code></pre>\n<p><img src=\"https://wpcdn.qin500.com/1000/20211212133815JkDGyer26FR7it7hGRCziF3Z08.png\" width=\"684\" height=\"320\" /></p>\n<p>再输入命令,进入工厂命令</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">php artisan tinker</code></pre>\n<p>接下来运行如下命令生成测试数据</p>\n<pre class=\"language-php\"><code class=\"line-numbers language-php\">App\\Models\\Post::factory()-&gt;create(); \n多条数据\nApp\\Models\\Post::factory()-&gt;count(100)-&gt;create();\n</code></pre>', 'https://wpcdn.qin500.com/1000/20211212132916YmJk2WNFwSjz6xQmW4N9kHE6im.png', '先在配置文件设置,支持生成中文字符串\n\n&nbsp;\n生成模型工厂文件\nphp artisan make:factory 工厂名,工厂名一般是模型名称+Factory,大驼峰命名,如PostFactory\nphp artisan make:factory PostFactory\n\n再输入命令,进入工厂命令\nphp artisan tinker\n接下来运行如下命令生成测试数据\nApp\\Models\\Post::factory()-&gt;create(); \n多条数据\nApp\\Models\\Post::factory()-&gt;count(100)-&gt;create();\n', 1, 510, 1, 0, 1, '2021-12-12 05:40:50', '2022-09-11 07:09:32'),
(1112, 1000, 'laravel分页和安装语言包', '<p>分页</p>\n<h3 id=\"e5896e\">自定义分页&nbsp;</h3>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\"> $posts=Post::where([\'uid\'=&gt;$blog_user-&gt;id])-&gt;paginate(20);</code></pre>\n<p>如果你想要把当前所有的请求查询参数添加到分页链接，你可以使用&nbsp;<code>withQueryString</code>&nbsp;方法：</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">$users = User::paginate(15)-&gt;withQueryString();</code></pre>\n<p>展示分页效果</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">&lt;div class=\"container\"&gt;\n    @foreach ($users as $user)\n        {{ $user-&gt;name }}\n    @endforeach\n&lt;/div&gt;\n\n{{ $users-&gt;links() }}</code></pre>\n<p>&nbsp;</p>\n<p>安装中文语言包</p>\n<pre class=\"line-numbers  language-php\"><code class=\"line-numbers language-php\">composer require \"overtrue/laravel-lang:~3.0\"</code></pre>\n<p>修改config.php文件,修改成中文即可</p>\n<pre class=\"\"><code class=\"line-numbers \">\'locale\' =&gt; \'zh-CN\',</code></pre>', 'https://wpcdn.qin500.com/QIN500/SUCAI/056.jpg', '分页\n自定义分页&nbsp;\n $posts=Post::where([\'uid\'=&gt;$blog_user-&gt;id])-&gt;paginate(20);\n如果你想要把当前所有的请求查询参数添加到分页链接，你可以使用&nbsp;withQueryString&nbsp;方法：\n$users = User::paginate(15)-&gt;withQueryString();\n展示分页效果\n&lt;div class=\"container\"&gt;\n    @foreach ($users as $user)\n        {{ $user-&gt;name }}\n    @endforeach\n&lt;/div&gt;\n\n{{ $users-&gt;links() }}\n&nbsp;\n安装中文语言包\ncomposer require \"overtrue/laravel-lang:~3.0\"\n修改config.php文件,修改成中文即可\n\'locale\' =&gt; \'zh-CN\',', 1, 475, 1, 0, 1, '2021-12-21 06:22:29', '2022-09-11 07:09:32'),
(1105, 1000, 'ubuntu以root方式登录系统', '<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>现在开始设置root账户，重新打开终端，在自己的账户下，然后</p>\n<p>输入sudo gedit /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf</p>\n<p>输入上面的一句，直接打开下面的文本，然后</p>\n<p>在此文本第三行输入这句话greeter-show-manual-login=true</p>\n<p>然后保存</p>\n<p>关闭之后，回到终端窗口，输入：sudo passwd root &nbsp;回车；</p>\n<p>最后关机重启，就可以以root权限登录了。</p>', 'https://wpcdn.qin500.com/QIN500/SUCAI/076.jpg', '&nbsp;\n&nbsp;\n现在开始设置root账户，重新打开终端，在自己的账户下，然后\n输入sudo gedit /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf\n输入上面的一句，直接打开下面的文本，然后\n在此文本第三行输入这句话greeter-show-manual-login=true\n然后保存\n关闭之后，回到终端窗口，输入：sudo passwd root &nbsp;回车；\n最后关机重启，就可以以root权限登录了。', 13, 596, 1, 0, 1, '2021-09-25 06:43:44', '2022-09-11 17:18:58');

-- --------------------------------------------------------

--
-- 表的结构 `qin500_categories`
--

CREATE TABLE `qin500_categories` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `uid` int(11) NOT NULL COMMENT '用户id',
  `sort` int(11) NOT NULL DEFAULT '1' COMMENT '排序',
  `pid` int(11) NOT NULL DEFAULT '0' COMMENT '父ID',
  `name` varchar(50) COLLATE utf8_unicode_ci NOT NULL COMMENT '分类名称',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ROW_FORMAT=DYNAMIC;

--
-- 转存表中的数据 `qin500_categories`
--

INSERT INTO `qin500_categories` (`id`, `uid`, `sort`, `pid`, `name`, `created_at`, `updated_at`) VALUES
(1, 1000, 1, 0, 'php', '2021-07-05 14:34:43', '2021-09-09 01:53:39'),
(2, 1000, 1, 0, '随笔', '2021-07-05 16:07:11', '2021-07-05 16:07:11'),
(4, 1000, 1, 1, '数组', '2021-07-06 12:24:32', '2021-07-06 12:24:32'),
(5, 1000, 1, 1, '函数', '2021-07-06 12:24:40', '2021-07-06 12:24:40'),
(6, 1000, 1, 5, '内置函数', '2021-07-06 12:24:50', '2021-07-06 12:25:21'),
(8, 1000, 1, 5, '自定义函数', '2021-07-06 12:25:14', '2021-07-06 12:25:14'),
(9, 1000, 1, 1, '面向对象', '2021-07-06 12:25:35', '2021-07-06 12:25:35'),
(10, 1000, 1, 0, '前端', '2021-07-06 21:36:30', '2021-07-06 21:36:30'),
(11, 1000, 1, 10, 'javascript', '2021-07-06 21:36:42', '2021-07-06 21:36:42'),
(12, 1000, 1, 0, 'linux', '2021-07-07 01:02:47', '2021-07-07 01:02:47'),
(13, 1000, 1, 0, '系统', '2021-07-09 01:34:48', '2021-07-09 01:34:48'),
(15, 1000, 1, 10, 'vue', '2021-08-05 22:39:15', '2021-08-05 22:39:15'),
(16, 1000, 1, 1, '数据库', '2021-08-09 01:53:52', '2021-08-09 01:54:12'),
(17, 1000, 1, 10, 'css', '2021-08-12 11:11:07', '2021-08-12 11:11:07'),
(18, 1000, 1, 10, 'html', '2021-08-12 11:11:16', '2021-08-12 11:11:16'),
(19, 1000, 1, 13, '命令行', '2021-08-14 02:37:20', '2021-08-14 02:37:20'),
(20, 1000, 1, 1, 'thinkphp', '2021-09-06 12:07:49', '2021-09-06 12:07:49'),
(21, 1000, 1, 1, '字符串', '2021-09-09 01:52:57', '2021-09-09 01:52:57');

-- --------------------------------------------------------

--
-- 表的结构 `qin500_failed_jobs`
--

CREATE TABLE `qin500_failed_jobs` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `uuid` varchar(191) COLLATE utf8_unicode_ci NOT NULL,
  `connection` text COLLATE utf8_unicode_ci NOT NULL,
  `queue` text COLLATE utf8_unicode_ci NOT NULL,
  `payload` longtext COLLATE utf8_unicode_ci NOT NULL,
  `exception` longtext COLLATE utf8_unicode_ci NOT NULL,
  `failed_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ROW_FORMAT=DYNAMIC;

-- --------------------------------------------------------

--
-- 表的结构 `qin500_migrations`
--

CREATE TABLE `qin500_migrations` (
  `id` int(10) UNSIGNED NOT NULL,
  `migration` varchar(191) COLLATE utf8_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ROW_FORMAT=DYNAMIC;

--
-- 转存表中的数据 `qin500_migrations`
--

INSERT INTO `qin500_migrations` (`id`, `migration`, `batch`) VALUES
(1, '2014_10_12_000000_create_users_table', 1),
(2, '2014_10_12_100000_create_password_resets_table', 1),
(3, '2019_08_19_000000_create_failed_jobs_table', 1),
(4, '2021_06_27_161431_create_my_users_table', 1),
(5, '2021_06_28_074934_create_articles_table', 1),
(6, '2021_06_28_080032_create_categories_table', 1),
(7, '2021_06_28_080050_create_tags_table', 1),
(10, '2021_07_05_091512_create_disk_manages_table', 2);

-- --------------------------------------------------------

--
-- 表的结构 `qin500_my_users`
--

CREATE TABLE `qin500_my_users` (
  `id` bigint(20) UNSIGNED NOT NULL COMMENT '起始值为1000',
  `username` varchar(191) COLLATE utf8_unicode_ci NOT NULL,
  `email` varchar(191) COLLATE utf8_unicode_ci DEFAULT NULL,
  `phone` varchar(191) COLLATE utf8_unicode_ci DEFAULT NULL,
  `password` varchar(200) COLLATE utf8_unicode_ci DEFAULT NULL,
  `other` longtext COLLATE utf8_unicode_ci COMMENT '配置信息',
  `remember_token` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- 转存表中的数据 `qin500_my_users`
--

INSERT INTO `qin500_my_users` (`id`, `username`, `email`, `phone`, `password`, `other`, `remember_token`, `created_at`, `updated_at`) VALUES
(1000, 'admin', NULL, NULL, '$2y$10$rwWUzswP6qtHiJIn71bgbe9GZoGTA/oZs/pXhz5ecFHEqf2.gJ6VS', '{\"nickname\":\"\\u4e16\\u4e8b\\u65e0\\u5e38\",\"avatar\":\"https:\\/\\/wpcdn.qin500.com\\/QIN500\\/1000\\/qin500202181811497cxGWa5ben4bixfccbBxQF1zDit.png\",\"wxcode\":\"https:\\/\\/wpcdn.qin500.com\\/QIN500\\/1000\\/qin5002021818124025csBjdbEtyihyK0FcAnBzFKs8dx.png\",\"detail\":\"\\u8981\\u6709\\u9065\\u4e0d\\u53ef\\u53ca\\u7684\\u68a6\\u60f3,\\u4e5f\\u8981\\u6709\\u811a\\u8e0f\\u5b9e\\u5730\\u7684\\u672c\\u4e8b\"}', '3XV6QUJ4JqbfAo50X4NqamBaRXPBGxEL2Bgkz71v0z1oxb4DrWdiHbIX8dJ7', '2021-08-18 02:53:18', '2021-08-18 04:40:28');

-- --------------------------------------------------------

--
-- 表的结构 `qin500_password_resets`
--

CREATE TABLE `qin500_password_resets` (
  `email` varchar(191) COLLATE utf8_unicode_ci NOT NULL,
  `token` varchar(191) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ROW_FORMAT=DYNAMIC;

-- --------------------------------------------------------

--
-- 表的结构 `qin500_sys_options`
--

CREATE TABLE `qin500_sys_options` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `key` varchar(20) COLLATE utf8_unicode_ci DEFAULT NULL COMMENT '名称',
  `val` longtext COLLATE utf8_unicode_ci COMMENT '值'
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- 转存表中的数据 `qin500_sys_options`
--

INSERT INTO `qin500_sys_options` (`id`, `key`, `val`) VALUES
(1, 'title', '世事无常'),
(2, 'entitle', '世事无常'),
(3, 'logo', 'https://wpcdn.qin500.com/QIN500/1000/qin5002021818124320wMrmwXDk5X9tePND0iSWmaEn7H.png'),
(4, 'keywords', '世事无常个人博客网站，刘崇胡个人网站,分享原创文章,个人生活,站长圈子,个人博客'),
(5, 'copyright', '赣ICP备2021007535号'),
(6, 'description', '世事无常网为您提供一个生活分享,it技术分享,前端知识与php以及最新的it前言的技术.刘崇胡个人博客'),
(7, 'tongji', '<script>\r\n(function(){\r\nvar el = document.createElement(\"script\");\r\nel.src = \"https://lf1-cdn-tos.bytegoofy.com/goofy/ttzz/push.js?106e986c365691d8a13d24a7335b94a3c2a9a48cba762f8f51c1340a3977d16367a1ffc522a2541e3c38dc5b300860546cb4559754c11eb394d6c11be45937d7\";\r\nel.id = \"ttzz\";\r\nvar s = document.getElementsByTagName(\"script\")[0];\r\ns.parentNode.insertBefore(el, s);\r\n})(window)\r\n</script>');

-- --------------------------------------------------------

--
-- 表的结构 `qin500_tags`
--

CREATE TABLE `qin500_tags` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `uid` int(11) NOT NULL COMMENT '用户ID',
  `aid` int(11) NOT NULL COMMENT '文章id',
  `name` varchar(191) COLLATE utf8_unicode_ci NOT NULL COMMENT '名称',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ROW_FORMAT=DYNAMIC;

--
-- 转存表中的数据 `qin500_tags`
--

INSERT INTO `qin500_tags` (`id`, `uid`, `aid`, `name`, `created_at`, `updated_at`) VALUES
(22, 1000, 1046, 'php', '2021-07-06 21:34:38', '2021-07-06 21:34:38'),
(23, 1000, 1047, 'js', '2021-07-06 21:40:34', '2021-07-06 21:40:34'),
(24, 1000, 1048, 'js', '2021-07-07 00:57:21', '2021-07-07 00:57:21'),
(25, 1000, 1049, 'linux', '2021-07-07 01:04:36', '2021-07-07 01:04:36'),
(26, 1000, 1049, '服务器', '2021-07-07 01:04:36', '2021-07-07 01:04:36'),
(30, 1000, 1018, 'linux', '2021-07-07 13:05:46', '2021-07-07 13:05:46'),
(33, 1000, 1050, 'php函数', '2021-07-09 01:17:37', '2021-07-09 01:17:37'),
(34, 1000, 1051, 'js', '2021-07-09 01:22:50', '2021-07-09 01:22:50'),
(35, 1000, 1052, 'js', '2021-07-09 01:24:30', '2021-07-09 01:24:30'),
(36, 1000, 1052, 'jq', '2021-07-09 01:24:30', '2021-07-09 01:24:30'),
(37, 1000, 1053, 'linux', '2021-07-09 01:39:50', '2021-07-09 01:39:50'),
(38, 1000, 1053, 'mysql', '2021-07-09 01:39:50', '2021-07-09 01:39:50'),
(39, 1000, 1054, 'php', '2021-07-09 14:39:34', '2021-07-09 14:39:34'),
(40, 1000, 1054, 'php关键字', '2021-07-09 14:39:34', '2021-07-09 14:39:34'),
(41, 1000, 1055, 'php', '2021-07-10 00:39:31', '2021-07-10 00:39:31'),
(42, 1000, 1056, 'php', '2021-07-10 02:17:39', '2021-07-10 02:17:39'),
(43, 1000, 1056, '常量', '2021-07-11 13:46:31', '2021-07-11 13:46:31'),
(44, 1000, 1057, 'php', '2021-07-11 21:34:41', '2021-07-11 21:34:41'),
(45, 1000, 1057, '抓包', '2021-07-11 21:34:41', '2021-07-11 21:34:41'),
(48, 1000, 1060, 'php', '2021-07-12 00:22:53', '2021-07-12 00:22:53'),
(49, 1000, 1061, 'linux', '2021-07-13 01:00:35', '2021-07-13 01:00:35'),
(50, 1000, 1062, '安全', '2021-07-14 12:32:40', '2021-07-14 12:32:40'),
(52, 1000, 1064, 'php', '2021-07-22 15:11:02', '2021-07-22 15:11:02'),
(53, 1000, 1064, 'centos', '2021-07-22 15:11:02', '2021-07-22 15:11:02'),
(54, 1000, 1065, 'webpack', '2021-07-31 02:02:18', '2021-07-31 02:02:18'),
(55, 1000, 1065, '打包', '2021-07-31 02:02:18', '2021-07-31 02:02:18'),
(56, 1000, 1066, 'js', '2021-08-03 03:37:33', '2021-08-03 03:37:33'),
(57, 1000, 1067, 'js', '2021-08-04 12:59:17', '2021-08-04 12:59:17'),
(58, 1000, 1068, 'js', '2021-08-05 01:33:05', '2021-08-05 01:33:05'),
(59, 1000, 1069, 'vue', '2021-08-05 22:50:01', '2021-08-05 22:50:01'),
(60, 1000, 1070, 'vue', '2021-08-06 06:12:24', '2021-08-06 06:12:24'),
(61, 1000, 1071, 'php', '2021-08-07 00:35:04', '2021-08-07 00:35:04'),
(62, 1000, 1072, 'js', '2021-08-07 02:02:43', '2021-08-07 02:02:43'),
(63, 1000, 1073, 'php', '2021-08-07 02:54:43', '2021-08-07 02:54:43'),
(64, 1000, 1074, 'php', '2021-08-07 07:17:44', '2021-08-07 07:17:44'),
(65, 1000, 1074, 'http', '2021-08-07 07:17:44', '2021-08-07 07:17:44'),
(66, 1000, 1075, 'php', '2021-08-07 08:56:36', '2021-08-07 08:56:36'),
(67, 1000, 1075, 'js', '2021-08-07 08:56:36', '2021-08-07 08:56:36'),
(68, 1000, 1076, 'vue', '2021-08-08 13:14:49', '2021-08-08 13:14:49'),
(69, 1000, 1077, 'php', '2021-08-09 02:04:32', '2021-08-09 02:04:32'),
(70, 1000, 1077, 'pdo', '2021-08-09 02:04:32', '2021-08-09 02:04:32'),
(71, 1000, 1077, '数据库', '2021-08-09 02:04:32', '2021-08-09 02:04:32'),
(72, 1000, 1078, 'mysql', '2021-08-09 02:27:10', '2021-08-09 02:27:10'),
(73, 1000, 1078, '数据库', '2021-08-09 02:27:10', '2021-08-09 02:27:10'),
(74, 1000, 1079, 'php', '2021-08-09 03:50:55', '2021-08-09 03:50:55'),
(75, 1000, 1079, '接口', '2021-08-09 03:50:55', '2021-08-09 03:50:55'),
(76, 1000, 1080, 'php', '2021-08-11 11:46:20', '2021-08-11 11:46:20'),
(77, 1000, 1081, 'js', '2021-08-12 09:23:30', '2021-08-12 09:23:30'),
(78, 1000, 1045, 'php', '2021-08-12 10:57:12', '2021-08-12 10:57:12'),
(79, 1000, 1082, 'php', '2021-08-12 13:43:55', '2021-08-12 13:43:55'),
(80, 1000, 1082, '接口', '2021-08-12 13:43:55', '2021-08-12 13:43:55'),
(81, 1000, 1083, 'cmd', '2021-08-14 02:39:14', '2021-08-14 02:39:14'),
(82, 1000, 1084, 'postman', '2021-08-14 03:14:52', '2021-08-14 03:14:52'),
(83, 1000, 1084, '测试', '2021-08-14 03:14:52', '2021-08-14 03:14:52'),
(84, 1000, 1007, 'js', '2021-08-18 03:48:17', '2021-08-18 03:48:17'),
(85, 1000, 1007, '编辑器', '2021-08-18 03:48:17', '2021-08-18 03:48:17'),
(86, 1000, 1008, '服务器', '2021-08-18 05:03:09', '2021-08-18 05:03:09'),
(97, 1000, 1092, 'vue', '2021-08-22 01:20:14', '2021-08-22 01:20:14'),
(92, 1000, 1009, '注册表', '2021-08-20 09:18:25', '2021-08-20 09:18:25'),
(90, 1000, 1016, 'php', '2021-08-20 07:19:49', '2021-08-20 07:19:49'),
(91, 1000, 1016, 'laravel', '2021-08-20 07:19:49', '2021-08-20 07:19:49'),
(96, 1000, 1091, 'vue', '2021-08-21 07:25:13', '2021-08-21 07:25:13'),
(98, 1000, 1006, '变量', '2021-08-22 02:06:37', '2021-08-22 02:06:37'),
(99, 1000, 1006, 'js', '2021-08-22 02:06:37', '2021-08-22 02:06:37'),
(100, 1000, 1093, 'vue', '2021-08-22 08:19:34', '2021-08-22 08:19:34'),
(101, 1000, 1094, 'curl', '2021-08-24 00:59:47', '2021-08-24 00:59:47'),
(102, 1000, 1094, 'php', '2021-08-24 00:59:47', '2021-08-24 00:59:47'),
(103, 1000, 1095, 'php', '2021-08-24 08:05:55', '2021-08-24 08:05:55'),
(104, 1000, 1095, '上传', '2021-08-24 08:05:55', '2021-08-24 08:05:55'),
(105, 1000, 1096, 'php', '2021-08-24 09:35:05', '2021-08-24 09:35:05'),
(106, 1000, 1097, 'php', '2021-08-24 12:38:17', '2021-08-24 12:38:17'),
(107, 1000, 1097, '数组', '2021-08-24 12:38:17', '2021-08-24 12:38:17'),
(108, 1000, 1098, 'php', '2021-08-24 13:26:11', '2021-08-24 13:26:11'),
(109, 1000, 1098, '数组', '2021-08-24 13:26:11', '2021-08-24 13:26:11'),
(110, 1000, 1099, 'php', '2021-08-25 02:31:42', '2021-08-25 02:31:42'),
(111, 1000, 1099, 'cmd', '2021-08-25 02:31:42', '2021-08-25 02:31:42'),
(112, 1000, 1022, 'php', '2021-08-26 13:31:18', '2021-08-26 13:31:18'),
(113, 1000, 1100, 'php', '2021-09-06 01:57:22', '2021-09-06 01:57:22'),
(114, 1000, 1101, 'php', '2021-09-06 12:09:47', '2021-09-06 12:09:47'),
(115, 1000, 1102, 'php', '2021-09-09 01:10:25', '2021-09-09 01:10:25'),
(116, 1000, 1062, 'cmd', '2021-09-09 04:21:27', '2021-09-09 04:21:27'),
(117, 1000, 1103, 'js', '2021-09-11 00:52:59', '2021-09-11 00:52:59'),
(119, 1000, 1105, 'linux', '2021-09-25 06:43:44', '2021-09-25 06:43:44'),
(120, 1000, 1106, 'webstorm', '2021-10-14 07:36:06', '2021-10-14 07:36:06'),
(121, 1000, 1107, 'js', '2021-11-01 08:07:32', '2021-11-01 08:07:32'),
(122, 1000, 1107, 'video', '2021-11-01 08:07:32', '2021-11-01 08:07:32'),
(123, 1000, 1108, 'php', '2021-11-02 12:53:13', '2021-11-02 12:53:13'),
(124, 1000, 1109, '拍照', '2021-11-03 02:11:14', '2021-11-03 02:11:14'),
(125, 1000, 1109, 'js', '2021-11-03 02:11:14', '2021-11-03 02:11:14'),
(126, 1000, 1110, 'vue', '2021-12-10 11:24:25', '2021-12-10 11:24:25'),
(127, 1000, 1110, 'js', '2021-12-10 11:24:25', '2021-12-10 11:24:25'),
(128, 1000, 1111, 'php', '2021-12-12 05:40:50', '2021-12-12 05:40:50'),
(129, 1000, 1111, 'laravel', '2021-12-12 05:40:50', '2021-12-12 05:40:50'),
(130, 1000, 1112, 'php', '2021-12-21 06:22:29', '2021-12-21 06:22:29'),
(131, 1000, 1112, 'laravel', '2021-12-21 06:22:29', '2021-12-21 06:22:29'),
(132, 1000, 1112, '分页', '2021-12-21 06:22:29', '2021-12-21 06:22:29');

-- --------------------------------------------------------

--
-- 表的结构 `qin500_users`
--

CREATE TABLE `qin500_users` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(191) COLLATE utf8_unicode_ci NOT NULL,
  `email` varchar(191) COLLATE utf8_unicode_ci NOT NULL,
  `email_verified_at` timestamp NULL DEFAULT NULL,
  `password` varchar(191) COLLATE utf8_unicode_ci NOT NULL,
  `remember_token` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ROW_FORMAT=DYNAMIC;

--
-- 转储表的索引
--

--
-- 表的索引 `qin500_articles`
--
ALTER TABLE `qin500_articles`
  ADD PRIMARY KEY (`id`) USING BTREE;

--
-- 表的索引 `qin500_categories`
--
ALTER TABLE `qin500_categories`
  ADD PRIMARY KEY (`id`) USING BTREE;

--
-- 表的索引 `qin500_failed_jobs`
--
ALTER TABLE `qin500_failed_jobs`
  ADD PRIMARY KEY (`id`) USING BTREE,
  ADD UNIQUE KEY `qin500_failed_jobs_uuid_unique` (`uuid`) USING BTREE;

--
-- 表的索引 `qin500_migrations`
--
ALTER TABLE `qin500_migrations`
  ADD PRIMARY KEY (`id`) USING BTREE;

--
-- 表的索引 `qin500_my_users`
--
ALTER TABLE `qin500_my_users`
  ADD PRIMARY KEY (`id`) USING BTREE,
  ADD UNIQUE KEY `qin500_my_users_username_unique` (`username`) USING BTREE,
  ADD UNIQUE KEY `qin500_my_users_email_unique` (`email`) USING BTREE,
  ADD UNIQUE KEY `qin500_my_users_phone_unique` (`phone`) USING BTREE;

--
-- 表的索引 `qin500_password_resets`
--
ALTER TABLE `qin500_password_resets`
  ADD KEY `qin500_password_resets_email_index` (`email`) USING BTREE;

--
-- 表的索引 `qin500_sys_options`
--
ALTER TABLE `qin500_sys_options`
  ADD PRIMARY KEY (`id`) USING BTREE;

--
-- 表的索引 `qin500_tags`
--
ALTER TABLE `qin500_tags`
  ADD PRIMARY KEY (`id`) USING BTREE;

--
-- 表的索引 `qin500_users`
--
ALTER TABLE `qin500_users`
  ADD PRIMARY KEY (`id`) USING BTREE,
  ADD UNIQUE KEY `qin500_users_email_unique` (`email`) USING BTREE;

--
-- 在导出的表使用AUTO_INCREMENT
--

--
-- 使用表AUTO_INCREMENT `qin500_articles`
--
ALTER TABLE `qin500_articles`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=1113;

--
-- 使用表AUTO_INCREMENT `qin500_categories`
--
ALTER TABLE `qin500_categories`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=22;

--
-- 使用表AUTO_INCREMENT `qin500_failed_jobs`
--
ALTER TABLE `qin500_failed_jobs`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- 使用表AUTO_INCREMENT `qin500_migrations`
--
ALTER TABLE `qin500_migrations`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;

--
-- 使用表AUTO_INCREMENT `qin500_my_users`
--
ALTER TABLE `qin500_my_users`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '起始值为1000', AUTO_INCREMENT=1001;

--
-- 使用表AUTO_INCREMENT `qin500_sys_options`
--
ALTER TABLE `qin500_sys_options`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;

--
-- 使用表AUTO_INCREMENT `qin500_tags`
--
ALTER TABLE `qin500_tags`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=133;

--
-- 使用表AUTO_INCREMENT `qin500_users`
--
ALTER TABLE `qin500_users`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
